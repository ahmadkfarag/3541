Shader "Explosion" {
	Properties {
		_RampTex ("Ramp", Rect) = "white"
		_MainTex ("Noise", 2D) = "grey"
		_Heat ("Heat", Float) = 1
		_Radius ("Radius", Float) = 1
		_Frequency ("Noise Frequency", Float) = 1
		_ScrollSpeed ("Noise Scroll Speed", Float) = 1
		_Alpha ("Alpha", Float) = 1
	}
	SubShader {
		Tags {"Queue"="Transparent+100" "RenderType"="Transparent" "IgnoreProjector"="True"}
		LOD 1000
		
		//render a smaller object inside, for the purpose of early-out Z testing
		Pass {
			ColorMask 0
			ZWrite On
			Program "vp" {
// Vertex combos: 1
//   d3d9 - ALU: 7 to 7
//   d3d11 - ALU: 6 to 6, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { }
"!!GLSL
#ifdef VERTEX

void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = (gl_Normal * 0.25);
  gl_Position = (gl_ModelViewProjectionMatrix * (gl_Vertex - tmpvar_1));
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(1.0, 1.0, 1.0, 1.0);
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
"vs_3_0
; 7 ALU
dcl_position o0
def c4, 0.25000000, 0.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
mov r0.w, c4.y
mul r0.xyz, v1, c4.x
add r0, v0, -r0
dp4 o0.w, r0, c3
dp4 o0.z, r0, c2
dp4 o0.y, r0, c1
dp4 o0.x, r0, c0
"
}

SubProgram "d3d11 " {
Keywords { }
Bind "vertex" Vertex
Bind "normal" Normal
ConstBuffer "UnityPerDraw" 336 // 64 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
BindCB "UnityPerDraw" 0
// 8 instructions, 2 temp regs, 0 temp arrays:
// ALU 6 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedhdkjmkiclbfbnglllcijdaofbacmbnkoabaaaaaabmacaaaaadaaaaaa
cmaaaaaakaaaaaaaneaaaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaafdeieefceaabaaaaeaaaabaa
faaaaaaafjaaaaaeegiocaaaaaaaaaaaaeaaaaaafpaaaaadpcbabaaaaaaaaaaa
fpaaaaadhcbabaaaabaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagiaaaaac
acaaaaaadiaaaaakhcaabaaaaaaaaaaaegbcbaaaabaaaaaaaceaaaaaaaaaiado
aaaaiadoaaaaiadoaaaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
aaaaaaaipcaabaaaaaaaaaaaegaobaiaebaaaaaaaaaaaaaaegbobaaaaaaaaaaa
diaaaaaipcaabaaaabaaaaaafgafbaaaaaaaaaaaegiocaaaaaaaaaaaabaaaaaa
dcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaaaaaaaaaagaabaaaaaaaaaaa
egaobaaaabaaaaaadcaaaaakpcaabaaaabaaaaaaegiocaaaaaaaaaaaacaaaaaa
kgakbaaaaaaaaaaaegaobaaaabaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
aaaaaaaaadaaaaaapgapbaaaaaaaaaaaegaobaaaabaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { }
"!!GLES


#ifdef VERTEX

uniform highp mat4 glstate_matrix_mvp;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = (normalize(_glesNormal) * 0.25);
  gl_Position = (glstate_matrix_mvp * (_glesVertex - tmpvar_1));
}



#endif
#ifdef FRAGMENT

void main ()
{
  gl_FragData[0] = vec4(1.0, 1.0, 1.0, 1.0);
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { }
"!!GLES


#ifdef VERTEX

uniform highp mat4 glstate_matrix_mvp;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = (normalize(_glesNormal) * 0.25);
  gl_Position = (glstate_matrix_mvp * (_glesVertex - tmpvar_1));
}



#endif
#ifdef FRAGMENT

void main ()
{
  gl_FragData[0] = vec4(1.0, 1.0, 1.0, 1.0);
}



#endif"
}

SubProgram "gles3 " {
Keywords { }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct v2f {
    highp vec4 vertex;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 320
#line 320
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * (v.vertex - vec4( (v.normal * 0.25), 0.0)));
    #line 324
    return o;
}
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct v2f {
    highp vec4 vertex;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 320
#line 326
mediump vec4 frag( in v2f i ) {
    #line 328
    return vec4( 1.0, 1.0, 1.0, 1.0);
}
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 1
//   d3d9 - ALU: 1 to 1
//   d3d11 - ALU: 0 to 0, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { }
"ps_3_0
; 1 ALU
def c0, 1.00000000, 0, 0, 0
mov_pp oC0, c0.x
"
}

SubProgram "d3d11 " {
Keywords { }
// 2 instructions, 0 temp regs, 0 temp arrays:
// ALU 0 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"ps_4_0
eefiecedafnbhibgkpfdojhnhpcddbhlkckcmfkcabaaaaaaneaaaaaaadaaaaaa
cmaaaaaagaaaaaaajeaaaaaaejfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfaepfdejfeejepeoaa
epfdeheocmaaaaaaabaaaaaaaiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaa
aaaaaaaaapaaaaaafdfgfpfegbhcghgfheaaklklfdeieefcdiaaaaaaeaaaaaaa
aoaaaaaagfaaaaadpccabaaaaaaaaaaadgaaaaaipccabaaaaaaaaaaaaceaaaaa
aaaaiadpaaaaiadpaaaaiadpaaaaiadpdoaaaaab"
}

SubProgram "gles " {
Keywords { }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { }
"!!GLES3"
}

}

#LINE 40

		}
		
		//Render the actual fireball
		Pass {
			Blend SrcAlpha OneMinusSrcAlpha
			Program "vp" {
// Vertex combos: 30
//   d3d9 - ALU: 12 to 12
//   d3d11 - ALU: 9 to 9, TEX: 0 to 0, FLOW: 1 to 1
SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_ON" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 tmpvar_16;
    tmpvar_16 = (tmpvar_10 * 2.0);
    vec3 p_17;
    p_17 = (tmpvar_16 + tmpvar_11.z);
    vec4 tmpvar_18;
    tmpvar_18.zw = vec2(0.0, 0.0);
    tmpvar_18.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    vec4 coord_19;
    coord_19 = (tmpvar_18 / 64.0);
    vec2 tmpvar_20;
    tmpvar_20 = texture2DLod (_MainTex, coord_19.xy, coord_19.w).yx;
    vec3 tmpvar_21;
    tmpvar_21 = (tmpvar_16 * 2.0);
    vec3 p_22;
    p_22 = (tmpvar_21 + tmpvar_11.z);
    vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.xy = (p_22.xz + (vec2(37.0, 13.0) * floor(p_22.y)));
    vec4 coord_24;
    coord_24 = (tmpvar_23 / 64.0);
    vec2 tmpvar_25;
    tmpvar_25 = texture2DLod (_MainTex, coord_24.xy, coord_24.w).yx;
    vec3 p_26;
    p_26 = ((tmpvar_21 * 2.0) + tmpvar_11.w);
    vec4 tmpvar_27;
    tmpvar_27.zw = vec2(0.0, 0.0);
    tmpvar_27.xy = (p_26.xz + (vec2(37.0, 13.0) * floor(p_26.y)));
    vec4 coord_28;
    coord_28 = (tmpvar_27 / 64.0);
    vec2 tmpvar_29;
    tmpvar_29 = texture2DLod (_MainTex, coord_28.xy, coord_28.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (((mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_20.x, tmpvar_20.y, fract(p_17.y)) / 2.0)) + (mix (tmpvar_25.x, tmpvar_25.y, fract(p_22.y)) / 4.0)) + (mix (tmpvar_29.x, tmpvar_29.y, fract(p_26.y)) / 8.0)));
    if ((tmpvar_8 < 0.02)) {
      vec4 tmpvar_30;
      tmpvar_30.w = 0.0;
      tmpvar_30.xyz = p_3;
      tmpvar_5 = tmpvar_30;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec4 sphere_31;
  sphere_31 = xlv_TEXCOORD2;
  vec3 p_32;
  p_32 = tmpvar_5.xyz;
  vec3 d_33;
  int i_34;
  float fac_35;
  float dens_36;
  float heat_37;
  heat_37 = 0.0;
  dens_36 = 0.0;
  fac_35 = 0.5;
  d_33 = (normalize(xlv_TEXCOORD1) * 0.1);
  i_34 = 0;
  for (int i_34 = 0; i_34 < 10; ) {
    float tmpvar_38;
    vec3 p_39;
    p_39 = (p_32 - sphere_31.xyz);
    vec3 tmpvar_40;
    tmpvar_40 = (p_32 * _Frequency);
    vec4 tmpvar_41;
    tmpvar_41 = (_Time * _ScrollSpeed);
    vec3 p_42;
    p_42 = (tmpvar_40 + tmpvar_41.y);
    vec4 tmpvar_43;
    tmpvar_43.zw = vec2(0.0, 0.0);
    tmpvar_43.xy = (p_42.xz + (vec2(37.0, 13.0) * floor(p_42.y)));
    vec4 coord_44;
    coord_44 = (tmpvar_43 / 64.0);
    vec2 tmpvar_45;
    tmpvar_45 = texture2DLod (_MainTex, coord_44.xy, coord_44.w).yx;
    vec3 tmpvar_46;
    tmpvar_46 = (tmpvar_40 * 2.0);
    vec3 p_47;
    p_47 = (tmpvar_46 + tmpvar_41.z);
    vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.xy = (p_47.xz + (vec2(37.0, 13.0) * floor(p_47.y)));
    vec4 coord_49;
    coord_49 = (tmpvar_48 / 64.0);
    vec2 tmpvar_50;
    tmpvar_50 = texture2DLod (_MainTex, coord_49.xy, coord_49.w).yx;
    vec3 tmpvar_51;
    tmpvar_51 = (tmpvar_46 * 2.0);
    vec3 p_52;
    p_52 = (tmpvar_51 + tmpvar_41.z);
    vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.xy = (p_52.xz + (vec2(37.0, 13.0) * floor(p_52.y)));
    vec4 coord_54;
    coord_54 = (tmpvar_53 / 64.0);
    vec2 tmpvar_55;
    tmpvar_55 = texture2DLod (_MainTex, coord_54.xy, coord_54.w).yx;
    vec3 p_56;
    p_56 = ((tmpvar_51 * 2.0) + tmpvar_41.w);
    vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.xy = (p_56.xz + (vec2(37.0, 13.0) * floor(p_56.y)));
    vec4 coord_58;
    coord_58 = (tmpvar_57 / 64.0);
    vec2 tmpvar_59;
    tmpvar_59 = texture2DLod (_MainTex, coord_58.xy, coord_58.w).yx;
    tmpvar_38 = ((sqrt(dot (p_39, p_39)) - _Radius) - (((mix (tmpvar_45.x, tmpvar_45.y, fract(p_42.y)) + (mix (tmpvar_50.x, tmpvar_50.y, fract(p_47.y)) / 2.0)) + (mix (tmpvar_55.x, tmpvar_55.y, fract(p_52.y)) / 4.0)) + (mix (tmpvar_59.x, tmpvar_59.y, fract(p_56.y)) / 8.0)));
    if ((tmpvar_38 <= 0.02)) {
      vec3 p_60;
      p_60 = (p_32 - sphere_31.xyz);
      heat_37 = (heat_37 + pow (((((_Radius - sqrt(dot (p_60, p_60))) + 2.5) * fac_35) * _Heat), 3.0));
      fac_35 = (fac_35 * 0.25);
      dens_36 = (dens_36 + 0.2);
      p_32 = (p_32 - d_33);
    } else {
      p_32 = (p_32 - (d_33 * 3.0));
    };
    i_34 = (i_34 + 1);
  };
  vec2 tmpvar_61;
  tmpvar_61.x = heat_37;
  tmpvar_61.y = dens_36;
  vec4 tmpvar_62;
  tmpvar_62.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_62.x = tmpvar_61.x;
  col_1.xyz = texture2DLod (_RampTex, tmpvar_62.xy, 0.0).xyz;
  col_1.w = clamp ((clamp (dens_36, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_ON" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 p_29;
    p_29 = ((tmpvar_23 * 2.0) + tmpvar_11.w);
    highp vec2 rg_30;
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.xy = (p_29.xz + (vec2(37.0, 13.0) * floor(p_29.y)));
    highp vec4 coord_32;
    coord_32 = (tmpvar_31 / 64.0);
    lowp vec2 tmpvar_33;
    tmpvar_33 = texture2DLodEXT (_MainTex, coord_32.xy, coord_32.w).yx;
    rg_30 = tmpvar_33;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_30.x, rg_30.y, fract(p_29.y)) / 8.0)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_34;
      tmpvar_34.w = 0.0;
      tmpvar_34.xyz = p_3;
      tmpvar_5 = tmpvar_34;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_35;
  sphere_35 = xlv_TEXCOORD2;
  highp vec3 p_36;
  p_36 = tmpvar_5.xyz;
  highp vec3 d_37;
  int i_38;
  highp float fac_39;
  highp float dens_40;
  highp float heat_41;
  heat_41 = 0.0;
  dens_40 = 0.0;
  fac_39 = 0.5;
  d_37 = (normalize(xlv_TEXCOORD1) * 0.1);
  i_38 = 0;
  for (int i_38 = 0; i_38 < 10; ) {
    highp float tmpvar_42;
    highp vec3 p_43;
    p_43 = (p_36 - sphere_35.xyz);
    highp vec3 tmpvar_44;
    tmpvar_44 = (p_36 * _Frequency);
    highp vec4 tmpvar_45;
    tmpvar_45 = (_Time * _ScrollSpeed);
    highp vec3 p_46;
    p_46 = (tmpvar_44 + tmpvar_45.y);
    highp vec2 rg_47;
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.xy = (p_46.xz + (vec2(37.0, 13.0) * floor(p_46.y)));
    highp vec4 coord_49;
    coord_49 = (tmpvar_48 / 64.0);
    lowp vec2 tmpvar_50;
    tmpvar_50 = texture2DLodEXT (_MainTex, coord_49.xy, coord_49.w).yx;
    rg_47 = tmpvar_50;
    highp vec3 tmpvar_51;
    tmpvar_51 = (tmpvar_44 * 2.0);
    highp vec3 p_52;
    p_52 = (tmpvar_51 + tmpvar_45.z);
    highp vec2 rg_53;
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.xy = (p_52.xz + (vec2(37.0, 13.0) * floor(p_52.y)));
    highp vec4 coord_55;
    coord_55 = (tmpvar_54 / 64.0);
    lowp vec2 tmpvar_56;
    tmpvar_56 = texture2DLodEXT (_MainTex, coord_55.xy, coord_55.w).yx;
    rg_53 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_51 * 2.0);
    highp vec3 p_58;
    p_58 = (tmpvar_57 + tmpvar_45.z);
    highp vec2 rg_59;
    highp vec4 tmpvar_60;
    tmpvar_60.zw = vec2(0.0, 0.0);
    tmpvar_60.xy = (p_58.xz + (vec2(37.0, 13.0) * floor(p_58.y)));
    highp vec4 coord_61;
    coord_61 = (tmpvar_60 / 64.0);
    lowp vec2 tmpvar_62;
    tmpvar_62 = texture2DLodEXT (_MainTex, coord_61.xy, coord_61.w).yx;
    rg_59 = tmpvar_62;
    highp vec3 p_63;
    p_63 = ((tmpvar_57 * 2.0) + tmpvar_45.w);
    highp vec2 rg_64;
    highp vec4 tmpvar_65;
    tmpvar_65.zw = vec2(0.0, 0.0);
    tmpvar_65.xy = (p_63.xz + (vec2(37.0, 13.0) * floor(p_63.y)));
    highp vec4 coord_66;
    coord_66 = (tmpvar_65 / 64.0);
    lowp vec2 tmpvar_67;
    tmpvar_67 = texture2DLodEXT (_MainTex, coord_66.xy, coord_66.w).yx;
    rg_64 = tmpvar_67;
    tmpvar_42 = ((sqrt(dot (p_43, p_43)) - _Radius) - (((mix (rg_47.x, rg_47.y, fract(p_46.y)) + (mix (rg_53.x, rg_53.y, fract(p_52.y)) / 2.0)) + (mix (rg_59.x, rg_59.y, fract(p_58.y)) / 4.0)) + (mix (rg_64.x, rg_64.y, fract(p_63.y)) / 8.0)));
    if ((tmpvar_42 <= 0.02)) {
      highp vec3 p_68;
      p_68 = (p_36 - sphere_35.xyz);
      heat_41 = (heat_41 + pow (((((_Radius - sqrt(dot (p_68, p_68))) + 2.5) * fac_39) * _Heat), 3.0));
      fac_39 = (fac_39 * 0.25);
      dens_40 = (dens_40 + 0.2);
      p_36 = (p_36 - d_37);
    } else {
      p_36 = (p_36 - (d_37 * 3.0));
    };
    i_38 = (i_38 + 1);
  };
  highp vec2 tmpvar_69;
  tmpvar_69.x = heat_41;
  tmpvar_69.y = dens_40;
  highp vec4 tmpvar_70;
  tmpvar_70.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_70.x = tmpvar_69.x;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2DLodEXT (_RampTex, tmpvar_70.xy, 0.0);
  col_1.xyz = tmpvar_71.xyz;
  highp float tmpvar_72;
  tmpvar_72 = clamp ((clamp (dens_40, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_72;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 p_29;
    p_29 = ((tmpvar_23 * 2.0) + tmpvar_11.w);
    highp vec2 rg_30;
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.xy = (p_29.xz + (vec2(37.0, 13.0) * floor(p_29.y)));
    highp vec4 coord_32;
    coord_32 = (tmpvar_31 / 64.0);
    lowp vec2 tmpvar_33;
    tmpvar_33 = texture2DLodEXT (_MainTex, coord_32.xy, coord_32.w).yx;
    rg_30 = tmpvar_33;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_30.x, rg_30.y, fract(p_29.y)) / 8.0)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_34;
      tmpvar_34.w = 0.0;
      tmpvar_34.xyz = p_3;
      tmpvar_5 = tmpvar_34;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_35;
  sphere_35 = xlv_TEXCOORD2;
  highp vec3 p_36;
  p_36 = tmpvar_5.xyz;
  highp vec3 d_37;
  int i_38;
  highp float fac_39;
  highp float dens_40;
  highp float heat_41;
  heat_41 = 0.0;
  dens_40 = 0.0;
  fac_39 = 0.5;
  d_37 = (normalize(xlv_TEXCOORD1) * 0.1);
  i_38 = 0;
  for (int i_38 = 0; i_38 < 10; ) {
    highp float tmpvar_42;
    highp vec3 p_43;
    p_43 = (p_36 - sphere_35.xyz);
    highp vec3 tmpvar_44;
    tmpvar_44 = (p_36 * _Frequency);
    highp vec4 tmpvar_45;
    tmpvar_45 = (_Time * _ScrollSpeed);
    highp vec3 p_46;
    p_46 = (tmpvar_44 + tmpvar_45.y);
    highp vec2 rg_47;
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.xy = (p_46.xz + (vec2(37.0, 13.0) * floor(p_46.y)));
    highp vec4 coord_49;
    coord_49 = (tmpvar_48 / 64.0);
    lowp vec2 tmpvar_50;
    tmpvar_50 = texture2DLodEXT (_MainTex, coord_49.xy, coord_49.w).yx;
    rg_47 = tmpvar_50;
    highp vec3 tmpvar_51;
    tmpvar_51 = (tmpvar_44 * 2.0);
    highp vec3 p_52;
    p_52 = (tmpvar_51 + tmpvar_45.z);
    highp vec2 rg_53;
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.xy = (p_52.xz + (vec2(37.0, 13.0) * floor(p_52.y)));
    highp vec4 coord_55;
    coord_55 = (tmpvar_54 / 64.0);
    lowp vec2 tmpvar_56;
    tmpvar_56 = texture2DLodEXT (_MainTex, coord_55.xy, coord_55.w).yx;
    rg_53 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_51 * 2.0);
    highp vec3 p_58;
    p_58 = (tmpvar_57 + tmpvar_45.z);
    highp vec2 rg_59;
    highp vec4 tmpvar_60;
    tmpvar_60.zw = vec2(0.0, 0.0);
    tmpvar_60.xy = (p_58.xz + (vec2(37.0, 13.0) * floor(p_58.y)));
    highp vec4 coord_61;
    coord_61 = (tmpvar_60 / 64.0);
    lowp vec2 tmpvar_62;
    tmpvar_62 = texture2DLodEXT (_MainTex, coord_61.xy, coord_61.w).yx;
    rg_59 = tmpvar_62;
    highp vec3 p_63;
    p_63 = ((tmpvar_57 * 2.0) + tmpvar_45.w);
    highp vec2 rg_64;
    highp vec4 tmpvar_65;
    tmpvar_65.zw = vec2(0.0, 0.0);
    tmpvar_65.xy = (p_63.xz + (vec2(37.0, 13.0) * floor(p_63.y)));
    highp vec4 coord_66;
    coord_66 = (tmpvar_65 / 64.0);
    lowp vec2 tmpvar_67;
    tmpvar_67 = texture2DLodEXT (_MainTex, coord_66.xy, coord_66.w).yx;
    rg_64 = tmpvar_67;
    tmpvar_42 = ((sqrt(dot (p_43, p_43)) - _Radius) - (((mix (rg_47.x, rg_47.y, fract(p_46.y)) + (mix (rg_53.x, rg_53.y, fract(p_52.y)) / 2.0)) + (mix (rg_59.x, rg_59.y, fract(p_58.y)) / 4.0)) + (mix (rg_64.x, rg_64.y, fract(p_63.y)) / 8.0)));
    if ((tmpvar_42 <= 0.02)) {
      highp vec3 p_68;
      p_68 = (p_36 - sphere_35.xyz);
      heat_41 = (heat_41 + pow (((((_Radius - sqrt(dot (p_68, p_68))) + 2.5) * fac_39) * _Heat), 3.0));
      fac_39 = (fac_39 * 0.25);
      dens_40 = (dens_40 + 0.2);
      p_36 = (p_36 - d_37);
    } else {
      p_36 = (p_36 - (d_37 * 3.0));
    };
    i_38 = (i_38 + 1);
  };
  highp vec2 tmpvar_69;
  tmpvar_69.x = heat_41;
  tmpvar_69.y = dens_40;
  highp vec4 tmpvar_70;
  tmpvar_70.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_70.x = tmpvar_69.x;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2DLodEXT (_RampTex, tmpvar_70.xy, 0.0);
  col_1.xyz = tmpvar_71.xyz;
  highp float tmpvar_72;
  tmpvar_72 = clamp ((clamp (dens_40, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_72;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 361
#line 365
#line 403
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 361
#line 365
#line 403
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    v += (noise( (p + offset.z)) / 4.0);
    #line 356
    p *= 2.0;
    v += (noise( (p + offset.w)) / 8.0);
    p *= 2.0;
    return v;
}
#line 361
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 378
highp vec2 heat( in highp vec4 sphere, in highp vec3 p, in highp vec3 d ) {
    #line 380
    highp float heat = 0.0;
    highp float dens = 0.0;
    highp float fac = 0.5;
    d *= 0.1;
    #line 384
    highp int i = 0;
    for ( ; (i < 10); (++i)) {
        #line 388
        highp float dis = distf( sphere, p);
        if ((dis <= 0.02)){
            heat += pow( ((((_Radius - distance( p, sphere.xyz)) + 2.5) * fac) * _Heat), 3.0);
            #line 392
            fac *= 0.25;
            dens += 0.2;
            p -= d;
        }
        else{
            #line 398
            p -= (d * 3.0);
        }
    }
    return vec2( heat, dens);
}
#line 365
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    highp float dist;
    highp int i = 0;
    for ( ; (i < 25); (++i)) {
        #line 372
        dist = distf( sphere, p);
        if ((dist < 0.02)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 376
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 403
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp vec2 hd = heat( i.sphere, m.xyz, normalize(i.viewVec));
    #line 407
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( hd.x, 0.0, 0.0, 0.0));
    col.w = xll_saturate_f((xll_saturate_f(hd.y) * _Alpha));
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 tmpvar_16;
    tmpvar_16 = (tmpvar_10 * 2.0);
    vec3 p_17;
    p_17 = (tmpvar_16 + tmpvar_11.z);
    vec4 tmpvar_18;
    tmpvar_18.zw = vec2(0.0, 0.0);
    tmpvar_18.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    vec4 coord_19;
    coord_19 = (tmpvar_18 / 64.0);
    vec2 tmpvar_20;
    tmpvar_20 = texture2DLod (_MainTex, coord_19.xy, coord_19.w).yx;
    vec3 tmpvar_21;
    tmpvar_21 = (tmpvar_16 * 2.0);
    vec3 p_22;
    p_22 = (tmpvar_21 + tmpvar_11.z);
    vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.xy = (p_22.xz + (vec2(37.0, 13.0) * floor(p_22.y)));
    vec4 coord_24;
    coord_24 = (tmpvar_23 / 64.0);
    vec2 tmpvar_25;
    tmpvar_25 = texture2DLod (_MainTex, coord_24.xy, coord_24.w).yx;
    vec3 p_26;
    p_26 = ((tmpvar_21 * 2.0) + tmpvar_11.w);
    vec4 tmpvar_27;
    tmpvar_27.zw = vec2(0.0, 0.0);
    tmpvar_27.xy = (p_26.xz + (vec2(37.0, 13.0) * floor(p_26.y)));
    vec4 coord_28;
    coord_28 = (tmpvar_27 / 64.0);
    vec2 tmpvar_29;
    tmpvar_29 = texture2DLod (_MainTex, coord_28.xy, coord_28.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (((mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_20.x, tmpvar_20.y, fract(p_17.y)) / 2.0)) + (mix (tmpvar_25.x, tmpvar_25.y, fract(p_22.y)) / 4.0)) + (mix (tmpvar_29.x, tmpvar_29.y, fract(p_26.y)) / 8.0)));
    if ((tmpvar_8 < 0.02)) {
      vec4 tmpvar_30;
      tmpvar_30.w = 0.0;
      tmpvar_30.xyz = p_3;
      tmpvar_5 = tmpvar_30;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec3 p_31;
  p_31 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  float edge0_32;
  edge0_32 = (_Radius + 0.5);
  float t_33;
  t_33 = max (min (((sqrt(dot (p_31, p_31)) - edge0_32) / ((_Radius + 1.5) - edge0_32)), 1.0), 0.0);
  vec4 tmpvar_34;
  tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_34.x = (1.0 - ((t_33 * (t_33 * (3.0 - (2.0 * t_33)))) / _Heat));
  col_1.xyz = texture2DLod (_RampTex, tmpvar_34.xy, 0.0).xyz;
  col_1.w = clamp (_Alpha, 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_OFF" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 p_29;
    p_29 = ((tmpvar_23 * 2.0) + tmpvar_11.w);
    highp vec2 rg_30;
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.xy = (p_29.xz + (vec2(37.0, 13.0) * floor(p_29.y)));
    highp vec4 coord_32;
    coord_32 = (tmpvar_31 / 64.0);
    lowp vec2 tmpvar_33;
    tmpvar_33 = texture2DLodEXT (_MainTex, coord_32.xy, coord_32.w).yx;
    rg_30 = tmpvar_33;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_30.x, rg_30.y, fract(p_29.y)) / 8.0)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_34;
      tmpvar_34.w = 0.0;
      tmpvar_34.xyz = p_3;
      tmpvar_5 = tmpvar_34;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_35;
  p_35 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_36;
  edge0_36 = (_Radius + 0.5);
  highp float t_37;
  t_37 = max (min (((sqrt(dot (p_35, p_35)) - edge0_36) / ((_Radius + 1.5) - edge0_36)), 1.0), 0.0);
  highp vec4 tmpvar_38;
  tmpvar_38.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_38.x = (1.0 - ((t_37 * (t_37 * (3.0 - (2.0 * t_37)))) / _Heat));
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DLodEXT (_RampTex, tmpvar_38.xy, 0.0);
  col_1.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_40;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 p_29;
    p_29 = ((tmpvar_23 * 2.0) + tmpvar_11.w);
    highp vec2 rg_30;
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.xy = (p_29.xz + (vec2(37.0, 13.0) * floor(p_29.y)));
    highp vec4 coord_32;
    coord_32 = (tmpvar_31 / 64.0);
    lowp vec2 tmpvar_33;
    tmpvar_33 = texture2DLodEXT (_MainTex, coord_32.xy, coord_32.w).yx;
    rg_30 = tmpvar_33;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_30.x, rg_30.y, fract(p_29.y)) / 8.0)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_34;
      tmpvar_34.w = 0.0;
      tmpvar_34.xyz = p_3;
      tmpvar_5 = tmpvar_34;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_35;
  p_35 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_36;
  edge0_36 = (_Radius + 0.5);
  highp float t_37;
  t_37 = max (min (((sqrt(dot (p_35, p_35)) - edge0_36) / ((_Radius + 1.5) - edge0_36)), 1.0), 0.0);
  highp vec4 tmpvar_38;
  tmpvar_38.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_38.x = (1.0 - ((t_37 * (t_37 * (3.0 - (2.0 * t_37)))) / _Heat));
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DLodEXT (_RampTex, tmpvar_38.xy, 0.0);
  col_1.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_40;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 361
#line 365
#line 403
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 361
#line 365
#line 403
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    v += (noise( (p + offset.z)) / 4.0);
    #line 356
    p *= 2.0;
    v += (noise( (p + offset.w)) / 8.0);
    p *= 2.0;
    return v;
}
#line 361
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 365
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    highp float dist;
    highp int i = 0;
    for ( ; (i < 25); (++i)) {
        #line 372
        dist = distf( sphere, p);
        if ((dist < 0.02)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 376
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 403
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp float heatfac = (smoothstep( (_Radius + 0.5), (_Radius + 1.5), distance( m.xyz, i.sphere.xyz)) / _Heat);
    #line 407
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( (1.0 - heatfac), 0.0, 0.0, 0.0));
    col.w = xll_saturate_f(_Alpha);
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_ON" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 p_10;
    p_10 = ((p_3 * _Frequency) + (_Time * _ScrollSpeed).y);
    vec4 tmpvar_11;
    tmpvar_11.zw = vec2(0.0, 0.0);
    tmpvar_11.xy = (p_10.xz + (vec2(37.0, 13.0) * floor(p_10.y)));
    vec4 coord_12;
    coord_12 = (tmpvar_11 / 64.0);
    vec2 tmpvar_13;
    tmpvar_13 = texture2DLod (_MainTex, coord_12.xy, coord_12.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - mix (tmpvar_13.x, tmpvar_13.y, fract(p_10.y)));
    if ((tmpvar_8 < 0.02)) {
      vec4 tmpvar_14;
      tmpvar_14.w = 0.0;
      tmpvar_14.xyz = p_3;
      tmpvar_5 = tmpvar_14;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec4 sphere_15;
  sphere_15 = xlv_TEXCOORD2;
  vec3 p_16;
  p_16 = tmpvar_5.xyz;
  vec3 d_17;
  int i_18;
  float fac_19;
  float dens_20;
  float heat_21;
  heat_21 = 0.0;
  dens_20 = 0.0;
  fac_19 = 0.5;
  d_17 = (normalize(xlv_TEXCOORD1) * 0.1);
  i_18 = 0;
  for (int i_18 = 0; i_18 < 10; ) {
    float tmpvar_22;
    vec3 p_23;
    p_23 = (p_16 - sphere_15.xyz);
    vec3 p_24;
    p_24 = ((p_16 * _Frequency) + (_Time * _ScrollSpeed).y);
    vec4 tmpvar_25;
    tmpvar_25.zw = vec2(0.0, 0.0);
    tmpvar_25.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    vec4 coord_26;
    coord_26 = (tmpvar_25 / 64.0);
    vec2 tmpvar_27;
    tmpvar_27 = texture2DLod (_MainTex, coord_26.xy, coord_26.w).yx;
    tmpvar_22 = ((sqrt(dot (p_23, p_23)) - _Radius) - mix (tmpvar_27.x, tmpvar_27.y, fract(p_24.y)));
    if ((tmpvar_22 <= 0.02)) {
      vec3 p_28;
      p_28 = (p_16 - sphere_15.xyz);
      heat_21 = (heat_21 + pow (((((_Radius - sqrt(dot (p_28, p_28))) + 2.5) * fac_19) * _Heat), 3.0));
      fac_19 = (fac_19 * 0.25);
      dens_20 = (dens_20 + 0.2);
      p_16 = (p_16 - d_17);
    } else {
      p_16 = (p_16 - (d_17 * 3.0));
    };
    i_18 = (i_18 + 1);
  };
  vec2 tmpvar_29;
  tmpvar_29.x = heat_21;
  tmpvar_29.y = dens_20;
  vec4 tmpvar_30;
  tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_30.x = tmpvar_29.x;
  col_1.xyz = texture2DLod (_RampTex, tmpvar_30.xy, 0.0).xyz;
  col_1.w = clamp ((clamp (dens_20, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_ON" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 p_10;
    p_10 = ((p_3 * _Frequency) + (_Time * _ScrollSpeed).y);
    highp vec2 rg_11;
    highp vec4 tmpvar_12;
    tmpvar_12.zw = vec2(0.0, 0.0);
    tmpvar_12.xy = (p_10.xz + (vec2(37.0, 13.0) * floor(p_10.y)));
    highp vec4 coord_13;
    coord_13 = (tmpvar_12 / 64.0);
    lowp vec2 tmpvar_14;
    tmpvar_14 = texture2DLodEXT (_MainTex, coord_13.xy, coord_13.w).yx;
    rg_11 = tmpvar_14;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - mix (rg_11.x, rg_11.y, fract(p_10.y)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_15;
      tmpvar_15.w = 0.0;
      tmpvar_15.xyz = p_3;
      tmpvar_5 = tmpvar_15;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_16;
  sphere_16 = xlv_TEXCOORD2;
  highp vec3 p_17;
  p_17 = tmpvar_5.xyz;
  highp vec3 d_18;
  int i_19;
  highp float fac_20;
  highp float dens_21;
  highp float heat_22;
  heat_22 = 0.0;
  dens_21 = 0.0;
  fac_20 = 0.5;
  d_18 = (normalize(xlv_TEXCOORD1) * 0.1);
  i_19 = 0;
  for (int i_19 = 0; i_19 < 10; ) {
    highp float tmpvar_23;
    highp vec3 p_24;
    p_24 = (p_17 - sphere_16.xyz);
    highp vec3 p_25;
    p_25 = ((p_17 * _Frequency) + (_Time * _ScrollSpeed).y);
    highp vec2 rg_26;
    highp vec4 tmpvar_27;
    tmpvar_27.zw = vec2(0.0, 0.0);
    tmpvar_27.xy = (p_25.xz + (vec2(37.0, 13.0) * floor(p_25.y)));
    highp vec4 coord_28;
    coord_28 = (tmpvar_27 / 64.0);
    lowp vec2 tmpvar_29;
    tmpvar_29 = texture2DLodEXT (_MainTex, coord_28.xy, coord_28.w).yx;
    rg_26 = tmpvar_29;
    tmpvar_23 = ((sqrt(dot (p_24, p_24)) - _Radius) - mix (rg_26.x, rg_26.y, fract(p_25.y)));
    if ((tmpvar_23 <= 0.02)) {
      highp vec3 p_30;
      p_30 = (p_17 - sphere_16.xyz);
      heat_22 = (heat_22 + pow (((((_Radius - sqrt(dot (p_30, p_30))) + 2.5) * fac_20) * _Heat), 3.0));
      fac_20 = (fac_20 * 0.25);
      dens_21 = (dens_21 + 0.2);
      p_17 = (p_17 - d_18);
    } else {
      p_17 = (p_17 - (d_18 * 3.0));
    };
    i_19 = (i_19 + 1);
  };
  highp vec2 tmpvar_31;
  tmpvar_31.x = heat_22;
  tmpvar_31.y = dens_21;
  highp vec4 tmpvar_32;
  tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_32.x = tmpvar_31.x;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DLodEXT (_RampTex, tmpvar_32.xy, 0.0);
  col_1.xyz = tmpvar_33.xyz;
  highp float tmpvar_34;
  tmpvar_34 = clamp ((clamp (dens_21, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_34;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 p_10;
    p_10 = ((p_3 * _Frequency) + (_Time * _ScrollSpeed).y);
    highp vec2 rg_11;
    highp vec4 tmpvar_12;
    tmpvar_12.zw = vec2(0.0, 0.0);
    tmpvar_12.xy = (p_10.xz + (vec2(37.0, 13.0) * floor(p_10.y)));
    highp vec4 coord_13;
    coord_13 = (tmpvar_12 / 64.0);
    lowp vec2 tmpvar_14;
    tmpvar_14 = texture2DLodEXT (_MainTex, coord_13.xy, coord_13.w).yx;
    rg_11 = tmpvar_14;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - mix (rg_11.x, rg_11.y, fract(p_10.y)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_15;
      tmpvar_15.w = 0.0;
      tmpvar_15.xyz = p_3;
      tmpvar_5 = tmpvar_15;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_16;
  sphere_16 = xlv_TEXCOORD2;
  highp vec3 p_17;
  p_17 = tmpvar_5.xyz;
  highp vec3 d_18;
  int i_19;
  highp float fac_20;
  highp float dens_21;
  highp float heat_22;
  heat_22 = 0.0;
  dens_21 = 0.0;
  fac_20 = 0.5;
  d_18 = (normalize(xlv_TEXCOORD1) * 0.1);
  i_19 = 0;
  for (int i_19 = 0; i_19 < 10; ) {
    highp float tmpvar_23;
    highp vec3 p_24;
    p_24 = (p_17 - sphere_16.xyz);
    highp vec3 p_25;
    p_25 = ((p_17 * _Frequency) + (_Time * _ScrollSpeed).y);
    highp vec2 rg_26;
    highp vec4 tmpvar_27;
    tmpvar_27.zw = vec2(0.0, 0.0);
    tmpvar_27.xy = (p_25.xz + (vec2(37.0, 13.0) * floor(p_25.y)));
    highp vec4 coord_28;
    coord_28 = (tmpvar_27 / 64.0);
    lowp vec2 tmpvar_29;
    tmpvar_29 = texture2DLodEXT (_MainTex, coord_28.xy, coord_28.w).yx;
    rg_26 = tmpvar_29;
    tmpvar_23 = ((sqrt(dot (p_24, p_24)) - _Radius) - mix (rg_26.x, rg_26.y, fract(p_25.y)));
    if ((tmpvar_23 <= 0.02)) {
      highp vec3 p_30;
      p_30 = (p_17 - sphere_16.xyz);
      heat_22 = (heat_22 + pow (((((_Radius - sqrt(dot (p_30, p_30))) + 2.5) * fac_20) * _Heat), 3.0));
      fac_20 = (fac_20 * 0.25);
      dens_21 = (dens_21 + 0.2);
      p_17 = (p_17 - d_18);
    } else {
      p_17 = (p_17 - (d_18 * 3.0));
    };
    i_19 = (i_19 + 1);
  };
  highp vec2 tmpvar_31;
  tmpvar_31.x = heat_22;
  tmpvar_31.y = dens_21;
  highp vec4 tmpvar_32;
  tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_32.x = tmpvar_31.x;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DLodEXT (_RampTex, tmpvar_32.xy, 0.0);
  col_1.xyz = tmpvar_33.xyz;
  highp float tmpvar_34;
  tmpvar_34 = clamp ((clamp (dens_21, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_34;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 396
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 396
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    return v;
}
#line 354
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    #line 356
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 371
highp vec2 heat( in highp vec4 sphere, in highp vec3 p, in highp vec3 d ) {
    #line 373
    highp float heat = 0.0;
    highp float dens = 0.0;
    highp float fac = 0.5;
    d *= 0.1;
    #line 377
    highp int i = 0;
    for ( ; (i < 10); (++i)) {
        #line 381
        highp float dis = distf( sphere, p);
        if ((dis <= 0.02)){
            heat += pow( ((((_Radius - distance( p, sphere.xyz)) + 2.5) * fac) * _Heat), 3.0);
            #line 385
            fac *= 0.25;
            dens += 0.2;
            p -= d;
        }
        else{
            #line 391
            p -= (d * 3.0);
        }
    }
    return vec2( heat, dens);
}
#line 358
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    #line 360
    highp float dist;
    highp int i = 0;
    for ( ; (i < 25); (++i)) {
        #line 365
        dist = distf( sphere, p);
        if ((dist < 0.02)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 369
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 396
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp vec2 hd = heat( i.sphere, m.xyz, normalize(i.viewVec));
    #line 400
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( hd.x, 0.0, 0.0, 0.0));
    col.w = xll_saturate_f((xll_saturate_f(hd.y) * _Alpha));
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 p_10;
    p_10 = ((p_3 * _Frequency) + (_Time * _ScrollSpeed).y);
    vec4 tmpvar_11;
    tmpvar_11.zw = vec2(0.0, 0.0);
    tmpvar_11.xy = (p_10.xz + (vec2(37.0, 13.0) * floor(p_10.y)));
    vec4 coord_12;
    coord_12 = (tmpvar_11 / 64.0);
    vec2 tmpvar_13;
    tmpvar_13 = texture2DLod (_MainTex, coord_12.xy, coord_12.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - mix (tmpvar_13.x, tmpvar_13.y, fract(p_10.y)));
    if ((tmpvar_8 < 0.02)) {
      vec4 tmpvar_14;
      tmpvar_14.w = 0.0;
      tmpvar_14.xyz = p_3;
      tmpvar_5 = tmpvar_14;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec3 p_15;
  p_15 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  float edge0_16;
  edge0_16 = (_Radius + 0.5);
  float t_17;
  t_17 = max (min (((sqrt(dot (p_15, p_15)) - edge0_16) / ((_Radius + 1.5) - edge0_16)), 1.0), 0.0);
  vec4 tmpvar_18;
  tmpvar_18.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_18.x = (1.0 - ((t_17 * (t_17 * (3.0 - (2.0 * t_17)))) / _Heat));
  col_1.xyz = texture2DLod (_RampTex, tmpvar_18.xy, 0.0).xyz;
  col_1.w = clamp (_Alpha, 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_OFF" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 p_10;
    p_10 = ((p_3 * _Frequency) + (_Time * _ScrollSpeed).y);
    highp vec2 rg_11;
    highp vec4 tmpvar_12;
    tmpvar_12.zw = vec2(0.0, 0.0);
    tmpvar_12.xy = (p_10.xz + (vec2(37.0, 13.0) * floor(p_10.y)));
    highp vec4 coord_13;
    coord_13 = (tmpvar_12 / 64.0);
    lowp vec2 tmpvar_14;
    tmpvar_14 = texture2DLodEXT (_MainTex, coord_13.xy, coord_13.w).yx;
    rg_11 = tmpvar_14;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - mix (rg_11.x, rg_11.y, fract(p_10.y)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_15;
      tmpvar_15.w = 0.0;
      tmpvar_15.xyz = p_3;
      tmpvar_5 = tmpvar_15;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_16;
  p_16 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_17;
  edge0_17 = (_Radius + 0.5);
  highp float t_18;
  t_18 = max (min (((sqrt(dot (p_16, p_16)) - edge0_17) / ((_Radius + 1.5) - edge0_17)), 1.0), 0.0);
  highp vec4 tmpvar_19;
  tmpvar_19.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_19.x = (1.0 - ((t_18 * (t_18 * (3.0 - (2.0 * t_18)))) / _Heat));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DLodEXT (_RampTex, tmpvar_19.xy, 0.0);
  col_1.xyz = tmpvar_20.xyz;
  highp float tmpvar_21;
  tmpvar_21 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_21;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 p_10;
    p_10 = ((p_3 * _Frequency) + (_Time * _ScrollSpeed).y);
    highp vec2 rg_11;
    highp vec4 tmpvar_12;
    tmpvar_12.zw = vec2(0.0, 0.0);
    tmpvar_12.xy = (p_10.xz + (vec2(37.0, 13.0) * floor(p_10.y)));
    highp vec4 coord_13;
    coord_13 = (tmpvar_12 / 64.0);
    lowp vec2 tmpvar_14;
    tmpvar_14 = texture2DLodEXT (_MainTex, coord_13.xy, coord_13.w).yx;
    rg_11 = tmpvar_14;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - mix (rg_11.x, rg_11.y, fract(p_10.y)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_15;
      tmpvar_15.w = 0.0;
      tmpvar_15.xyz = p_3;
      tmpvar_5 = tmpvar_15;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_16;
  p_16 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_17;
  edge0_17 = (_Radius + 0.5);
  highp float t_18;
  t_18 = max (min (((sqrt(dot (p_16, p_16)) - edge0_17) / ((_Radius + 1.5) - edge0_17)), 1.0), 0.0);
  highp vec4 tmpvar_19;
  tmpvar_19.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_19.x = (1.0 - ((t_18 * (t_18 * (3.0 - (2.0 * t_18)))) / _Heat));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DLodEXT (_RampTex, tmpvar_19.xy, 0.0);
  col_1.xyz = tmpvar_20.xyz;
  highp float tmpvar_21;
  tmpvar_21 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_21;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 396
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 396
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    return v;
}
#line 354
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    #line 356
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 358
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    #line 360
    highp float dist;
    highp int i = 0;
    for ( ; (i < 25); (++i)) {
        #line 365
        dist = distf( sphere, p);
        if ((dist < 0.02)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 369
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 396
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp float heatfac = (smoothstep( (_Radius + 0.5), (_Radius + 1.5), distance( m.xyz, i.sphere.xyz)) / _Heat);
    #line 400
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( (1.0 - heatfac), 0.0, 0.0, 0.0));
    col.w = xll_saturate_f(_Alpha);
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_ON" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 p_16;
    p_16 = ((tmpvar_10 * 2.0) + tmpvar_11.z);
    vec4 tmpvar_17;
    tmpvar_17.zw = vec2(0.0, 0.0);
    tmpvar_17.xy = (p_16.xz + (vec2(37.0, 13.0) * floor(p_16.y)));
    vec4 coord_18;
    coord_18 = (tmpvar_17 / 64.0);
    vec2 tmpvar_19;
    tmpvar_19 = texture2DLod (_MainTex, coord_18.xy, coord_18.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_19.x, tmpvar_19.y, fract(p_16.y)) / 2.0)));
    if ((tmpvar_8 < 0.02)) {
      vec4 tmpvar_20;
      tmpvar_20.w = 0.0;
      tmpvar_20.xyz = p_3;
      tmpvar_5 = tmpvar_20;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec4 sphere_21;
  sphere_21 = xlv_TEXCOORD2;
  vec3 p_22;
  p_22 = tmpvar_5.xyz;
  vec3 d_23;
  int i_24;
  float fac_25;
  float dens_26;
  float heat_27;
  heat_27 = 0.0;
  dens_26 = 0.0;
  fac_25 = 0.5;
  d_23 = (normalize(xlv_TEXCOORD1) * 0.1);
  i_24 = 0;
  for (int i_24 = 0; i_24 < 10; ) {
    float tmpvar_28;
    vec3 p_29;
    p_29 = (p_22 - sphere_21.xyz);
    vec3 tmpvar_30;
    tmpvar_30 = (p_22 * _Frequency);
    vec4 tmpvar_31;
    tmpvar_31 = (_Time * _ScrollSpeed);
    vec3 p_32;
    p_32 = (tmpvar_30 + tmpvar_31.y);
    vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.xy = (p_32.xz + (vec2(37.0, 13.0) * floor(p_32.y)));
    vec4 coord_34;
    coord_34 = (tmpvar_33 / 64.0);
    vec2 tmpvar_35;
    tmpvar_35 = texture2DLod (_MainTex, coord_34.xy, coord_34.w).yx;
    vec3 p_36;
    p_36 = ((tmpvar_30 * 2.0) + tmpvar_31.z);
    vec4 tmpvar_37;
    tmpvar_37.zw = vec2(0.0, 0.0);
    tmpvar_37.xy = (p_36.xz + (vec2(37.0, 13.0) * floor(p_36.y)));
    vec4 coord_38;
    coord_38 = (tmpvar_37 / 64.0);
    vec2 tmpvar_39;
    tmpvar_39 = texture2DLod (_MainTex, coord_38.xy, coord_38.w).yx;
    tmpvar_28 = ((sqrt(dot (p_29, p_29)) - _Radius) - (mix (tmpvar_35.x, tmpvar_35.y, fract(p_32.y)) + (mix (tmpvar_39.x, tmpvar_39.y, fract(p_36.y)) / 2.0)));
    if ((tmpvar_28 <= 0.02)) {
      vec3 p_40;
      p_40 = (p_22 - sphere_21.xyz);
      heat_27 = (heat_27 + pow (((((_Radius - sqrt(dot (p_40, p_40))) + 2.5) * fac_25) * _Heat), 3.0));
      fac_25 = (fac_25 * 0.25);
      dens_26 = (dens_26 + 0.2);
      p_22 = (p_22 - d_23);
    } else {
      p_22 = (p_22 - (d_23 * 3.0));
    };
    i_24 = (i_24 + 1);
  };
  vec2 tmpvar_41;
  tmpvar_41.x = heat_27;
  tmpvar_41.y = dens_26;
  vec4 tmpvar_42;
  tmpvar_42.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_42.x = tmpvar_41.x;
  col_1.xyz = texture2DLod (_RampTex, tmpvar_42.xy, 0.0).xyz;
  col_1.w = clamp ((clamp (dens_26, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_ON" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 p_17;
    p_17 = ((tmpvar_10 * 2.0) + tmpvar_11.z);
    highp vec2 rg_18;
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    highp vec4 coord_20;
    coord_20 = (tmpvar_19 / 64.0);
    lowp vec2 tmpvar_21;
    tmpvar_21 = texture2DLodEXT (_MainTex, coord_20.xy, coord_20.w).yx;
    rg_18 = tmpvar_21;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_18.x, rg_18.y, fract(p_17.y)) / 2.0)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_22;
      tmpvar_22.w = 0.0;
      tmpvar_22.xyz = p_3;
      tmpvar_5 = tmpvar_22;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_23;
  sphere_23 = xlv_TEXCOORD2;
  highp vec3 p_24;
  p_24 = tmpvar_5.xyz;
  highp vec3 d_25;
  int i_26;
  highp float fac_27;
  highp float dens_28;
  highp float heat_29;
  heat_29 = 0.0;
  dens_28 = 0.0;
  fac_27 = 0.5;
  d_25 = (normalize(xlv_TEXCOORD1) * 0.1);
  i_26 = 0;
  for (int i_26 = 0; i_26 < 10; ) {
    highp float tmpvar_30;
    highp vec3 p_31;
    p_31 = (p_24 - sphere_23.xyz);
    highp vec3 tmpvar_32;
    tmpvar_32 = (p_24 * _Frequency);
    highp vec4 tmpvar_33;
    tmpvar_33 = (_Time * _ScrollSpeed);
    highp vec3 p_34;
    p_34 = (tmpvar_32 + tmpvar_33.y);
    highp vec2 rg_35;
    highp vec4 tmpvar_36;
    tmpvar_36.zw = vec2(0.0, 0.0);
    tmpvar_36.xy = (p_34.xz + (vec2(37.0, 13.0) * floor(p_34.y)));
    highp vec4 coord_37;
    coord_37 = (tmpvar_36 / 64.0);
    lowp vec2 tmpvar_38;
    tmpvar_38 = texture2DLodEXT (_MainTex, coord_37.xy, coord_37.w).yx;
    rg_35 = tmpvar_38;
    highp vec3 p_39;
    p_39 = ((tmpvar_32 * 2.0) + tmpvar_33.z);
    highp vec2 rg_40;
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.xy = (p_39.xz + (vec2(37.0, 13.0) * floor(p_39.y)));
    highp vec4 coord_42;
    coord_42 = (tmpvar_41 / 64.0);
    lowp vec2 tmpvar_43;
    tmpvar_43 = texture2DLodEXT (_MainTex, coord_42.xy, coord_42.w).yx;
    rg_40 = tmpvar_43;
    tmpvar_30 = ((sqrt(dot (p_31, p_31)) - _Radius) - (mix (rg_35.x, rg_35.y, fract(p_34.y)) + (mix (rg_40.x, rg_40.y, fract(p_39.y)) / 2.0)));
    if ((tmpvar_30 <= 0.02)) {
      highp vec3 p_44;
      p_44 = (p_24 - sphere_23.xyz);
      heat_29 = (heat_29 + pow (((((_Radius - sqrt(dot (p_44, p_44))) + 2.5) * fac_27) * _Heat), 3.0));
      fac_27 = (fac_27 * 0.25);
      dens_28 = (dens_28 + 0.2);
      p_24 = (p_24 - d_25);
    } else {
      p_24 = (p_24 - (d_25 * 3.0));
    };
    i_26 = (i_26 + 1);
  };
  highp vec2 tmpvar_45;
  tmpvar_45.x = heat_29;
  tmpvar_45.y = dens_28;
  highp vec4 tmpvar_46;
  tmpvar_46.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_46.x = tmpvar_45.x;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DLodEXT (_RampTex, tmpvar_46.xy, 0.0);
  col_1.xyz = tmpvar_47.xyz;
  highp float tmpvar_48;
  tmpvar_48 = clamp ((clamp (dens_28, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_48;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 p_17;
    p_17 = ((tmpvar_10 * 2.0) + tmpvar_11.z);
    highp vec2 rg_18;
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    highp vec4 coord_20;
    coord_20 = (tmpvar_19 / 64.0);
    lowp vec2 tmpvar_21;
    tmpvar_21 = texture2DLodEXT (_MainTex, coord_20.xy, coord_20.w).yx;
    rg_18 = tmpvar_21;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_18.x, rg_18.y, fract(p_17.y)) / 2.0)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_22;
      tmpvar_22.w = 0.0;
      tmpvar_22.xyz = p_3;
      tmpvar_5 = tmpvar_22;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_23;
  sphere_23 = xlv_TEXCOORD2;
  highp vec3 p_24;
  p_24 = tmpvar_5.xyz;
  highp vec3 d_25;
  int i_26;
  highp float fac_27;
  highp float dens_28;
  highp float heat_29;
  heat_29 = 0.0;
  dens_28 = 0.0;
  fac_27 = 0.5;
  d_25 = (normalize(xlv_TEXCOORD1) * 0.1);
  i_26 = 0;
  for (int i_26 = 0; i_26 < 10; ) {
    highp float tmpvar_30;
    highp vec3 p_31;
    p_31 = (p_24 - sphere_23.xyz);
    highp vec3 tmpvar_32;
    tmpvar_32 = (p_24 * _Frequency);
    highp vec4 tmpvar_33;
    tmpvar_33 = (_Time * _ScrollSpeed);
    highp vec3 p_34;
    p_34 = (tmpvar_32 + tmpvar_33.y);
    highp vec2 rg_35;
    highp vec4 tmpvar_36;
    tmpvar_36.zw = vec2(0.0, 0.0);
    tmpvar_36.xy = (p_34.xz + (vec2(37.0, 13.0) * floor(p_34.y)));
    highp vec4 coord_37;
    coord_37 = (tmpvar_36 / 64.0);
    lowp vec2 tmpvar_38;
    tmpvar_38 = texture2DLodEXT (_MainTex, coord_37.xy, coord_37.w).yx;
    rg_35 = tmpvar_38;
    highp vec3 p_39;
    p_39 = ((tmpvar_32 * 2.0) + tmpvar_33.z);
    highp vec2 rg_40;
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.xy = (p_39.xz + (vec2(37.0, 13.0) * floor(p_39.y)));
    highp vec4 coord_42;
    coord_42 = (tmpvar_41 / 64.0);
    lowp vec2 tmpvar_43;
    tmpvar_43 = texture2DLodEXT (_MainTex, coord_42.xy, coord_42.w).yx;
    rg_40 = tmpvar_43;
    tmpvar_30 = ((sqrt(dot (p_31, p_31)) - _Radius) - (mix (rg_35.x, rg_35.y, fract(p_34.y)) + (mix (rg_40.x, rg_40.y, fract(p_39.y)) / 2.0)));
    if ((tmpvar_30 <= 0.02)) {
      highp vec3 p_44;
      p_44 = (p_24 - sphere_23.xyz);
      heat_29 = (heat_29 + pow (((((_Radius - sqrt(dot (p_44, p_44))) + 2.5) * fac_27) * _Heat), 3.0));
      fac_27 = (fac_27 * 0.25);
      dens_28 = (dens_28 + 0.2);
      p_24 = (p_24 - d_25);
    } else {
      p_24 = (p_24 - (d_25 * 3.0));
    };
    i_26 = (i_26 + 1);
  };
  highp vec2 tmpvar_45;
  tmpvar_45.x = heat_29;
  tmpvar_45.y = dens_28;
  highp vec4 tmpvar_46;
  tmpvar_46.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_46.x = tmpvar_45.x;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DLodEXT (_RampTex, tmpvar_46.xy, 0.0);
  col_1.xyz = tmpvar_47.xyz;
  highp float tmpvar_48;
  tmpvar_48 = clamp ((clamp (dens_28, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_48;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 357
#line 361
#line 399
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 357
#line 361
#line 399
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    return v;
}
#line 357
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 374
highp vec2 heat( in highp vec4 sphere, in highp vec3 p, in highp vec3 d ) {
    #line 376
    highp float heat = 0.0;
    highp float dens = 0.0;
    highp float fac = 0.5;
    d *= 0.1;
    #line 380
    highp int i = 0;
    for ( ; (i < 10); (++i)) {
        #line 384
        highp float dis = distf( sphere, p);
        if ((dis <= 0.02)){
            heat += pow( ((((_Radius - distance( p, sphere.xyz)) + 2.5) * fac) * _Heat), 3.0);
            #line 388
            fac *= 0.25;
            dens += 0.2;
            p -= d;
        }
        else{
            #line 394
            p -= (d * 3.0);
        }
    }
    return vec2( heat, dens);
}
#line 361
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    highp float dist;
    highp int i = 0;
    for ( ; (i < 25); (++i)) {
        #line 368
        dist = distf( sphere, p);
        if ((dist < 0.02)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 372
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 399
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp vec2 hd = heat( i.sphere, m.xyz, normalize(i.viewVec));
    #line 403
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( hd.x, 0.0, 0.0, 0.0));
    col.w = xll_saturate_f((xll_saturate_f(hd.y) * _Alpha));
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 p_16;
    p_16 = ((tmpvar_10 * 2.0) + tmpvar_11.z);
    vec4 tmpvar_17;
    tmpvar_17.zw = vec2(0.0, 0.0);
    tmpvar_17.xy = (p_16.xz + (vec2(37.0, 13.0) * floor(p_16.y)));
    vec4 coord_18;
    coord_18 = (tmpvar_17 / 64.0);
    vec2 tmpvar_19;
    tmpvar_19 = texture2DLod (_MainTex, coord_18.xy, coord_18.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_19.x, tmpvar_19.y, fract(p_16.y)) / 2.0)));
    if ((tmpvar_8 < 0.02)) {
      vec4 tmpvar_20;
      tmpvar_20.w = 0.0;
      tmpvar_20.xyz = p_3;
      tmpvar_5 = tmpvar_20;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec3 p_21;
  p_21 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  float edge0_22;
  edge0_22 = (_Radius + 0.5);
  float t_23;
  t_23 = max (min (((sqrt(dot (p_21, p_21)) - edge0_22) / ((_Radius + 1.5) - edge0_22)), 1.0), 0.0);
  vec4 tmpvar_24;
  tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_24.x = (1.0 - ((t_23 * (t_23 * (3.0 - (2.0 * t_23)))) / _Heat));
  col_1.xyz = texture2DLod (_RampTex, tmpvar_24.xy, 0.0).xyz;
  col_1.w = clamp (_Alpha, 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_OFF" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 p_17;
    p_17 = ((tmpvar_10 * 2.0) + tmpvar_11.z);
    highp vec2 rg_18;
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    highp vec4 coord_20;
    coord_20 = (tmpvar_19 / 64.0);
    lowp vec2 tmpvar_21;
    tmpvar_21 = texture2DLodEXT (_MainTex, coord_20.xy, coord_20.w).yx;
    rg_18 = tmpvar_21;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_18.x, rg_18.y, fract(p_17.y)) / 2.0)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_22;
      tmpvar_22.w = 0.0;
      tmpvar_22.xyz = p_3;
      tmpvar_5 = tmpvar_22;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_23;
  p_23 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_24;
  edge0_24 = (_Radius + 0.5);
  highp float t_25;
  t_25 = max (min (((sqrt(dot (p_23, p_23)) - edge0_24) / ((_Radius + 1.5) - edge0_24)), 1.0), 0.0);
  highp vec4 tmpvar_26;
  tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_26.x = (1.0 - ((t_25 * (t_25 * (3.0 - (2.0 * t_25)))) / _Heat));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DLodEXT (_RampTex, tmpvar_26.xy, 0.0);
  col_1.xyz = tmpvar_27.xyz;
  highp float tmpvar_28;
  tmpvar_28 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_28;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 p_17;
    p_17 = ((tmpvar_10 * 2.0) + tmpvar_11.z);
    highp vec2 rg_18;
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    highp vec4 coord_20;
    coord_20 = (tmpvar_19 / 64.0);
    lowp vec2 tmpvar_21;
    tmpvar_21 = texture2DLodEXT (_MainTex, coord_20.xy, coord_20.w).yx;
    rg_18 = tmpvar_21;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_18.x, rg_18.y, fract(p_17.y)) / 2.0)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_22;
      tmpvar_22.w = 0.0;
      tmpvar_22.xyz = p_3;
      tmpvar_5 = tmpvar_22;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_23;
  p_23 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_24;
  edge0_24 = (_Radius + 0.5);
  highp float t_25;
  t_25 = max (min (((sqrt(dot (p_23, p_23)) - edge0_24) / ((_Radius + 1.5) - edge0_24)), 1.0), 0.0);
  highp vec4 tmpvar_26;
  tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_26.x = (1.0 - ((t_25 * (t_25 * (3.0 - (2.0 * t_25)))) / _Heat));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DLodEXT (_RampTex, tmpvar_26.xy, 0.0);
  col_1.xyz = tmpvar_27.xyz;
  highp float tmpvar_28;
  tmpvar_28 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_28;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 357
#line 361
#line 399
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 357
#line 361
#line 399
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    return v;
}
#line 357
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 361
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    highp float dist;
    highp int i = 0;
    for ( ; (i < 25); (++i)) {
        #line 368
        dist = distf( sphere, p);
        if ((dist < 0.02)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 372
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 399
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp float heatfac = (smoothstep( (_Radius + 0.5), (_Radius + 1.5), distance( m.xyz, i.sphere.xyz)) / _Heat);
    #line 403
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( (1.0 - heatfac), 0.0, 0.0, 0.0));
    col.w = xll_saturate_f(_Alpha);
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_ON" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 tmpvar_16;
    tmpvar_16 = (tmpvar_10 * 2.0);
    vec3 p_17;
    p_17 = (tmpvar_16 + tmpvar_11.z);
    vec4 tmpvar_18;
    tmpvar_18.zw = vec2(0.0, 0.0);
    tmpvar_18.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    vec4 coord_19;
    coord_19 = (tmpvar_18 / 64.0);
    vec2 tmpvar_20;
    tmpvar_20 = texture2DLod (_MainTex, coord_19.xy, coord_19.w).yx;
    vec3 p_21;
    p_21 = ((tmpvar_16 * 2.0) + tmpvar_11.z);
    vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.xy = (p_21.xz + (vec2(37.0, 13.0) * floor(p_21.y)));
    vec4 coord_23;
    coord_23 = (tmpvar_22 / 64.0);
    vec2 tmpvar_24;
    tmpvar_24 = texture2DLod (_MainTex, coord_23.xy, coord_23.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_20.x, tmpvar_20.y, fract(p_17.y)) / 2.0)) + (mix (tmpvar_24.x, tmpvar_24.y, fract(p_21.y)) / 4.0)));
    if ((tmpvar_8 < 0.02)) {
      vec4 tmpvar_25;
      tmpvar_25.w = 0.0;
      tmpvar_25.xyz = p_3;
      tmpvar_5 = tmpvar_25;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec4 sphere_26;
  sphere_26 = xlv_TEXCOORD2;
  vec3 p_27;
  p_27 = tmpvar_5.xyz;
  vec3 d_28;
  int i_29;
  float fac_30;
  float dens_31;
  float heat_32;
  heat_32 = 0.0;
  dens_31 = 0.0;
  fac_30 = 0.5;
  d_28 = (normalize(xlv_TEXCOORD1) * 0.1);
  i_29 = 0;
  for (int i_29 = 0; i_29 < 10; ) {
    float tmpvar_33;
    vec3 p_34;
    p_34 = (p_27 - sphere_26.xyz);
    vec3 tmpvar_35;
    tmpvar_35 = (p_27 * _Frequency);
    vec4 tmpvar_36;
    tmpvar_36 = (_Time * _ScrollSpeed);
    vec3 p_37;
    p_37 = (tmpvar_35 + tmpvar_36.y);
    vec4 tmpvar_38;
    tmpvar_38.zw = vec2(0.0, 0.0);
    tmpvar_38.xy = (p_37.xz + (vec2(37.0, 13.0) * floor(p_37.y)));
    vec4 coord_39;
    coord_39 = (tmpvar_38 / 64.0);
    vec2 tmpvar_40;
    tmpvar_40 = texture2DLod (_MainTex, coord_39.xy, coord_39.w).yx;
    vec3 tmpvar_41;
    tmpvar_41 = (tmpvar_35 * 2.0);
    vec3 p_42;
    p_42 = (tmpvar_41 + tmpvar_36.z);
    vec4 tmpvar_43;
    tmpvar_43.zw = vec2(0.0, 0.0);
    tmpvar_43.xy = (p_42.xz + (vec2(37.0, 13.0) * floor(p_42.y)));
    vec4 coord_44;
    coord_44 = (tmpvar_43 / 64.0);
    vec2 tmpvar_45;
    tmpvar_45 = texture2DLod (_MainTex, coord_44.xy, coord_44.w).yx;
    vec3 p_46;
    p_46 = ((tmpvar_41 * 2.0) + tmpvar_36.z);
    vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.xy = (p_46.xz + (vec2(37.0, 13.0) * floor(p_46.y)));
    vec4 coord_48;
    coord_48 = (tmpvar_47 / 64.0);
    vec2 tmpvar_49;
    tmpvar_49 = texture2DLod (_MainTex, coord_48.xy, coord_48.w).yx;
    tmpvar_33 = ((sqrt(dot (p_34, p_34)) - _Radius) - ((mix (tmpvar_40.x, tmpvar_40.y, fract(p_37.y)) + (mix (tmpvar_45.x, tmpvar_45.y, fract(p_42.y)) / 2.0)) + (mix (tmpvar_49.x, tmpvar_49.y, fract(p_46.y)) / 4.0)));
    if ((tmpvar_33 <= 0.02)) {
      vec3 p_50;
      p_50 = (p_27 - sphere_26.xyz);
      heat_32 = (heat_32 + pow (((((_Radius - sqrt(dot (p_50, p_50))) + 2.5) * fac_30) * _Heat), 3.0));
      fac_30 = (fac_30 * 0.25);
      dens_31 = (dens_31 + 0.2);
      p_27 = (p_27 - d_28);
    } else {
      p_27 = (p_27 - (d_28 * 3.0));
    };
    i_29 = (i_29 + 1);
  };
  vec2 tmpvar_51;
  tmpvar_51.x = heat_32;
  tmpvar_51.y = dens_31;
  vec4 tmpvar_52;
  tmpvar_52.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_52.x = tmpvar_51.x;
  col_1.xyz = texture2DLod (_RampTex, tmpvar_52.xy, 0.0).xyz;
  col_1.w = clamp ((clamp (dens_31, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_ON" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 p_23;
    p_23 = ((tmpvar_17 * 2.0) + tmpvar_11.z);
    highp vec2 rg_24;
    highp vec4 tmpvar_25;
    tmpvar_25.zw = vec2(0.0, 0.0);
    tmpvar_25.xy = (p_23.xz + (vec2(37.0, 13.0) * floor(p_23.y)));
    highp vec4 coord_26;
    coord_26 = (tmpvar_25 / 64.0);
    lowp vec2 tmpvar_27;
    tmpvar_27 = texture2DLodEXT (_MainTex, coord_26.xy, coord_26.w).yx;
    rg_24 = tmpvar_27;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_24.x, rg_24.y, fract(p_23.y)) / 4.0)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_28;
      tmpvar_28.w = 0.0;
      tmpvar_28.xyz = p_3;
      tmpvar_5 = tmpvar_28;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_29;
  sphere_29 = xlv_TEXCOORD2;
  highp vec3 p_30;
  p_30 = tmpvar_5.xyz;
  highp vec3 d_31;
  int i_32;
  highp float fac_33;
  highp float dens_34;
  highp float heat_35;
  heat_35 = 0.0;
  dens_34 = 0.0;
  fac_33 = 0.5;
  d_31 = (normalize(xlv_TEXCOORD1) * 0.1);
  i_32 = 0;
  for (int i_32 = 0; i_32 < 10; ) {
    highp float tmpvar_36;
    highp vec3 p_37;
    p_37 = (p_30 - sphere_29.xyz);
    highp vec3 tmpvar_38;
    tmpvar_38 = (p_30 * _Frequency);
    highp vec4 tmpvar_39;
    tmpvar_39 = (_Time * _ScrollSpeed);
    highp vec3 p_40;
    p_40 = (tmpvar_38 + tmpvar_39.y);
    highp vec2 rg_41;
    highp vec4 tmpvar_42;
    tmpvar_42.zw = vec2(0.0, 0.0);
    tmpvar_42.xy = (p_40.xz + (vec2(37.0, 13.0) * floor(p_40.y)));
    highp vec4 coord_43;
    coord_43 = (tmpvar_42 / 64.0);
    lowp vec2 tmpvar_44;
    tmpvar_44 = texture2DLodEXT (_MainTex, coord_43.xy, coord_43.w).yx;
    rg_41 = tmpvar_44;
    highp vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_38 * 2.0);
    highp vec3 p_46;
    p_46 = (tmpvar_45 + tmpvar_39.z);
    highp vec2 rg_47;
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.xy = (p_46.xz + (vec2(37.0, 13.0) * floor(p_46.y)));
    highp vec4 coord_49;
    coord_49 = (tmpvar_48 / 64.0);
    lowp vec2 tmpvar_50;
    tmpvar_50 = texture2DLodEXT (_MainTex, coord_49.xy, coord_49.w).yx;
    rg_47 = tmpvar_50;
    highp vec3 p_51;
    p_51 = ((tmpvar_45 * 2.0) + tmpvar_39.z);
    highp vec2 rg_52;
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.xy = (p_51.xz + (vec2(37.0, 13.0) * floor(p_51.y)));
    highp vec4 coord_54;
    coord_54 = (tmpvar_53 / 64.0);
    lowp vec2 tmpvar_55;
    tmpvar_55 = texture2DLodEXT (_MainTex, coord_54.xy, coord_54.w).yx;
    rg_52 = tmpvar_55;
    tmpvar_36 = ((sqrt(dot (p_37, p_37)) - _Radius) - ((mix (rg_41.x, rg_41.y, fract(p_40.y)) + (mix (rg_47.x, rg_47.y, fract(p_46.y)) / 2.0)) + (mix (rg_52.x, rg_52.y, fract(p_51.y)) / 4.0)));
    if ((tmpvar_36 <= 0.02)) {
      highp vec3 p_56;
      p_56 = (p_30 - sphere_29.xyz);
      heat_35 = (heat_35 + pow (((((_Radius - sqrt(dot (p_56, p_56))) + 2.5) * fac_33) * _Heat), 3.0));
      fac_33 = (fac_33 * 0.25);
      dens_34 = (dens_34 + 0.2);
      p_30 = (p_30 - d_31);
    } else {
      p_30 = (p_30 - (d_31 * 3.0));
    };
    i_32 = (i_32 + 1);
  };
  highp vec2 tmpvar_57;
  tmpvar_57.x = heat_35;
  tmpvar_57.y = dens_34;
  highp vec4 tmpvar_58;
  tmpvar_58.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_58.x = tmpvar_57.x;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DLodEXT (_RampTex, tmpvar_58.xy, 0.0);
  col_1.xyz = tmpvar_59.xyz;
  highp float tmpvar_60;
  tmpvar_60 = clamp ((clamp (dens_34, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_60;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 p_23;
    p_23 = ((tmpvar_17 * 2.0) + tmpvar_11.z);
    highp vec2 rg_24;
    highp vec4 tmpvar_25;
    tmpvar_25.zw = vec2(0.0, 0.0);
    tmpvar_25.xy = (p_23.xz + (vec2(37.0, 13.0) * floor(p_23.y)));
    highp vec4 coord_26;
    coord_26 = (tmpvar_25 / 64.0);
    lowp vec2 tmpvar_27;
    tmpvar_27 = texture2DLodEXT (_MainTex, coord_26.xy, coord_26.w).yx;
    rg_24 = tmpvar_27;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_24.x, rg_24.y, fract(p_23.y)) / 4.0)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_28;
      tmpvar_28.w = 0.0;
      tmpvar_28.xyz = p_3;
      tmpvar_5 = tmpvar_28;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_29;
  sphere_29 = xlv_TEXCOORD2;
  highp vec3 p_30;
  p_30 = tmpvar_5.xyz;
  highp vec3 d_31;
  int i_32;
  highp float fac_33;
  highp float dens_34;
  highp float heat_35;
  heat_35 = 0.0;
  dens_34 = 0.0;
  fac_33 = 0.5;
  d_31 = (normalize(xlv_TEXCOORD1) * 0.1);
  i_32 = 0;
  for (int i_32 = 0; i_32 < 10; ) {
    highp float tmpvar_36;
    highp vec3 p_37;
    p_37 = (p_30 - sphere_29.xyz);
    highp vec3 tmpvar_38;
    tmpvar_38 = (p_30 * _Frequency);
    highp vec4 tmpvar_39;
    tmpvar_39 = (_Time * _ScrollSpeed);
    highp vec3 p_40;
    p_40 = (tmpvar_38 + tmpvar_39.y);
    highp vec2 rg_41;
    highp vec4 tmpvar_42;
    tmpvar_42.zw = vec2(0.0, 0.0);
    tmpvar_42.xy = (p_40.xz + (vec2(37.0, 13.0) * floor(p_40.y)));
    highp vec4 coord_43;
    coord_43 = (tmpvar_42 / 64.0);
    lowp vec2 tmpvar_44;
    tmpvar_44 = texture2DLodEXT (_MainTex, coord_43.xy, coord_43.w).yx;
    rg_41 = tmpvar_44;
    highp vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_38 * 2.0);
    highp vec3 p_46;
    p_46 = (tmpvar_45 + tmpvar_39.z);
    highp vec2 rg_47;
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.xy = (p_46.xz + (vec2(37.0, 13.0) * floor(p_46.y)));
    highp vec4 coord_49;
    coord_49 = (tmpvar_48 / 64.0);
    lowp vec2 tmpvar_50;
    tmpvar_50 = texture2DLodEXT (_MainTex, coord_49.xy, coord_49.w).yx;
    rg_47 = tmpvar_50;
    highp vec3 p_51;
    p_51 = ((tmpvar_45 * 2.0) + tmpvar_39.z);
    highp vec2 rg_52;
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.xy = (p_51.xz + (vec2(37.0, 13.0) * floor(p_51.y)));
    highp vec4 coord_54;
    coord_54 = (tmpvar_53 / 64.0);
    lowp vec2 tmpvar_55;
    tmpvar_55 = texture2DLodEXT (_MainTex, coord_54.xy, coord_54.w).yx;
    rg_52 = tmpvar_55;
    tmpvar_36 = ((sqrt(dot (p_37, p_37)) - _Radius) - ((mix (rg_41.x, rg_41.y, fract(p_40.y)) + (mix (rg_47.x, rg_47.y, fract(p_46.y)) / 2.0)) + (mix (rg_52.x, rg_52.y, fract(p_51.y)) / 4.0)));
    if ((tmpvar_36 <= 0.02)) {
      highp vec3 p_56;
      p_56 = (p_30 - sphere_29.xyz);
      heat_35 = (heat_35 + pow (((((_Radius - sqrt(dot (p_56, p_56))) + 2.5) * fac_33) * _Heat), 3.0));
      fac_33 = (fac_33 * 0.25);
      dens_34 = (dens_34 + 0.2);
      p_30 = (p_30 - d_31);
    } else {
      p_30 = (p_30 - (d_31 * 3.0));
    };
    i_32 = (i_32 + 1);
  };
  highp vec2 tmpvar_57;
  tmpvar_57.x = heat_35;
  tmpvar_57.y = dens_34;
  highp vec4 tmpvar_58;
  tmpvar_58.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_58.x = tmpvar_57.x;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DLodEXT (_RampTex, tmpvar_58.xy, 0.0);
  col_1.xyz = tmpvar_59.xyz;
  highp float tmpvar_60;
  tmpvar_60 = clamp ((clamp (dens_34, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_60;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 401
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 401
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    v += (noise( (p + offset.z)) / 4.0);
    #line 356
    p *= 2.0;
    return v;
}
#line 359
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    #line 361
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 376
highp vec2 heat( in highp vec4 sphere, in highp vec3 p, in highp vec3 d ) {
    #line 378
    highp float heat = 0.0;
    highp float dens = 0.0;
    highp float fac = 0.5;
    d *= 0.1;
    #line 382
    highp int i = 0;
    for ( ; (i < 10); (++i)) {
        #line 386
        highp float dis = distf( sphere, p);
        if ((dis <= 0.02)){
            heat += pow( ((((_Radius - distance( p, sphere.xyz)) + 2.5) * fac) * _Heat), 3.0);
            #line 390
            fac *= 0.25;
            dens += 0.2;
            p -= d;
        }
        else{
            #line 396
            p -= (d * 3.0);
        }
    }
    return vec2( heat, dens);
}
#line 363
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    #line 365
    highp float dist;
    highp int i = 0;
    for ( ; (i < 25); (++i)) {
        #line 370
        dist = distf( sphere, p);
        if ((dist < 0.02)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 374
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 401
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp vec2 hd = heat( i.sphere, m.xyz, normalize(i.viewVec));
    #line 405
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( hd.x, 0.0, 0.0, 0.0));
    col.w = xll_saturate_f((xll_saturate_f(hd.y) * _Alpha));
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 tmpvar_16;
    tmpvar_16 = (tmpvar_10 * 2.0);
    vec3 p_17;
    p_17 = (tmpvar_16 + tmpvar_11.z);
    vec4 tmpvar_18;
    tmpvar_18.zw = vec2(0.0, 0.0);
    tmpvar_18.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    vec4 coord_19;
    coord_19 = (tmpvar_18 / 64.0);
    vec2 tmpvar_20;
    tmpvar_20 = texture2DLod (_MainTex, coord_19.xy, coord_19.w).yx;
    vec3 p_21;
    p_21 = ((tmpvar_16 * 2.0) + tmpvar_11.z);
    vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.xy = (p_21.xz + (vec2(37.0, 13.0) * floor(p_21.y)));
    vec4 coord_23;
    coord_23 = (tmpvar_22 / 64.0);
    vec2 tmpvar_24;
    tmpvar_24 = texture2DLod (_MainTex, coord_23.xy, coord_23.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_20.x, tmpvar_20.y, fract(p_17.y)) / 2.0)) + (mix (tmpvar_24.x, tmpvar_24.y, fract(p_21.y)) / 4.0)));
    if ((tmpvar_8 < 0.02)) {
      vec4 tmpvar_25;
      tmpvar_25.w = 0.0;
      tmpvar_25.xyz = p_3;
      tmpvar_5 = tmpvar_25;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec3 p_26;
  p_26 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  float edge0_27;
  edge0_27 = (_Radius + 0.5);
  float t_28;
  t_28 = max (min (((sqrt(dot (p_26, p_26)) - edge0_27) / ((_Radius + 1.5) - edge0_27)), 1.0), 0.0);
  vec4 tmpvar_29;
  tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_29.x = (1.0 - ((t_28 * (t_28 * (3.0 - (2.0 * t_28)))) / _Heat));
  col_1.xyz = texture2DLod (_RampTex, tmpvar_29.xy, 0.0).xyz;
  col_1.w = clamp (_Alpha, 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_OFF" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 p_23;
    p_23 = ((tmpvar_17 * 2.0) + tmpvar_11.z);
    highp vec2 rg_24;
    highp vec4 tmpvar_25;
    tmpvar_25.zw = vec2(0.0, 0.0);
    tmpvar_25.xy = (p_23.xz + (vec2(37.0, 13.0) * floor(p_23.y)));
    highp vec4 coord_26;
    coord_26 = (tmpvar_25 / 64.0);
    lowp vec2 tmpvar_27;
    tmpvar_27 = texture2DLodEXT (_MainTex, coord_26.xy, coord_26.w).yx;
    rg_24 = tmpvar_27;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_24.x, rg_24.y, fract(p_23.y)) / 4.0)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_28;
      tmpvar_28.w = 0.0;
      tmpvar_28.xyz = p_3;
      tmpvar_5 = tmpvar_28;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_29;
  p_29 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_30;
  edge0_30 = (_Radius + 0.5);
  highp float t_31;
  t_31 = max (min (((sqrt(dot (p_29, p_29)) - edge0_30) / ((_Radius + 1.5) - edge0_30)), 1.0), 0.0);
  highp vec4 tmpvar_32;
  tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_32.x = (1.0 - ((t_31 * (t_31 * (3.0 - (2.0 * t_31)))) / _Heat));
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DLodEXT (_RampTex, tmpvar_32.xy, 0.0);
  col_1.xyz = tmpvar_33.xyz;
  highp float tmpvar_34;
  tmpvar_34 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_34;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 p_23;
    p_23 = ((tmpvar_17 * 2.0) + tmpvar_11.z);
    highp vec2 rg_24;
    highp vec4 tmpvar_25;
    tmpvar_25.zw = vec2(0.0, 0.0);
    tmpvar_25.xy = (p_23.xz + (vec2(37.0, 13.0) * floor(p_23.y)));
    highp vec4 coord_26;
    coord_26 = (tmpvar_25 / 64.0);
    lowp vec2 tmpvar_27;
    tmpvar_27 = texture2DLodEXT (_MainTex, coord_26.xy, coord_26.w).yx;
    rg_24 = tmpvar_27;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_24.x, rg_24.y, fract(p_23.y)) / 4.0)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_28;
      tmpvar_28.w = 0.0;
      tmpvar_28.xyz = p_3;
      tmpvar_5 = tmpvar_28;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_29;
  p_29 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_30;
  edge0_30 = (_Radius + 0.5);
  highp float t_31;
  t_31 = max (min (((sqrt(dot (p_29, p_29)) - edge0_30) / ((_Radius + 1.5) - edge0_30)), 1.0), 0.0);
  highp vec4 tmpvar_32;
  tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_32.x = (1.0 - ((t_31 * (t_31 * (3.0 - (2.0 * t_31)))) / _Heat));
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DLodEXT (_RampTex, tmpvar_32.xy, 0.0);
  col_1.xyz = tmpvar_33.xyz;
  highp float tmpvar_34;
  tmpvar_34 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_34;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 401
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 401
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    v += (noise( (p + offset.z)) / 4.0);
    #line 356
    p *= 2.0;
    return v;
}
#line 359
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    #line 361
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 363
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    #line 365
    highp float dist;
    highp int i = 0;
    for ( ; (i < 25); (++i)) {
        #line 370
        dist = distf( sphere, p);
        if ((dist < 0.02)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 374
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 401
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp float heatfac = (smoothstep( (_Radius + 0.5), (_Radius + 1.5), distance( m.xyz, i.sphere.xyz)) / _Heat);
    #line 405
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( (1.0 - heatfac), 0.0, 0.0, 0.0));
    col.w = xll_saturate_f(_Alpha);
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_ON" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 tmpvar_16;
    tmpvar_16 = (tmpvar_10 * 2.0);
    vec3 p_17;
    p_17 = (tmpvar_16 + tmpvar_11.z);
    vec4 tmpvar_18;
    tmpvar_18.zw = vec2(0.0, 0.0);
    tmpvar_18.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    vec4 coord_19;
    coord_19 = (tmpvar_18 / 64.0);
    vec2 tmpvar_20;
    tmpvar_20 = texture2DLod (_MainTex, coord_19.xy, coord_19.w).yx;
    vec3 tmpvar_21;
    tmpvar_21 = (tmpvar_16 * 2.0);
    vec3 p_22;
    p_22 = (tmpvar_21 + tmpvar_11.z);
    vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.xy = (p_22.xz + (vec2(37.0, 13.0) * floor(p_22.y)));
    vec4 coord_24;
    coord_24 = (tmpvar_23 / 64.0);
    vec2 tmpvar_25;
    tmpvar_25 = texture2DLod (_MainTex, coord_24.xy, coord_24.w).yx;
    vec3 tmpvar_26;
    tmpvar_26 = (tmpvar_21 * 2.0);
    vec3 p_27;
    p_27 = (tmpvar_26 + tmpvar_11.w);
    vec4 tmpvar_28;
    tmpvar_28.zw = vec2(0.0, 0.0);
    tmpvar_28.xy = (p_27.xz + (vec2(37.0, 13.0) * floor(p_27.y)));
    vec4 coord_29;
    coord_29 = (tmpvar_28 / 64.0);
    vec2 tmpvar_30;
    tmpvar_30 = texture2DLod (_MainTex, coord_29.xy, coord_29.w).yx;
    vec3 p_31;
    p_31 = ((tmpvar_26 * 2.0) + tmpvar_11.w);
    vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.xy = (p_31.xz + (vec2(37.0, 13.0) * floor(p_31.y)));
    vec4 coord_33;
    coord_33 = (tmpvar_32 / 64.0);
    vec2 tmpvar_34;
    tmpvar_34 = texture2DLod (_MainTex, coord_33.xy, coord_33.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((((mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_20.x, tmpvar_20.y, fract(p_17.y)) / 2.0)) + (mix (tmpvar_25.x, tmpvar_25.y, fract(p_22.y)) / 4.0)) + (mix (tmpvar_30.x, tmpvar_30.y, fract(p_27.y)) / 8.0)) + (mix (tmpvar_34.x, tmpvar_34.y, fract(p_31.y)) / 16.0)));
    if ((tmpvar_8 < 0.02)) {
      vec4 tmpvar_35;
      tmpvar_35.w = 0.0;
      tmpvar_35.xyz = p_3;
      tmpvar_5 = tmpvar_35;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec4 sphere_36;
  sphere_36 = xlv_TEXCOORD2;
  vec3 p_37;
  p_37 = tmpvar_5.xyz;
  vec3 d_38;
  int i_39;
  float fac_40;
  float dens_41;
  float heat_42;
  heat_42 = 0.0;
  dens_41 = 0.0;
  fac_40 = 0.5;
  d_38 = (normalize(xlv_TEXCOORD1) * 0.1);
  i_39 = 0;
  for (int i_39 = 0; i_39 < 10; ) {
    float tmpvar_43;
    vec3 p_44;
    p_44 = (p_37 - sphere_36.xyz);
    vec3 tmpvar_45;
    tmpvar_45 = (p_37 * _Frequency);
    vec4 tmpvar_46;
    tmpvar_46 = (_Time * _ScrollSpeed);
    vec3 p_47;
    p_47 = (tmpvar_45 + tmpvar_46.y);
    vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.xy = (p_47.xz + (vec2(37.0, 13.0) * floor(p_47.y)));
    vec4 coord_49;
    coord_49 = (tmpvar_48 / 64.0);
    vec2 tmpvar_50;
    tmpvar_50 = texture2DLod (_MainTex, coord_49.xy, coord_49.w).yx;
    vec3 tmpvar_51;
    tmpvar_51 = (tmpvar_45 * 2.0);
    vec3 p_52;
    p_52 = (tmpvar_51 + tmpvar_46.z);
    vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.xy = (p_52.xz + (vec2(37.0, 13.0) * floor(p_52.y)));
    vec4 coord_54;
    coord_54 = (tmpvar_53 / 64.0);
    vec2 tmpvar_55;
    tmpvar_55 = texture2DLod (_MainTex, coord_54.xy, coord_54.w).yx;
    vec3 tmpvar_56;
    tmpvar_56 = (tmpvar_51 * 2.0);
    vec3 p_57;
    p_57 = (tmpvar_56 + tmpvar_46.z);
    vec4 tmpvar_58;
    tmpvar_58.zw = vec2(0.0, 0.0);
    tmpvar_58.xy = (p_57.xz + (vec2(37.0, 13.0) * floor(p_57.y)));
    vec4 coord_59;
    coord_59 = (tmpvar_58 / 64.0);
    vec2 tmpvar_60;
    tmpvar_60 = texture2DLod (_MainTex, coord_59.xy, coord_59.w).yx;
    vec3 tmpvar_61;
    tmpvar_61 = (tmpvar_56 * 2.0);
    vec3 p_62;
    p_62 = (tmpvar_61 + tmpvar_46.w);
    vec4 tmpvar_63;
    tmpvar_63.zw = vec2(0.0, 0.0);
    tmpvar_63.xy = (p_62.xz + (vec2(37.0, 13.0) * floor(p_62.y)));
    vec4 coord_64;
    coord_64 = (tmpvar_63 / 64.0);
    vec2 tmpvar_65;
    tmpvar_65 = texture2DLod (_MainTex, coord_64.xy, coord_64.w).yx;
    vec3 p_66;
    p_66 = ((tmpvar_61 * 2.0) + tmpvar_46.w);
    vec4 tmpvar_67;
    tmpvar_67.zw = vec2(0.0, 0.0);
    tmpvar_67.xy = (p_66.xz + (vec2(37.0, 13.0) * floor(p_66.y)));
    vec4 coord_68;
    coord_68 = (tmpvar_67 / 64.0);
    vec2 tmpvar_69;
    tmpvar_69 = texture2DLod (_MainTex, coord_68.xy, coord_68.w).yx;
    tmpvar_43 = ((sqrt(dot (p_44, p_44)) - _Radius) - ((((mix (tmpvar_50.x, tmpvar_50.y, fract(p_47.y)) + (mix (tmpvar_55.x, tmpvar_55.y, fract(p_52.y)) / 2.0)) + (mix (tmpvar_60.x, tmpvar_60.y, fract(p_57.y)) / 4.0)) + (mix (tmpvar_65.x, tmpvar_65.y, fract(p_62.y)) / 8.0)) + (mix (tmpvar_69.x, tmpvar_69.y, fract(p_66.y)) / 16.0)));
    if ((tmpvar_43 <= 0.02)) {
      vec3 p_70;
      p_70 = (p_37 - sphere_36.xyz);
      heat_42 = (heat_42 + pow (((((_Radius - sqrt(dot (p_70, p_70))) + 2.5) * fac_40) * _Heat), 3.0));
      fac_40 = (fac_40 * 0.25);
      dens_41 = (dens_41 + 0.2);
      p_37 = (p_37 - d_38);
    } else {
      p_37 = (p_37 - (d_38 * 3.0));
    };
    i_39 = (i_39 + 1);
  };
  vec2 tmpvar_71;
  tmpvar_71.x = heat_42;
  tmpvar_71.y = dens_41;
  vec4 tmpvar_72;
  tmpvar_72.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_72.x = tmpvar_71.x;
  col_1.xyz = texture2DLod (_RampTex, tmpvar_72.xy, 0.0).xyz;
  col_1.w = clamp ((clamp (dens_41, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_ON" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = (tmpvar_23 * 2.0);
    highp vec3 p_30;
    p_30 = (tmpvar_29 + tmpvar_11.w);
    highp vec2 rg_31;
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.xy = (p_30.xz + (vec2(37.0, 13.0) * floor(p_30.y)));
    highp vec4 coord_33;
    coord_33 = (tmpvar_32 / 64.0);
    lowp vec2 tmpvar_34;
    tmpvar_34 = texture2DLodEXT (_MainTex, coord_33.xy, coord_33.w).yx;
    rg_31 = tmpvar_34;
    highp vec3 p_35;
    p_35 = ((tmpvar_29 * 2.0) + tmpvar_11.w);
    highp vec2 rg_36;
    highp vec4 tmpvar_37;
    tmpvar_37.zw = vec2(0.0, 0.0);
    tmpvar_37.xy = (p_35.xz + (vec2(37.0, 13.0) * floor(p_35.y)));
    highp vec4 coord_38;
    coord_38 = (tmpvar_37 / 64.0);
    lowp vec2 tmpvar_39;
    tmpvar_39 = texture2DLodEXT (_MainTex, coord_38.xy, coord_38.w).yx;
    rg_36 = tmpvar_39;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_31.x, rg_31.y, fract(p_30.y)) / 8.0)) + (mix (rg_36.x, rg_36.y, fract(p_35.y)) / 16.0)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.xyz = p_3;
      tmpvar_5 = tmpvar_40;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_41;
  sphere_41 = xlv_TEXCOORD2;
  highp vec3 p_42;
  p_42 = tmpvar_5.xyz;
  highp vec3 d_43;
  int i_44;
  highp float fac_45;
  highp float dens_46;
  highp float heat_47;
  heat_47 = 0.0;
  dens_46 = 0.0;
  fac_45 = 0.5;
  d_43 = (normalize(xlv_TEXCOORD1) * 0.1);
  i_44 = 0;
  for (int i_44 = 0; i_44 < 10; ) {
    highp float tmpvar_48;
    highp vec3 p_49;
    p_49 = (p_42 - sphere_41.xyz);
    highp vec3 tmpvar_50;
    tmpvar_50 = (p_42 * _Frequency);
    highp vec4 tmpvar_51;
    tmpvar_51 = (_Time * _ScrollSpeed);
    highp vec3 p_52;
    p_52 = (tmpvar_50 + tmpvar_51.y);
    highp vec2 rg_53;
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.xy = (p_52.xz + (vec2(37.0, 13.0) * floor(p_52.y)));
    highp vec4 coord_55;
    coord_55 = (tmpvar_54 / 64.0);
    lowp vec2 tmpvar_56;
    tmpvar_56 = texture2DLodEXT (_MainTex, coord_55.xy, coord_55.w).yx;
    rg_53 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_50 * 2.0);
    highp vec3 p_58;
    p_58 = (tmpvar_57 + tmpvar_51.z);
    highp vec2 rg_59;
    highp vec4 tmpvar_60;
    tmpvar_60.zw = vec2(0.0, 0.0);
    tmpvar_60.xy = (p_58.xz + (vec2(37.0, 13.0) * floor(p_58.y)));
    highp vec4 coord_61;
    coord_61 = (tmpvar_60 / 64.0);
    lowp vec2 tmpvar_62;
    tmpvar_62 = texture2DLodEXT (_MainTex, coord_61.xy, coord_61.w).yx;
    rg_59 = tmpvar_62;
    highp vec3 tmpvar_63;
    tmpvar_63 = (tmpvar_57 * 2.0);
    highp vec3 p_64;
    p_64 = (tmpvar_63 + tmpvar_51.z);
    highp vec2 rg_65;
    highp vec4 tmpvar_66;
    tmpvar_66.zw = vec2(0.0, 0.0);
    tmpvar_66.xy = (p_64.xz + (vec2(37.0, 13.0) * floor(p_64.y)));
    highp vec4 coord_67;
    coord_67 = (tmpvar_66 / 64.0);
    lowp vec2 tmpvar_68;
    tmpvar_68 = texture2DLodEXT (_MainTex, coord_67.xy, coord_67.w).yx;
    rg_65 = tmpvar_68;
    highp vec3 tmpvar_69;
    tmpvar_69 = (tmpvar_63 * 2.0);
    highp vec3 p_70;
    p_70 = (tmpvar_69 + tmpvar_51.w);
    highp vec2 rg_71;
    highp vec4 tmpvar_72;
    tmpvar_72.zw = vec2(0.0, 0.0);
    tmpvar_72.xy = (p_70.xz + (vec2(37.0, 13.0) * floor(p_70.y)));
    highp vec4 coord_73;
    coord_73 = (tmpvar_72 / 64.0);
    lowp vec2 tmpvar_74;
    tmpvar_74 = texture2DLodEXT (_MainTex, coord_73.xy, coord_73.w).yx;
    rg_71 = tmpvar_74;
    highp vec3 p_75;
    p_75 = ((tmpvar_69 * 2.0) + tmpvar_51.w);
    highp vec2 rg_76;
    highp vec4 tmpvar_77;
    tmpvar_77.zw = vec2(0.0, 0.0);
    tmpvar_77.xy = (p_75.xz + (vec2(37.0, 13.0) * floor(p_75.y)));
    highp vec4 coord_78;
    coord_78 = (tmpvar_77 / 64.0);
    lowp vec2 tmpvar_79;
    tmpvar_79 = texture2DLodEXT (_MainTex, coord_78.xy, coord_78.w).yx;
    rg_76 = tmpvar_79;
    tmpvar_48 = ((sqrt(dot (p_49, p_49)) - _Radius) - ((((mix (rg_53.x, rg_53.y, fract(p_52.y)) + (mix (rg_59.x, rg_59.y, fract(p_58.y)) / 2.0)) + (mix (rg_65.x, rg_65.y, fract(p_64.y)) / 4.0)) + (mix (rg_71.x, rg_71.y, fract(p_70.y)) / 8.0)) + (mix (rg_76.x, rg_76.y, fract(p_75.y)) / 16.0)));
    if ((tmpvar_48 <= 0.02)) {
      highp vec3 p_80;
      p_80 = (p_42 - sphere_41.xyz);
      heat_47 = (heat_47 + pow (((((_Radius - sqrt(dot (p_80, p_80))) + 2.5) * fac_45) * _Heat), 3.0));
      fac_45 = (fac_45 * 0.25);
      dens_46 = (dens_46 + 0.2);
      p_42 = (p_42 - d_43);
    } else {
      p_42 = (p_42 - (d_43 * 3.0));
    };
    i_44 = (i_44 + 1);
  };
  highp vec2 tmpvar_81;
  tmpvar_81.x = heat_47;
  tmpvar_81.y = dens_46;
  highp vec4 tmpvar_82;
  tmpvar_82.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_82.x = tmpvar_81.x;
  lowp vec4 tmpvar_83;
  tmpvar_83 = texture2DLodEXT (_RampTex, tmpvar_82.xy, 0.0);
  col_1.xyz = tmpvar_83.xyz;
  highp float tmpvar_84;
  tmpvar_84 = clamp ((clamp (dens_46, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_84;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = (tmpvar_23 * 2.0);
    highp vec3 p_30;
    p_30 = (tmpvar_29 + tmpvar_11.w);
    highp vec2 rg_31;
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.xy = (p_30.xz + (vec2(37.0, 13.0) * floor(p_30.y)));
    highp vec4 coord_33;
    coord_33 = (tmpvar_32 / 64.0);
    lowp vec2 tmpvar_34;
    tmpvar_34 = texture2DLodEXT (_MainTex, coord_33.xy, coord_33.w).yx;
    rg_31 = tmpvar_34;
    highp vec3 p_35;
    p_35 = ((tmpvar_29 * 2.0) + tmpvar_11.w);
    highp vec2 rg_36;
    highp vec4 tmpvar_37;
    tmpvar_37.zw = vec2(0.0, 0.0);
    tmpvar_37.xy = (p_35.xz + (vec2(37.0, 13.0) * floor(p_35.y)));
    highp vec4 coord_38;
    coord_38 = (tmpvar_37 / 64.0);
    lowp vec2 tmpvar_39;
    tmpvar_39 = texture2DLodEXT (_MainTex, coord_38.xy, coord_38.w).yx;
    rg_36 = tmpvar_39;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_31.x, rg_31.y, fract(p_30.y)) / 8.0)) + (mix (rg_36.x, rg_36.y, fract(p_35.y)) / 16.0)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.xyz = p_3;
      tmpvar_5 = tmpvar_40;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_41;
  sphere_41 = xlv_TEXCOORD2;
  highp vec3 p_42;
  p_42 = tmpvar_5.xyz;
  highp vec3 d_43;
  int i_44;
  highp float fac_45;
  highp float dens_46;
  highp float heat_47;
  heat_47 = 0.0;
  dens_46 = 0.0;
  fac_45 = 0.5;
  d_43 = (normalize(xlv_TEXCOORD1) * 0.1);
  i_44 = 0;
  for (int i_44 = 0; i_44 < 10; ) {
    highp float tmpvar_48;
    highp vec3 p_49;
    p_49 = (p_42 - sphere_41.xyz);
    highp vec3 tmpvar_50;
    tmpvar_50 = (p_42 * _Frequency);
    highp vec4 tmpvar_51;
    tmpvar_51 = (_Time * _ScrollSpeed);
    highp vec3 p_52;
    p_52 = (tmpvar_50 + tmpvar_51.y);
    highp vec2 rg_53;
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.xy = (p_52.xz + (vec2(37.0, 13.0) * floor(p_52.y)));
    highp vec4 coord_55;
    coord_55 = (tmpvar_54 / 64.0);
    lowp vec2 tmpvar_56;
    tmpvar_56 = texture2DLodEXT (_MainTex, coord_55.xy, coord_55.w).yx;
    rg_53 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_50 * 2.0);
    highp vec3 p_58;
    p_58 = (tmpvar_57 + tmpvar_51.z);
    highp vec2 rg_59;
    highp vec4 tmpvar_60;
    tmpvar_60.zw = vec2(0.0, 0.0);
    tmpvar_60.xy = (p_58.xz + (vec2(37.0, 13.0) * floor(p_58.y)));
    highp vec4 coord_61;
    coord_61 = (tmpvar_60 / 64.0);
    lowp vec2 tmpvar_62;
    tmpvar_62 = texture2DLodEXT (_MainTex, coord_61.xy, coord_61.w).yx;
    rg_59 = tmpvar_62;
    highp vec3 tmpvar_63;
    tmpvar_63 = (tmpvar_57 * 2.0);
    highp vec3 p_64;
    p_64 = (tmpvar_63 + tmpvar_51.z);
    highp vec2 rg_65;
    highp vec4 tmpvar_66;
    tmpvar_66.zw = vec2(0.0, 0.0);
    tmpvar_66.xy = (p_64.xz + (vec2(37.0, 13.0) * floor(p_64.y)));
    highp vec4 coord_67;
    coord_67 = (tmpvar_66 / 64.0);
    lowp vec2 tmpvar_68;
    tmpvar_68 = texture2DLodEXT (_MainTex, coord_67.xy, coord_67.w).yx;
    rg_65 = tmpvar_68;
    highp vec3 tmpvar_69;
    tmpvar_69 = (tmpvar_63 * 2.0);
    highp vec3 p_70;
    p_70 = (tmpvar_69 + tmpvar_51.w);
    highp vec2 rg_71;
    highp vec4 tmpvar_72;
    tmpvar_72.zw = vec2(0.0, 0.0);
    tmpvar_72.xy = (p_70.xz + (vec2(37.0, 13.0) * floor(p_70.y)));
    highp vec4 coord_73;
    coord_73 = (tmpvar_72 / 64.0);
    lowp vec2 tmpvar_74;
    tmpvar_74 = texture2DLodEXT (_MainTex, coord_73.xy, coord_73.w).yx;
    rg_71 = tmpvar_74;
    highp vec3 p_75;
    p_75 = ((tmpvar_69 * 2.0) + tmpvar_51.w);
    highp vec2 rg_76;
    highp vec4 tmpvar_77;
    tmpvar_77.zw = vec2(0.0, 0.0);
    tmpvar_77.xy = (p_75.xz + (vec2(37.0, 13.0) * floor(p_75.y)));
    highp vec4 coord_78;
    coord_78 = (tmpvar_77 / 64.0);
    lowp vec2 tmpvar_79;
    tmpvar_79 = texture2DLodEXT (_MainTex, coord_78.xy, coord_78.w).yx;
    rg_76 = tmpvar_79;
    tmpvar_48 = ((sqrt(dot (p_49, p_49)) - _Radius) - ((((mix (rg_53.x, rg_53.y, fract(p_52.y)) + (mix (rg_59.x, rg_59.y, fract(p_58.y)) / 2.0)) + (mix (rg_65.x, rg_65.y, fract(p_64.y)) / 4.0)) + (mix (rg_71.x, rg_71.y, fract(p_70.y)) / 8.0)) + (mix (rg_76.x, rg_76.y, fract(p_75.y)) / 16.0)));
    if ((tmpvar_48 <= 0.02)) {
      highp vec3 p_80;
      p_80 = (p_42 - sphere_41.xyz);
      heat_47 = (heat_47 + pow (((((_Radius - sqrt(dot (p_80, p_80))) + 2.5) * fac_45) * _Heat), 3.0));
      fac_45 = (fac_45 * 0.25);
      dens_46 = (dens_46 + 0.2);
      p_42 = (p_42 - d_43);
    } else {
      p_42 = (p_42 - (d_43 * 3.0));
    };
    i_44 = (i_44 + 1);
  };
  highp vec2 tmpvar_81;
  tmpvar_81.x = heat_47;
  tmpvar_81.y = dens_46;
  highp vec4 tmpvar_82;
  tmpvar_82.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_82.x = tmpvar_81.x;
  lowp vec4 tmpvar_83;
  tmpvar_83 = texture2DLodEXT (_RampTex, tmpvar_82.xy, 0.0);
  col_1.xyz = tmpvar_83.xyz;
  highp float tmpvar_84;
  tmpvar_84 = clamp ((clamp (dens_46, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_84;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 405
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 405
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    v += (noise( (p + offset.z)) / 4.0);
    #line 356
    p *= 2.0;
    v += (noise( (p + offset.w)) / 8.0);
    p *= 2.0;
    v += (noise( (p + offset.w)) / 16.0);
    #line 360
    p *= 2.0;
    return v;
}
#line 363
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    #line 365
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 380
highp vec2 heat( in highp vec4 sphere, in highp vec3 p, in highp vec3 d ) {
    #line 382
    highp float heat = 0.0;
    highp float dens = 0.0;
    highp float fac = 0.5;
    d *= 0.1;
    #line 386
    highp int i = 0;
    for ( ; (i < 10); (++i)) {
        #line 390
        highp float dis = distf( sphere, p);
        if ((dis <= 0.02)){
            heat += pow( ((((_Radius - distance( p, sphere.xyz)) + 2.5) * fac) * _Heat), 3.0);
            #line 394
            fac *= 0.25;
            dens += 0.2;
            p -= d;
        }
        else{
            #line 400
            p -= (d * 3.0);
        }
    }
    return vec2( heat, dens);
}
#line 367
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    #line 369
    highp float dist;
    highp int i = 0;
    for ( ; (i < 25); (++i)) {
        #line 374
        dist = distf( sphere, p);
        if ((dist < 0.02)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 378
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 405
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp vec2 hd = heat( i.sphere, m.xyz, normalize(i.viewVec));
    #line 409
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( hd.x, 0.0, 0.0, 0.0));
    col.w = xll_saturate_f((xll_saturate_f(hd.y) * _Alpha));
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 tmpvar_16;
    tmpvar_16 = (tmpvar_10 * 2.0);
    vec3 p_17;
    p_17 = (tmpvar_16 + tmpvar_11.z);
    vec4 tmpvar_18;
    tmpvar_18.zw = vec2(0.0, 0.0);
    tmpvar_18.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    vec4 coord_19;
    coord_19 = (tmpvar_18 / 64.0);
    vec2 tmpvar_20;
    tmpvar_20 = texture2DLod (_MainTex, coord_19.xy, coord_19.w).yx;
    vec3 tmpvar_21;
    tmpvar_21 = (tmpvar_16 * 2.0);
    vec3 p_22;
    p_22 = (tmpvar_21 + tmpvar_11.z);
    vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.xy = (p_22.xz + (vec2(37.0, 13.0) * floor(p_22.y)));
    vec4 coord_24;
    coord_24 = (tmpvar_23 / 64.0);
    vec2 tmpvar_25;
    tmpvar_25 = texture2DLod (_MainTex, coord_24.xy, coord_24.w).yx;
    vec3 tmpvar_26;
    tmpvar_26 = (tmpvar_21 * 2.0);
    vec3 p_27;
    p_27 = (tmpvar_26 + tmpvar_11.w);
    vec4 tmpvar_28;
    tmpvar_28.zw = vec2(0.0, 0.0);
    tmpvar_28.xy = (p_27.xz + (vec2(37.0, 13.0) * floor(p_27.y)));
    vec4 coord_29;
    coord_29 = (tmpvar_28 / 64.0);
    vec2 tmpvar_30;
    tmpvar_30 = texture2DLod (_MainTex, coord_29.xy, coord_29.w).yx;
    vec3 p_31;
    p_31 = ((tmpvar_26 * 2.0) + tmpvar_11.w);
    vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.xy = (p_31.xz + (vec2(37.0, 13.0) * floor(p_31.y)));
    vec4 coord_33;
    coord_33 = (tmpvar_32 / 64.0);
    vec2 tmpvar_34;
    tmpvar_34 = texture2DLod (_MainTex, coord_33.xy, coord_33.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((((mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_20.x, tmpvar_20.y, fract(p_17.y)) / 2.0)) + (mix (tmpvar_25.x, tmpvar_25.y, fract(p_22.y)) / 4.0)) + (mix (tmpvar_30.x, tmpvar_30.y, fract(p_27.y)) / 8.0)) + (mix (tmpvar_34.x, tmpvar_34.y, fract(p_31.y)) / 16.0)));
    if ((tmpvar_8 < 0.02)) {
      vec4 tmpvar_35;
      tmpvar_35.w = 0.0;
      tmpvar_35.xyz = p_3;
      tmpvar_5 = tmpvar_35;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec3 p_36;
  p_36 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  float edge0_37;
  edge0_37 = (_Radius + 0.5);
  float t_38;
  t_38 = max (min (((sqrt(dot (p_36, p_36)) - edge0_37) / ((_Radius + 1.5) - edge0_37)), 1.0), 0.0);
  vec4 tmpvar_39;
  tmpvar_39.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_39.x = (1.0 - ((t_38 * (t_38 * (3.0 - (2.0 * t_38)))) / _Heat));
  col_1.xyz = texture2DLod (_RampTex, tmpvar_39.xy, 0.0).xyz;
  col_1.w = clamp (_Alpha, 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_OFF" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = (tmpvar_23 * 2.0);
    highp vec3 p_30;
    p_30 = (tmpvar_29 + tmpvar_11.w);
    highp vec2 rg_31;
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.xy = (p_30.xz + (vec2(37.0, 13.0) * floor(p_30.y)));
    highp vec4 coord_33;
    coord_33 = (tmpvar_32 / 64.0);
    lowp vec2 tmpvar_34;
    tmpvar_34 = texture2DLodEXT (_MainTex, coord_33.xy, coord_33.w).yx;
    rg_31 = tmpvar_34;
    highp vec3 p_35;
    p_35 = ((tmpvar_29 * 2.0) + tmpvar_11.w);
    highp vec2 rg_36;
    highp vec4 tmpvar_37;
    tmpvar_37.zw = vec2(0.0, 0.0);
    tmpvar_37.xy = (p_35.xz + (vec2(37.0, 13.0) * floor(p_35.y)));
    highp vec4 coord_38;
    coord_38 = (tmpvar_37 / 64.0);
    lowp vec2 tmpvar_39;
    tmpvar_39 = texture2DLodEXT (_MainTex, coord_38.xy, coord_38.w).yx;
    rg_36 = tmpvar_39;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_31.x, rg_31.y, fract(p_30.y)) / 8.0)) + (mix (rg_36.x, rg_36.y, fract(p_35.y)) / 16.0)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.xyz = p_3;
      tmpvar_5 = tmpvar_40;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_41;
  p_41 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_42;
  edge0_42 = (_Radius + 0.5);
  highp float t_43;
  t_43 = max (min (((sqrt(dot (p_41, p_41)) - edge0_42) / ((_Radius + 1.5) - edge0_42)), 1.0), 0.0);
  highp vec4 tmpvar_44;
  tmpvar_44.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_44.x = (1.0 - ((t_43 * (t_43 * (3.0 - (2.0 * t_43)))) / _Heat));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DLodEXT (_RampTex, tmpvar_44.xy, 0.0);
  col_1.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  tmpvar_46 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_46;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 25; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = (tmpvar_23 * 2.0);
    highp vec3 p_30;
    p_30 = (tmpvar_29 + tmpvar_11.w);
    highp vec2 rg_31;
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.xy = (p_30.xz + (vec2(37.0, 13.0) * floor(p_30.y)));
    highp vec4 coord_33;
    coord_33 = (tmpvar_32 / 64.0);
    lowp vec2 tmpvar_34;
    tmpvar_34 = texture2DLodEXT (_MainTex, coord_33.xy, coord_33.w).yx;
    rg_31 = tmpvar_34;
    highp vec3 p_35;
    p_35 = ((tmpvar_29 * 2.0) + tmpvar_11.w);
    highp vec2 rg_36;
    highp vec4 tmpvar_37;
    tmpvar_37.zw = vec2(0.0, 0.0);
    tmpvar_37.xy = (p_35.xz + (vec2(37.0, 13.0) * floor(p_35.y)));
    highp vec4 coord_38;
    coord_38 = (tmpvar_37 / 64.0);
    lowp vec2 tmpvar_39;
    tmpvar_39 = texture2DLodEXT (_MainTex, coord_38.xy, coord_38.w).yx;
    rg_36 = tmpvar_39;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_31.x, rg_31.y, fract(p_30.y)) / 8.0)) + (mix (rg_36.x, rg_36.y, fract(p_35.y)) / 16.0)));
    if ((tmpvar_8 < 0.02)) {
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.xyz = p_3;
      tmpvar_5 = tmpvar_40;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_41;
  p_41 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_42;
  edge0_42 = (_Radius + 0.5);
  highp float t_43;
  t_43 = max (min (((sqrt(dot (p_41, p_41)) - edge0_42) / ((_Radius + 1.5) - edge0_42)), 1.0), 0.0);
  highp vec4 tmpvar_44;
  tmpvar_44.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_44.x = (1.0 - ((t_43 * (t_43 * (3.0 - (2.0 * t_43)))) / _Heat));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DLodEXT (_RampTex, tmpvar_44.xy, 0.0);
  col_1.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  tmpvar_46 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_46;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 405
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 405
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    v += (noise( (p + offset.z)) / 4.0);
    #line 356
    p *= 2.0;
    v += (noise( (p + offset.w)) / 8.0);
    p *= 2.0;
    v += (noise( (p + offset.w)) / 16.0);
    #line 360
    p *= 2.0;
    return v;
}
#line 363
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    #line 365
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 367
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    #line 369
    highp float dist;
    highp int i = 0;
    for ( ; (i < 25); (++i)) {
        #line 374
        dist = distf( sphere, p);
        if ((dist < 0.02)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 378
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 405
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp float heatfac = (smoothstep( (_Radius + 0.5), (_Radius + 1.5), distance( m.xyz, i.sphere.xyz)) / _Heat);
    #line 409
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( (1.0 - heatfac), 0.0, 0.0, 0.0));
    col.w = xll_saturate_f(_Alpha);
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_ON" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 tmpvar_16;
    tmpvar_16 = (tmpvar_10 * 2.0);
    vec3 p_17;
    p_17 = (tmpvar_16 + tmpvar_11.z);
    vec4 tmpvar_18;
    tmpvar_18.zw = vec2(0.0, 0.0);
    tmpvar_18.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    vec4 coord_19;
    coord_19 = (tmpvar_18 / 64.0);
    vec2 tmpvar_20;
    tmpvar_20 = texture2DLod (_MainTex, coord_19.xy, coord_19.w).yx;
    vec3 tmpvar_21;
    tmpvar_21 = (tmpvar_16 * 2.0);
    vec3 p_22;
    p_22 = (tmpvar_21 + tmpvar_11.z);
    vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.xy = (p_22.xz + (vec2(37.0, 13.0) * floor(p_22.y)));
    vec4 coord_24;
    coord_24 = (tmpvar_23 / 64.0);
    vec2 tmpvar_25;
    tmpvar_25 = texture2DLod (_MainTex, coord_24.xy, coord_24.w).yx;
    vec3 p_26;
    p_26 = ((tmpvar_21 * 2.0) + tmpvar_11.w);
    vec4 tmpvar_27;
    tmpvar_27.zw = vec2(0.0, 0.0);
    tmpvar_27.xy = (p_26.xz + (vec2(37.0, 13.0) * floor(p_26.y)));
    vec4 coord_28;
    coord_28 = (tmpvar_27 / 64.0);
    vec2 tmpvar_29;
    tmpvar_29 = texture2DLod (_MainTex, coord_28.xy, coord_28.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (((mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_20.x, tmpvar_20.y, fract(p_17.y)) / 2.0)) + (mix (tmpvar_25.x, tmpvar_25.y, fract(p_22.y)) / 4.0)) + (mix (tmpvar_29.x, tmpvar_29.y, fract(p_26.y)) / 8.0)));
    if ((tmpvar_8 < 0.15)) {
      vec4 tmpvar_30;
      tmpvar_30.w = 0.0;
      tmpvar_30.xyz = p_3;
      tmpvar_5 = tmpvar_30;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec4 sphere_31;
  sphere_31 = xlv_TEXCOORD2;
  vec3 p_32;
  p_32 = tmpvar_5.xyz;
  vec3 d_33;
  int i_34;
  float fac_35;
  float dens_36;
  float heat_37;
  heat_37 = 0.0;
  dens_36 = 0.0;
  fac_35 = 0.5;
  d_33 = (normalize(xlv_TEXCOORD1) * 0.2);
  i_34 = 0;
  for (int i_34 = 0; i_34 < 5; ) {
    float tmpvar_38;
    vec3 p_39;
    p_39 = (p_32 - sphere_31.xyz);
    vec3 tmpvar_40;
    tmpvar_40 = (p_32 * _Frequency);
    vec4 tmpvar_41;
    tmpvar_41 = (_Time * _ScrollSpeed);
    vec3 p_42;
    p_42 = (tmpvar_40 + tmpvar_41.y);
    vec4 tmpvar_43;
    tmpvar_43.zw = vec2(0.0, 0.0);
    tmpvar_43.xy = (p_42.xz + (vec2(37.0, 13.0) * floor(p_42.y)));
    vec4 coord_44;
    coord_44 = (tmpvar_43 / 64.0);
    vec2 tmpvar_45;
    tmpvar_45 = texture2DLod (_MainTex, coord_44.xy, coord_44.w).yx;
    vec3 tmpvar_46;
    tmpvar_46 = (tmpvar_40 * 2.0);
    vec3 p_47;
    p_47 = (tmpvar_46 + tmpvar_41.z);
    vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.xy = (p_47.xz + (vec2(37.0, 13.0) * floor(p_47.y)));
    vec4 coord_49;
    coord_49 = (tmpvar_48 / 64.0);
    vec2 tmpvar_50;
    tmpvar_50 = texture2DLod (_MainTex, coord_49.xy, coord_49.w).yx;
    vec3 tmpvar_51;
    tmpvar_51 = (tmpvar_46 * 2.0);
    vec3 p_52;
    p_52 = (tmpvar_51 + tmpvar_41.z);
    vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.xy = (p_52.xz + (vec2(37.0, 13.0) * floor(p_52.y)));
    vec4 coord_54;
    coord_54 = (tmpvar_53 / 64.0);
    vec2 tmpvar_55;
    tmpvar_55 = texture2DLod (_MainTex, coord_54.xy, coord_54.w).yx;
    vec3 p_56;
    p_56 = ((tmpvar_51 * 2.0) + tmpvar_41.w);
    vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.xy = (p_56.xz + (vec2(37.0, 13.0) * floor(p_56.y)));
    vec4 coord_58;
    coord_58 = (tmpvar_57 / 64.0);
    vec2 tmpvar_59;
    tmpvar_59 = texture2DLod (_MainTex, coord_58.xy, coord_58.w).yx;
    tmpvar_38 = ((sqrt(dot (p_39, p_39)) - _Radius) - (((mix (tmpvar_45.x, tmpvar_45.y, fract(p_42.y)) + (mix (tmpvar_50.x, tmpvar_50.y, fract(p_47.y)) / 2.0)) + (mix (tmpvar_55.x, tmpvar_55.y, fract(p_52.y)) / 4.0)) + (mix (tmpvar_59.x, tmpvar_59.y, fract(p_56.y)) / 8.0)));
    if ((tmpvar_38 <= 0.15)) {
      vec3 p_60;
      p_60 = (p_32 - sphere_31.xyz);
      heat_37 = (heat_37 + pow (((((_Radius - sqrt(dot (p_60, p_60))) + 2.5) * fac_35) * _Heat), 3.0));
      fac_35 = (fac_35 * 0.25);
      dens_36 = (dens_36 + 0.4);
      p_32 = (p_32 - d_33);
    } else {
      p_32 = (p_32 - (d_33 * 3.0));
    };
    i_34 = (i_34 + 1);
  };
  vec2 tmpvar_61;
  tmpvar_61.x = heat_37;
  tmpvar_61.y = dens_36;
  vec4 tmpvar_62;
  tmpvar_62.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_62.x = tmpvar_61.x;
  col_1.xyz = texture2DLod (_RampTex, tmpvar_62.xy, 0.0).xyz;
  col_1.w = clamp ((clamp (dens_36, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_ON" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 p_29;
    p_29 = ((tmpvar_23 * 2.0) + tmpvar_11.w);
    highp vec2 rg_30;
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.xy = (p_29.xz + (vec2(37.0, 13.0) * floor(p_29.y)));
    highp vec4 coord_32;
    coord_32 = (tmpvar_31 / 64.0);
    lowp vec2 tmpvar_33;
    tmpvar_33 = texture2DLodEXT (_MainTex, coord_32.xy, coord_32.w).yx;
    rg_30 = tmpvar_33;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_30.x, rg_30.y, fract(p_29.y)) / 8.0)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_34;
      tmpvar_34.w = 0.0;
      tmpvar_34.xyz = p_3;
      tmpvar_5 = tmpvar_34;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_35;
  sphere_35 = xlv_TEXCOORD2;
  highp vec3 p_36;
  p_36 = tmpvar_5.xyz;
  highp vec3 d_37;
  int i_38;
  highp float fac_39;
  highp float dens_40;
  highp float heat_41;
  heat_41 = 0.0;
  dens_40 = 0.0;
  fac_39 = 0.5;
  d_37 = (normalize(xlv_TEXCOORD1) * 0.2);
  i_38 = 0;
  for (int i_38 = 0; i_38 < 5; ) {
    highp float tmpvar_42;
    highp vec3 p_43;
    p_43 = (p_36 - sphere_35.xyz);
    highp vec3 tmpvar_44;
    tmpvar_44 = (p_36 * _Frequency);
    highp vec4 tmpvar_45;
    tmpvar_45 = (_Time * _ScrollSpeed);
    highp vec3 p_46;
    p_46 = (tmpvar_44 + tmpvar_45.y);
    highp vec2 rg_47;
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.xy = (p_46.xz + (vec2(37.0, 13.0) * floor(p_46.y)));
    highp vec4 coord_49;
    coord_49 = (tmpvar_48 / 64.0);
    lowp vec2 tmpvar_50;
    tmpvar_50 = texture2DLodEXT (_MainTex, coord_49.xy, coord_49.w).yx;
    rg_47 = tmpvar_50;
    highp vec3 tmpvar_51;
    tmpvar_51 = (tmpvar_44 * 2.0);
    highp vec3 p_52;
    p_52 = (tmpvar_51 + tmpvar_45.z);
    highp vec2 rg_53;
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.xy = (p_52.xz + (vec2(37.0, 13.0) * floor(p_52.y)));
    highp vec4 coord_55;
    coord_55 = (tmpvar_54 / 64.0);
    lowp vec2 tmpvar_56;
    tmpvar_56 = texture2DLodEXT (_MainTex, coord_55.xy, coord_55.w).yx;
    rg_53 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_51 * 2.0);
    highp vec3 p_58;
    p_58 = (tmpvar_57 + tmpvar_45.z);
    highp vec2 rg_59;
    highp vec4 tmpvar_60;
    tmpvar_60.zw = vec2(0.0, 0.0);
    tmpvar_60.xy = (p_58.xz + (vec2(37.0, 13.0) * floor(p_58.y)));
    highp vec4 coord_61;
    coord_61 = (tmpvar_60 / 64.0);
    lowp vec2 tmpvar_62;
    tmpvar_62 = texture2DLodEXT (_MainTex, coord_61.xy, coord_61.w).yx;
    rg_59 = tmpvar_62;
    highp vec3 p_63;
    p_63 = ((tmpvar_57 * 2.0) + tmpvar_45.w);
    highp vec2 rg_64;
    highp vec4 tmpvar_65;
    tmpvar_65.zw = vec2(0.0, 0.0);
    tmpvar_65.xy = (p_63.xz + (vec2(37.0, 13.0) * floor(p_63.y)));
    highp vec4 coord_66;
    coord_66 = (tmpvar_65 / 64.0);
    lowp vec2 tmpvar_67;
    tmpvar_67 = texture2DLodEXT (_MainTex, coord_66.xy, coord_66.w).yx;
    rg_64 = tmpvar_67;
    tmpvar_42 = ((sqrt(dot (p_43, p_43)) - _Radius) - (((mix (rg_47.x, rg_47.y, fract(p_46.y)) + (mix (rg_53.x, rg_53.y, fract(p_52.y)) / 2.0)) + (mix (rg_59.x, rg_59.y, fract(p_58.y)) / 4.0)) + (mix (rg_64.x, rg_64.y, fract(p_63.y)) / 8.0)));
    if ((tmpvar_42 <= 0.15)) {
      highp vec3 p_68;
      p_68 = (p_36 - sphere_35.xyz);
      heat_41 = (heat_41 + pow (((((_Radius - sqrt(dot (p_68, p_68))) + 2.5) * fac_39) * _Heat), 3.0));
      fac_39 = (fac_39 * 0.25);
      dens_40 = (dens_40 + 0.4);
      p_36 = (p_36 - d_37);
    } else {
      p_36 = (p_36 - (d_37 * 3.0));
    };
    i_38 = (i_38 + 1);
  };
  highp vec2 tmpvar_69;
  tmpvar_69.x = heat_41;
  tmpvar_69.y = dens_40;
  highp vec4 tmpvar_70;
  tmpvar_70.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_70.x = tmpvar_69.x;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2DLodEXT (_RampTex, tmpvar_70.xy, 0.0);
  col_1.xyz = tmpvar_71.xyz;
  highp float tmpvar_72;
  tmpvar_72 = clamp ((clamp (dens_40, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_72;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 p_29;
    p_29 = ((tmpvar_23 * 2.0) + tmpvar_11.w);
    highp vec2 rg_30;
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.xy = (p_29.xz + (vec2(37.0, 13.0) * floor(p_29.y)));
    highp vec4 coord_32;
    coord_32 = (tmpvar_31 / 64.0);
    lowp vec2 tmpvar_33;
    tmpvar_33 = texture2DLodEXT (_MainTex, coord_32.xy, coord_32.w).yx;
    rg_30 = tmpvar_33;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_30.x, rg_30.y, fract(p_29.y)) / 8.0)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_34;
      tmpvar_34.w = 0.0;
      tmpvar_34.xyz = p_3;
      tmpvar_5 = tmpvar_34;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_35;
  sphere_35 = xlv_TEXCOORD2;
  highp vec3 p_36;
  p_36 = tmpvar_5.xyz;
  highp vec3 d_37;
  int i_38;
  highp float fac_39;
  highp float dens_40;
  highp float heat_41;
  heat_41 = 0.0;
  dens_40 = 0.0;
  fac_39 = 0.5;
  d_37 = (normalize(xlv_TEXCOORD1) * 0.2);
  i_38 = 0;
  for (int i_38 = 0; i_38 < 5; ) {
    highp float tmpvar_42;
    highp vec3 p_43;
    p_43 = (p_36 - sphere_35.xyz);
    highp vec3 tmpvar_44;
    tmpvar_44 = (p_36 * _Frequency);
    highp vec4 tmpvar_45;
    tmpvar_45 = (_Time * _ScrollSpeed);
    highp vec3 p_46;
    p_46 = (tmpvar_44 + tmpvar_45.y);
    highp vec2 rg_47;
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.xy = (p_46.xz + (vec2(37.0, 13.0) * floor(p_46.y)));
    highp vec4 coord_49;
    coord_49 = (tmpvar_48 / 64.0);
    lowp vec2 tmpvar_50;
    tmpvar_50 = texture2DLodEXT (_MainTex, coord_49.xy, coord_49.w).yx;
    rg_47 = tmpvar_50;
    highp vec3 tmpvar_51;
    tmpvar_51 = (tmpvar_44 * 2.0);
    highp vec3 p_52;
    p_52 = (tmpvar_51 + tmpvar_45.z);
    highp vec2 rg_53;
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.xy = (p_52.xz + (vec2(37.0, 13.0) * floor(p_52.y)));
    highp vec4 coord_55;
    coord_55 = (tmpvar_54 / 64.0);
    lowp vec2 tmpvar_56;
    tmpvar_56 = texture2DLodEXT (_MainTex, coord_55.xy, coord_55.w).yx;
    rg_53 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_51 * 2.0);
    highp vec3 p_58;
    p_58 = (tmpvar_57 + tmpvar_45.z);
    highp vec2 rg_59;
    highp vec4 tmpvar_60;
    tmpvar_60.zw = vec2(0.0, 0.0);
    tmpvar_60.xy = (p_58.xz + (vec2(37.0, 13.0) * floor(p_58.y)));
    highp vec4 coord_61;
    coord_61 = (tmpvar_60 / 64.0);
    lowp vec2 tmpvar_62;
    tmpvar_62 = texture2DLodEXT (_MainTex, coord_61.xy, coord_61.w).yx;
    rg_59 = tmpvar_62;
    highp vec3 p_63;
    p_63 = ((tmpvar_57 * 2.0) + tmpvar_45.w);
    highp vec2 rg_64;
    highp vec4 tmpvar_65;
    tmpvar_65.zw = vec2(0.0, 0.0);
    tmpvar_65.xy = (p_63.xz + (vec2(37.0, 13.0) * floor(p_63.y)));
    highp vec4 coord_66;
    coord_66 = (tmpvar_65 / 64.0);
    lowp vec2 tmpvar_67;
    tmpvar_67 = texture2DLodEXT (_MainTex, coord_66.xy, coord_66.w).yx;
    rg_64 = tmpvar_67;
    tmpvar_42 = ((sqrt(dot (p_43, p_43)) - _Radius) - (((mix (rg_47.x, rg_47.y, fract(p_46.y)) + (mix (rg_53.x, rg_53.y, fract(p_52.y)) / 2.0)) + (mix (rg_59.x, rg_59.y, fract(p_58.y)) / 4.0)) + (mix (rg_64.x, rg_64.y, fract(p_63.y)) / 8.0)));
    if ((tmpvar_42 <= 0.15)) {
      highp vec3 p_68;
      p_68 = (p_36 - sphere_35.xyz);
      heat_41 = (heat_41 + pow (((((_Radius - sqrt(dot (p_68, p_68))) + 2.5) * fac_39) * _Heat), 3.0));
      fac_39 = (fac_39 * 0.25);
      dens_40 = (dens_40 + 0.4);
      p_36 = (p_36 - d_37);
    } else {
      p_36 = (p_36 - (d_37 * 3.0));
    };
    i_38 = (i_38 + 1);
  };
  highp vec2 tmpvar_69;
  tmpvar_69.x = heat_41;
  tmpvar_69.y = dens_40;
  highp vec4 tmpvar_70;
  tmpvar_70.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_70.x = tmpvar_69.x;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2DLodEXT (_RampTex, tmpvar_70.xy, 0.0);
  col_1.xyz = tmpvar_71.xyz;
  highp float tmpvar_72;
  tmpvar_72 = clamp ((clamp (dens_40, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_72;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 361
#line 365
#line 403
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 361
#line 365
#line 403
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    v += (noise( (p + offset.z)) / 4.0);
    #line 356
    p *= 2.0;
    v += (noise( (p + offset.w)) / 8.0);
    p *= 2.0;
    return v;
}
#line 361
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 378
highp vec2 heat( in highp vec4 sphere, in highp vec3 p, in highp vec3 d ) {
    #line 380
    highp float heat = 0.0;
    highp float dens = 0.0;
    highp float fac = 0.5;
    d *= 0.2;
    #line 384
    highp int i = 0;
    for ( ; (i < 5); (++i)) {
        #line 388
        highp float dis = distf( sphere, p);
        if ((dis <= 0.15)){
            heat += pow( ((((_Radius - distance( p, sphere.xyz)) + 2.5) * fac) * _Heat), 3.0);
            #line 392
            fac *= 0.25;
            dens += 0.4;
            p -= d;
        }
        else{
            #line 398
            p -= (d * 3.0);
        }
    }
    return vec2( heat, dens);
}
#line 365
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    highp float dist;
    highp int i = 0;
    for ( ; (i < 9); (++i)) {
        #line 372
        dist = distf( sphere, p);
        if ((dist < 0.15)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 376
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 403
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp vec2 hd = heat( i.sphere, m.xyz, normalize(i.viewVec));
    #line 407
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( hd.x, 0.0, 0.0, 0.0));
    col.w = xll_saturate_f((xll_saturate_f(hd.y) * _Alpha));
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 tmpvar_16;
    tmpvar_16 = (tmpvar_10 * 2.0);
    vec3 p_17;
    p_17 = (tmpvar_16 + tmpvar_11.z);
    vec4 tmpvar_18;
    tmpvar_18.zw = vec2(0.0, 0.0);
    tmpvar_18.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    vec4 coord_19;
    coord_19 = (tmpvar_18 / 64.0);
    vec2 tmpvar_20;
    tmpvar_20 = texture2DLod (_MainTex, coord_19.xy, coord_19.w).yx;
    vec3 tmpvar_21;
    tmpvar_21 = (tmpvar_16 * 2.0);
    vec3 p_22;
    p_22 = (tmpvar_21 + tmpvar_11.z);
    vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.xy = (p_22.xz + (vec2(37.0, 13.0) * floor(p_22.y)));
    vec4 coord_24;
    coord_24 = (tmpvar_23 / 64.0);
    vec2 tmpvar_25;
    tmpvar_25 = texture2DLod (_MainTex, coord_24.xy, coord_24.w).yx;
    vec3 p_26;
    p_26 = ((tmpvar_21 * 2.0) + tmpvar_11.w);
    vec4 tmpvar_27;
    tmpvar_27.zw = vec2(0.0, 0.0);
    tmpvar_27.xy = (p_26.xz + (vec2(37.0, 13.0) * floor(p_26.y)));
    vec4 coord_28;
    coord_28 = (tmpvar_27 / 64.0);
    vec2 tmpvar_29;
    tmpvar_29 = texture2DLod (_MainTex, coord_28.xy, coord_28.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (((mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_20.x, tmpvar_20.y, fract(p_17.y)) / 2.0)) + (mix (tmpvar_25.x, tmpvar_25.y, fract(p_22.y)) / 4.0)) + (mix (tmpvar_29.x, tmpvar_29.y, fract(p_26.y)) / 8.0)));
    if ((tmpvar_8 < 0.15)) {
      vec4 tmpvar_30;
      tmpvar_30.w = 0.0;
      tmpvar_30.xyz = p_3;
      tmpvar_5 = tmpvar_30;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec3 p_31;
  p_31 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  float edge0_32;
  edge0_32 = (_Radius + 0.5);
  float t_33;
  t_33 = max (min (((sqrt(dot (p_31, p_31)) - edge0_32) / ((_Radius + 1.5) - edge0_32)), 1.0), 0.0);
  vec4 tmpvar_34;
  tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_34.x = (1.0 - ((t_33 * (t_33 * (3.0 - (2.0 * t_33)))) / _Heat));
  col_1.xyz = texture2DLod (_RampTex, tmpvar_34.xy, 0.0).xyz;
  col_1.w = clamp (_Alpha, 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_OFF" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 p_29;
    p_29 = ((tmpvar_23 * 2.0) + tmpvar_11.w);
    highp vec2 rg_30;
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.xy = (p_29.xz + (vec2(37.0, 13.0) * floor(p_29.y)));
    highp vec4 coord_32;
    coord_32 = (tmpvar_31 / 64.0);
    lowp vec2 tmpvar_33;
    tmpvar_33 = texture2DLodEXT (_MainTex, coord_32.xy, coord_32.w).yx;
    rg_30 = tmpvar_33;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_30.x, rg_30.y, fract(p_29.y)) / 8.0)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_34;
      tmpvar_34.w = 0.0;
      tmpvar_34.xyz = p_3;
      tmpvar_5 = tmpvar_34;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_35;
  p_35 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_36;
  edge0_36 = (_Radius + 0.5);
  highp float t_37;
  t_37 = max (min (((sqrt(dot (p_35, p_35)) - edge0_36) / ((_Radius + 1.5) - edge0_36)), 1.0), 0.0);
  highp vec4 tmpvar_38;
  tmpvar_38.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_38.x = (1.0 - ((t_37 * (t_37 * (3.0 - (2.0 * t_37)))) / _Heat));
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DLodEXT (_RampTex, tmpvar_38.xy, 0.0);
  col_1.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_40;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 p_29;
    p_29 = ((tmpvar_23 * 2.0) + tmpvar_11.w);
    highp vec2 rg_30;
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.xy = (p_29.xz + (vec2(37.0, 13.0) * floor(p_29.y)));
    highp vec4 coord_32;
    coord_32 = (tmpvar_31 / 64.0);
    lowp vec2 tmpvar_33;
    tmpvar_33 = texture2DLodEXT (_MainTex, coord_32.xy, coord_32.w).yx;
    rg_30 = tmpvar_33;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_30.x, rg_30.y, fract(p_29.y)) / 8.0)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_34;
      tmpvar_34.w = 0.0;
      tmpvar_34.xyz = p_3;
      tmpvar_5 = tmpvar_34;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_35;
  p_35 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_36;
  edge0_36 = (_Radius + 0.5);
  highp float t_37;
  t_37 = max (min (((sqrt(dot (p_35, p_35)) - edge0_36) / ((_Radius + 1.5) - edge0_36)), 1.0), 0.0);
  highp vec4 tmpvar_38;
  tmpvar_38.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_38.x = (1.0 - ((t_37 * (t_37 * (3.0 - (2.0 * t_37)))) / _Heat));
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DLodEXT (_RampTex, tmpvar_38.xy, 0.0);
  col_1.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_40;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 361
#line 365
#line 403
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 361
#line 365
#line 403
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    v += (noise( (p + offset.z)) / 4.0);
    #line 356
    p *= 2.0;
    v += (noise( (p + offset.w)) / 8.0);
    p *= 2.0;
    return v;
}
#line 361
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 365
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    highp float dist;
    highp int i = 0;
    for ( ; (i < 9); (++i)) {
        #line 372
        dist = distf( sphere, p);
        if ((dist < 0.15)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 376
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 403
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp float heatfac = (smoothstep( (_Radius + 0.5), (_Radius + 1.5), distance( m.xyz, i.sphere.xyz)) / _Heat);
    #line 407
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( (1.0 - heatfac), 0.0, 0.0, 0.0));
    col.w = xll_saturate_f(_Alpha);
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_ON" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 p_10;
    p_10 = ((p_3 * _Frequency) + (_Time * _ScrollSpeed).y);
    vec4 tmpvar_11;
    tmpvar_11.zw = vec2(0.0, 0.0);
    tmpvar_11.xy = (p_10.xz + (vec2(37.0, 13.0) * floor(p_10.y)));
    vec4 coord_12;
    coord_12 = (tmpvar_11 / 64.0);
    vec2 tmpvar_13;
    tmpvar_13 = texture2DLod (_MainTex, coord_12.xy, coord_12.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - mix (tmpvar_13.x, tmpvar_13.y, fract(p_10.y)));
    if ((tmpvar_8 < 0.15)) {
      vec4 tmpvar_14;
      tmpvar_14.w = 0.0;
      tmpvar_14.xyz = p_3;
      tmpvar_5 = tmpvar_14;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec4 sphere_15;
  sphere_15 = xlv_TEXCOORD2;
  vec3 p_16;
  p_16 = tmpvar_5.xyz;
  vec3 d_17;
  int i_18;
  float fac_19;
  float dens_20;
  float heat_21;
  heat_21 = 0.0;
  dens_20 = 0.0;
  fac_19 = 0.5;
  d_17 = (normalize(xlv_TEXCOORD1) * 0.2);
  i_18 = 0;
  for (int i_18 = 0; i_18 < 5; ) {
    float tmpvar_22;
    vec3 p_23;
    p_23 = (p_16 - sphere_15.xyz);
    vec3 p_24;
    p_24 = ((p_16 * _Frequency) + (_Time * _ScrollSpeed).y);
    vec4 tmpvar_25;
    tmpvar_25.zw = vec2(0.0, 0.0);
    tmpvar_25.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    vec4 coord_26;
    coord_26 = (tmpvar_25 / 64.0);
    vec2 tmpvar_27;
    tmpvar_27 = texture2DLod (_MainTex, coord_26.xy, coord_26.w).yx;
    tmpvar_22 = ((sqrt(dot (p_23, p_23)) - _Radius) - mix (tmpvar_27.x, tmpvar_27.y, fract(p_24.y)));
    if ((tmpvar_22 <= 0.15)) {
      vec3 p_28;
      p_28 = (p_16 - sphere_15.xyz);
      heat_21 = (heat_21 + pow (((((_Radius - sqrt(dot (p_28, p_28))) + 2.5) * fac_19) * _Heat), 3.0));
      fac_19 = (fac_19 * 0.25);
      dens_20 = (dens_20 + 0.4);
      p_16 = (p_16 - d_17);
    } else {
      p_16 = (p_16 - (d_17 * 3.0));
    };
    i_18 = (i_18 + 1);
  };
  vec2 tmpvar_29;
  tmpvar_29.x = heat_21;
  tmpvar_29.y = dens_20;
  vec4 tmpvar_30;
  tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_30.x = tmpvar_29.x;
  col_1.xyz = texture2DLod (_RampTex, tmpvar_30.xy, 0.0).xyz;
  col_1.w = clamp ((clamp (dens_20, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_ON" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 p_10;
    p_10 = ((p_3 * _Frequency) + (_Time * _ScrollSpeed).y);
    highp vec2 rg_11;
    highp vec4 tmpvar_12;
    tmpvar_12.zw = vec2(0.0, 0.0);
    tmpvar_12.xy = (p_10.xz + (vec2(37.0, 13.0) * floor(p_10.y)));
    highp vec4 coord_13;
    coord_13 = (tmpvar_12 / 64.0);
    lowp vec2 tmpvar_14;
    tmpvar_14 = texture2DLodEXT (_MainTex, coord_13.xy, coord_13.w).yx;
    rg_11 = tmpvar_14;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - mix (rg_11.x, rg_11.y, fract(p_10.y)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_15;
      tmpvar_15.w = 0.0;
      tmpvar_15.xyz = p_3;
      tmpvar_5 = tmpvar_15;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_16;
  sphere_16 = xlv_TEXCOORD2;
  highp vec3 p_17;
  p_17 = tmpvar_5.xyz;
  highp vec3 d_18;
  int i_19;
  highp float fac_20;
  highp float dens_21;
  highp float heat_22;
  heat_22 = 0.0;
  dens_21 = 0.0;
  fac_20 = 0.5;
  d_18 = (normalize(xlv_TEXCOORD1) * 0.2);
  i_19 = 0;
  for (int i_19 = 0; i_19 < 5; ) {
    highp float tmpvar_23;
    highp vec3 p_24;
    p_24 = (p_17 - sphere_16.xyz);
    highp vec3 p_25;
    p_25 = ((p_17 * _Frequency) + (_Time * _ScrollSpeed).y);
    highp vec2 rg_26;
    highp vec4 tmpvar_27;
    tmpvar_27.zw = vec2(0.0, 0.0);
    tmpvar_27.xy = (p_25.xz + (vec2(37.0, 13.0) * floor(p_25.y)));
    highp vec4 coord_28;
    coord_28 = (tmpvar_27 / 64.0);
    lowp vec2 tmpvar_29;
    tmpvar_29 = texture2DLodEXT (_MainTex, coord_28.xy, coord_28.w).yx;
    rg_26 = tmpvar_29;
    tmpvar_23 = ((sqrt(dot (p_24, p_24)) - _Radius) - mix (rg_26.x, rg_26.y, fract(p_25.y)));
    if ((tmpvar_23 <= 0.15)) {
      highp vec3 p_30;
      p_30 = (p_17 - sphere_16.xyz);
      heat_22 = (heat_22 + pow (((((_Radius - sqrt(dot (p_30, p_30))) + 2.5) * fac_20) * _Heat), 3.0));
      fac_20 = (fac_20 * 0.25);
      dens_21 = (dens_21 + 0.4);
      p_17 = (p_17 - d_18);
    } else {
      p_17 = (p_17 - (d_18 * 3.0));
    };
    i_19 = (i_19 + 1);
  };
  highp vec2 tmpvar_31;
  tmpvar_31.x = heat_22;
  tmpvar_31.y = dens_21;
  highp vec4 tmpvar_32;
  tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_32.x = tmpvar_31.x;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DLodEXT (_RampTex, tmpvar_32.xy, 0.0);
  col_1.xyz = tmpvar_33.xyz;
  highp float tmpvar_34;
  tmpvar_34 = clamp ((clamp (dens_21, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_34;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 p_10;
    p_10 = ((p_3 * _Frequency) + (_Time * _ScrollSpeed).y);
    highp vec2 rg_11;
    highp vec4 tmpvar_12;
    tmpvar_12.zw = vec2(0.0, 0.0);
    tmpvar_12.xy = (p_10.xz + (vec2(37.0, 13.0) * floor(p_10.y)));
    highp vec4 coord_13;
    coord_13 = (tmpvar_12 / 64.0);
    lowp vec2 tmpvar_14;
    tmpvar_14 = texture2DLodEXT (_MainTex, coord_13.xy, coord_13.w).yx;
    rg_11 = tmpvar_14;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - mix (rg_11.x, rg_11.y, fract(p_10.y)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_15;
      tmpvar_15.w = 0.0;
      tmpvar_15.xyz = p_3;
      tmpvar_5 = tmpvar_15;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_16;
  sphere_16 = xlv_TEXCOORD2;
  highp vec3 p_17;
  p_17 = tmpvar_5.xyz;
  highp vec3 d_18;
  int i_19;
  highp float fac_20;
  highp float dens_21;
  highp float heat_22;
  heat_22 = 0.0;
  dens_21 = 0.0;
  fac_20 = 0.5;
  d_18 = (normalize(xlv_TEXCOORD1) * 0.2);
  i_19 = 0;
  for (int i_19 = 0; i_19 < 5; ) {
    highp float tmpvar_23;
    highp vec3 p_24;
    p_24 = (p_17 - sphere_16.xyz);
    highp vec3 p_25;
    p_25 = ((p_17 * _Frequency) + (_Time * _ScrollSpeed).y);
    highp vec2 rg_26;
    highp vec4 tmpvar_27;
    tmpvar_27.zw = vec2(0.0, 0.0);
    tmpvar_27.xy = (p_25.xz + (vec2(37.0, 13.0) * floor(p_25.y)));
    highp vec4 coord_28;
    coord_28 = (tmpvar_27 / 64.0);
    lowp vec2 tmpvar_29;
    tmpvar_29 = texture2DLodEXT (_MainTex, coord_28.xy, coord_28.w).yx;
    rg_26 = tmpvar_29;
    tmpvar_23 = ((sqrt(dot (p_24, p_24)) - _Radius) - mix (rg_26.x, rg_26.y, fract(p_25.y)));
    if ((tmpvar_23 <= 0.15)) {
      highp vec3 p_30;
      p_30 = (p_17 - sphere_16.xyz);
      heat_22 = (heat_22 + pow (((((_Radius - sqrt(dot (p_30, p_30))) + 2.5) * fac_20) * _Heat), 3.0));
      fac_20 = (fac_20 * 0.25);
      dens_21 = (dens_21 + 0.4);
      p_17 = (p_17 - d_18);
    } else {
      p_17 = (p_17 - (d_18 * 3.0));
    };
    i_19 = (i_19 + 1);
  };
  highp vec2 tmpvar_31;
  tmpvar_31.x = heat_22;
  tmpvar_31.y = dens_21;
  highp vec4 tmpvar_32;
  tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_32.x = tmpvar_31.x;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DLodEXT (_RampTex, tmpvar_32.xy, 0.0);
  col_1.xyz = tmpvar_33.xyz;
  highp float tmpvar_34;
  tmpvar_34 = clamp ((clamp (dens_21, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_34;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 396
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 396
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    return v;
}
#line 354
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    #line 356
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 371
highp vec2 heat( in highp vec4 sphere, in highp vec3 p, in highp vec3 d ) {
    #line 373
    highp float heat = 0.0;
    highp float dens = 0.0;
    highp float fac = 0.5;
    d *= 0.2;
    #line 377
    highp int i = 0;
    for ( ; (i < 5); (++i)) {
        #line 381
        highp float dis = distf( sphere, p);
        if ((dis <= 0.15)){
            heat += pow( ((((_Radius - distance( p, sphere.xyz)) + 2.5) * fac) * _Heat), 3.0);
            #line 385
            fac *= 0.25;
            dens += 0.4;
            p -= d;
        }
        else{
            #line 391
            p -= (d * 3.0);
        }
    }
    return vec2( heat, dens);
}
#line 358
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    #line 360
    highp float dist;
    highp int i = 0;
    for ( ; (i < 9); (++i)) {
        #line 365
        dist = distf( sphere, p);
        if ((dist < 0.15)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 369
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 396
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp vec2 hd = heat( i.sphere, m.xyz, normalize(i.viewVec));
    #line 400
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( hd.x, 0.0, 0.0, 0.0));
    col.w = xll_saturate_f((xll_saturate_f(hd.y) * _Alpha));
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 p_10;
    p_10 = ((p_3 * _Frequency) + (_Time * _ScrollSpeed).y);
    vec4 tmpvar_11;
    tmpvar_11.zw = vec2(0.0, 0.0);
    tmpvar_11.xy = (p_10.xz + (vec2(37.0, 13.0) * floor(p_10.y)));
    vec4 coord_12;
    coord_12 = (tmpvar_11 / 64.0);
    vec2 tmpvar_13;
    tmpvar_13 = texture2DLod (_MainTex, coord_12.xy, coord_12.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - mix (tmpvar_13.x, tmpvar_13.y, fract(p_10.y)));
    if ((tmpvar_8 < 0.15)) {
      vec4 tmpvar_14;
      tmpvar_14.w = 0.0;
      tmpvar_14.xyz = p_3;
      tmpvar_5 = tmpvar_14;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec3 p_15;
  p_15 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  float edge0_16;
  edge0_16 = (_Radius + 0.5);
  float t_17;
  t_17 = max (min (((sqrt(dot (p_15, p_15)) - edge0_16) / ((_Radius + 1.5) - edge0_16)), 1.0), 0.0);
  vec4 tmpvar_18;
  tmpvar_18.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_18.x = (1.0 - ((t_17 * (t_17 * (3.0 - (2.0 * t_17)))) / _Heat));
  col_1.xyz = texture2DLod (_RampTex, tmpvar_18.xy, 0.0).xyz;
  col_1.w = clamp (_Alpha, 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_OFF" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 p_10;
    p_10 = ((p_3 * _Frequency) + (_Time * _ScrollSpeed).y);
    highp vec2 rg_11;
    highp vec4 tmpvar_12;
    tmpvar_12.zw = vec2(0.0, 0.0);
    tmpvar_12.xy = (p_10.xz + (vec2(37.0, 13.0) * floor(p_10.y)));
    highp vec4 coord_13;
    coord_13 = (tmpvar_12 / 64.0);
    lowp vec2 tmpvar_14;
    tmpvar_14 = texture2DLodEXT (_MainTex, coord_13.xy, coord_13.w).yx;
    rg_11 = tmpvar_14;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - mix (rg_11.x, rg_11.y, fract(p_10.y)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_15;
      tmpvar_15.w = 0.0;
      tmpvar_15.xyz = p_3;
      tmpvar_5 = tmpvar_15;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_16;
  p_16 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_17;
  edge0_17 = (_Radius + 0.5);
  highp float t_18;
  t_18 = max (min (((sqrt(dot (p_16, p_16)) - edge0_17) / ((_Radius + 1.5) - edge0_17)), 1.0), 0.0);
  highp vec4 tmpvar_19;
  tmpvar_19.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_19.x = (1.0 - ((t_18 * (t_18 * (3.0 - (2.0 * t_18)))) / _Heat));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DLodEXT (_RampTex, tmpvar_19.xy, 0.0);
  col_1.xyz = tmpvar_20.xyz;
  highp float tmpvar_21;
  tmpvar_21 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_21;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 p_10;
    p_10 = ((p_3 * _Frequency) + (_Time * _ScrollSpeed).y);
    highp vec2 rg_11;
    highp vec4 tmpvar_12;
    tmpvar_12.zw = vec2(0.0, 0.0);
    tmpvar_12.xy = (p_10.xz + (vec2(37.0, 13.0) * floor(p_10.y)));
    highp vec4 coord_13;
    coord_13 = (tmpvar_12 / 64.0);
    lowp vec2 tmpvar_14;
    tmpvar_14 = texture2DLodEXT (_MainTex, coord_13.xy, coord_13.w).yx;
    rg_11 = tmpvar_14;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - mix (rg_11.x, rg_11.y, fract(p_10.y)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_15;
      tmpvar_15.w = 0.0;
      tmpvar_15.xyz = p_3;
      tmpvar_5 = tmpvar_15;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_16;
  p_16 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_17;
  edge0_17 = (_Radius + 0.5);
  highp float t_18;
  t_18 = max (min (((sqrt(dot (p_16, p_16)) - edge0_17) / ((_Radius + 1.5) - edge0_17)), 1.0), 0.0);
  highp vec4 tmpvar_19;
  tmpvar_19.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_19.x = (1.0 - ((t_18 * (t_18 * (3.0 - (2.0 * t_18)))) / _Heat));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DLodEXT (_RampTex, tmpvar_19.xy, 0.0);
  col_1.xyz = tmpvar_20.xyz;
  highp float tmpvar_21;
  tmpvar_21 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_21;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 396
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 396
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    return v;
}
#line 354
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    #line 356
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 358
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    #line 360
    highp float dist;
    highp int i = 0;
    for ( ; (i < 9); (++i)) {
        #line 365
        dist = distf( sphere, p);
        if ((dist < 0.15)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 369
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 396
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp float heatfac = (smoothstep( (_Radius + 0.5), (_Radius + 1.5), distance( m.xyz, i.sphere.xyz)) / _Heat);
    #line 400
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( (1.0 - heatfac), 0.0, 0.0, 0.0));
    col.w = xll_saturate_f(_Alpha);
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_ON" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 p_16;
    p_16 = ((tmpvar_10 * 2.0) + tmpvar_11.z);
    vec4 tmpvar_17;
    tmpvar_17.zw = vec2(0.0, 0.0);
    tmpvar_17.xy = (p_16.xz + (vec2(37.0, 13.0) * floor(p_16.y)));
    vec4 coord_18;
    coord_18 = (tmpvar_17 / 64.0);
    vec2 tmpvar_19;
    tmpvar_19 = texture2DLod (_MainTex, coord_18.xy, coord_18.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_19.x, tmpvar_19.y, fract(p_16.y)) / 2.0)));
    if ((tmpvar_8 < 0.15)) {
      vec4 tmpvar_20;
      tmpvar_20.w = 0.0;
      tmpvar_20.xyz = p_3;
      tmpvar_5 = tmpvar_20;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec4 sphere_21;
  sphere_21 = xlv_TEXCOORD2;
  vec3 p_22;
  p_22 = tmpvar_5.xyz;
  vec3 d_23;
  int i_24;
  float fac_25;
  float dens_26;
  float heat_27;
  heat_27 = 0.0;
  dens_26 = 0.0;
  fac_25 = 0.5;
  d_23 = (normalize(xlv_TEXCOORD1) * 0.2);
  i_24 = 0;
  for (int i_24 = 0; i_24 < 5; ) {
    float tmpvar_28;
    vec3 p_29;
    p_29 = (p_22 - sphere_21.xyz);
    vec3 tmpvar_30;
    tmpvar_30 = (p_22 * _Frequency);
    vec4 tmpvar_31;
    tmpvar_31 = (_Time * _ScrollSpeed);
    vec3 p_32;
    p_32 = (tmpvar_30 + tmpvar_31.y);
    vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.xy = (p_32.xz + (vec2(37.0, 13.0) * floor(p_32.y)));
    vec4 coord_34;
    coord_34 = (tmpvar_33 / 64.0);
    vec2 tmpvar_35;
    tmpvar_35 = texture2DLod (_MainTex, coord_34.xy, coord_34.w).yx;
    vec3 p_36;
    p_36 = ((tmpvar_30 * 2.0) + tmpvar_31.z);
    vec4 tmpvar_37;
    tmpvar_37.zw = vec2(0.0, 0.0);
    tmpvar_37.xy = (p_36.xz + (vec2(37.0, 13.0) * floor(p_36.y)));
    vec4 coord_38;
    coord_38 = (tmpvar_37 / 64.0);
    vec2 tmpvar_39;
    tmpvar_39 = texture2DLod (_MainTex, coord_38.xy, coord_38.w).yx;
    tmpvar_28 = ((sqrt(dot (p_29, p_29)) - _Radius) - (mix (tmpvar_35.x, tmpvar_35.y, fract(p_32.y)) + (mix (tmpvar_39.x, tmpvar_39.y, fract(p_36.y)) / 2.0)));
    if ((tmpvar_28 <= 0.15)) {
      vec3 p_40;
      p_40 = (p_22 - sphere_21.xyz);
      heat_27 = (heat_27 + pow (((((_Radius - sqrt(dot (p_40, p_40))) + 2.5) * fac_25) * _Heat), 3.0));
      fac_25 = (fac_25 * 0.25);
      dens_26 = (dens_26 + 0.4);
      p_22 = (p_22 - d_23);
    } else {
      p_22 = (p_22 - (d_23 * 3.0));
    };
    i_24 = (i_24 + 1);
  };
  vec2 tmpvar_41;
  tmpvar_41.x = heat_27;
  tmpvar_41.y = dens_26;
  vec4 tmpvar_42;
  tmpvar_42.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_42.x = tmpvar_41.x;
  col_1.xyz = texture2DLod (_RampTex, tmpvar_42.xy, 0.0).xyz;
  col_1.w = clamp ((clamp (dens_26, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_ON" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 p_17;
    p_17 = ((tmpvar_10 * 2.0) + tmpvar_11.z);
    highp vec2 rg_18;
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    highp vec4 coord_20;
    coord_20 = (tmpvar_19 / 64.0);
    lowp vec2 tmpvar_21;
    tmpvar_21 = texture2DLodEXT (_MainTex, coord_20.xy, coord_20.w).yx;
    rg_18 = tmpvar_21;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_18.x, rg_18.y, fract(p_17.y)) / 2.0)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_22;
      tmpvar_22.w = 0.0;
      tmpvar_22.xyz = p_3;
      tmpvar_5 = tmpvar_22;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_23;
  sphere_23 = xlv_TEXCOORD2;
  highp vec3 p_24;
  p_24 = tmpvar_5.xyz;
  highp vec3 d_25;
  int i_26;
  highp float fac_27;
  highp float dens_28;
  highp float heat_29;
  heat_29 = 0.0;
  dens_28 = 0.0;
  fac_27 = 0.5;
  d_25 = (normalize(xlv_TEXCOORD1) * 0.2);
  i_26 = 0;
  for (int i_26 = 0; i_26 < 5; ) {
    highp float tmpvar_30;
    highp vec3 p_31;
    p_31 = (p_24 - sphere_23.xyz);
    highp vec3 tmpvar_32;
    tmpvar_32 = (p_24 * _Frequency);
    highp vec4 tmpvar_33;
    tmpvar_33 = (_Time * _ScrollSpeed);
    highp vec3 p_34;
    p_34 = (tmpvar_32 + tmpvar_33.y);
    highp vec2 rg_35;
    highp vec4 tmpvar_36;
    tmpvar_36.zw = vec2(0.0, 0.0);
    tmpvar_36.xy = (p_34.xz + (vec2(37.0, 13.0) * floor(p_34.y)));
    highp vec4 coord_37;
    coord_37 = (tmpvar_36 / 64.0);
    lowp vec2 tmpvar_38;
    tmpvar_38 = texture2DLodEXT (_MainTex, coord_37.xy, coord_37.w).yx;
    rg_35 = tmpvar_38;
    highp vec3 p_39;
    p_39 = ((tmpvar_32 * 2.0) + tmpvar_33.z);
    highp vec2 rg_40;
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.xy = (p_39.xz + (vec2(37.0, 13.0) * floor(p_39.y)));
    highp vec4 coord_42;
    coord_42 = (tmpvar_41 / 64.0);
    lowp vec2 tmpvar_43;
    tmpvar_43 = texture2DLodEXT (_MainTex, coord_42.xy, coord_42.w).yx;
    rg_40 = tmpvar_43;
    tmpvar_30 = ((sqrt(dot (p_31, p_31)) - _Radius) - (mix (rg_35.x, rg_35.y, fract(p_34.y)) + (mix (rg_40.x, rg_40.y, fract(p_39.y)) / 2.0)));
    if ((tmpvar_30 <= 0.15)) {
      highp vec3 p_44;
      p_44 = (p_24 - sphere_23.xyz);
      heat_29 = (heat_29 + pow (((((_Radius - sqrt(dot (p_44, p_44))) + 2.5) * fac_27) * _Heat), 3.0));
      fac_27 = (fac_27 * 0.25);
      dens_28 = (dens_28 + 0.4);
      p_24 = (p_24 - d_25);
    } else {
      p_24 = (p_24 - (d_25 * 3.0));
    };
    i_26 = (i_26 + 1);
  };
  highp vec2 tmpvar_45;
  tmpvar_45.x = heat_29;
  tmpvar_45.y = dens_28;
  highp vec4 tmpvar_46;
  tmpvar_46.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_46.x = tmpvar_45.x;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DLodEXT (_RampTex, tmpvar_46.xy, 0.0);
  col_1.xyz = tmpvar_47.xyz;
  highp float tmpvar_48;
  tmpvar_48 = clamp ((clamp (dens_28, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_48;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 p_17;
    p_17 = ((tmpvar_10 * 2.0) + tmpvar_11.z);
    highp vec2 rg_18;
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    highp vec4 coord_20;
    coord_20 = (tmpvar_19 / 64.0);
    lowp vec2 tmpvar_21;
    tmpvar_21 = texture2DLodEXT (_MainTex, coord_20.xy, coord_20.w).yx;
    rg_18 = tmpvar_21;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_18.x, rg_18.y, fract(p_17.y)) / 2.0)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_22;
      tmpvar_22.w = 0.0;
      tmpvar_22.xyz = p_3;
      tmpvar_5 = tmpvar_22;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_23;
  sphere_23 = xlv_TEXCOORD2;
  highp vec3 p_24;
  p_24 = tmpvar_5.xyz;
  highp vec3 d_25;
  int i_26;
  highp float fac_27;
  highp float dens_28;
  highp float heat_29;
  heat_29 = 0.0;
  dens_28 = 0.0;
  fac_27 = 0.5;
  d_25 = (normalize(xlv_TEXCOORD1) * 0.2);
  i_26 = 0;
  for (int i_26 = 0; i_26 < 5; ) {
    highp float tmpvar_30;
    highp vec3 p_31;
    p_31 = (p_24 - sphere_23.xyz);
    highp vec3 tmpvar_32;
    tmpvar_32 = (p_24 * _Frequency);
    highp vec4 tmpvar_33;
    tmpvar_33 = (_Time * _ScrollSpeed);
    highp vec3 p_34;
    p_34 = (tmpvar_32 + tmpvar_33.y);
    highp vec2 rg_35;
    highp vec4 tmpvar_36;
    tmpvar_36.zw = vec2(0.0, 0.0);
    tmpvar_36.xy = (p_34.xz + (vec2(37.0, 13.0) * floor(p_34.y)));
    highp vec4 coord_37;
    coord_37 = (tmpvar_36 / 64.0);
    lowp vec2 tmpvar_38;
    tmpvar_38 = texture2DLodEXT (_MainTex, coord_37.xy, coord_37.w).yx;
    rg_35 = tmpvar_38;
    highp vec3 p_39;
    p_39 = ((tmpvar_32 * 2.0) + tmpvar_33.z);
    highp vec2 rg_40;
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.xy = (p_39.xz + (vec2(37.0, 13.0) * floor(p_39.y)));
    highp vec4 coord_42;
    coord_42 = (tmpvar_41 / 64.0);
    lowp vec2 tmpvar_43;
    tmpvar_43 = texture2DLodEXT (_MainTex, coord_42.xy, coord_42.w).yx;
    rg_40 = tmpvar_43;
    tmpvar_30 = ((sqrt(dot (p_31, p_31)) - _Radius) - (mix (rg_35.x, rg_35.y, fract(p_34.y)) + (mix (rg_40.x, rg_40.y, fract(p_39.y)) / 2.0)));
    if ((tmpvar_30 <= 0.15)) {
      highp vec3 p_44;
      p_44 = (p_24 - sphere_23.xyz);
      heat_29 = (heat_29 + pow (((((_Radius - sqrt(dot (p_44, p_44))) + 2.5) * fac_27) * _Heat), 3.0));
      fac_27 = (fac_27 * 0.25);
      dens_28 = (dens_28 + 0.4);
      p_24 = (p_24 - d_25);
    } else {
      p_24 = (p_24 - (d_25 * 3.0));
    };
    i_26 = (i_26 + 1);
  };
  highp vec2 tmpvar_45;
  tmpvar_45.x = heat_29;
  tmpvar_45.y = dens_28;
  highp vec4 tmpvar_46;
  tmpvar_46.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_46.x = tmpvar_45.x;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DLodEXT (_RampTex, tmpvar_46.xy, 0.0);
  col_1.xyz = tmpvar_47.xyz;
  highp float tmpvar_48;
  tmpvar_48 = clamp ((clamp (dens_28, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_48;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 357
#line 361
#line 399
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 357
#line 361
#line 399
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    return v;
}
#line 357
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 374
highp vec2 heat( in highp vec4 sphere, in highp vec3 p, in highp vec3 d ) {
    #line 376
    highp float heat = 0.0;
    highp float dens = 0.0;
    highp float fac = 0.5;
    d *= 0.2;
    #line 380
    highp int i = 0;
    for ( ; (i < 5); (++i)) {
        #line 384
        highp float dis = distf( sphere, p);
        if ((dis <= 0.15)){
            heat += pow( ((((_Radius - distance( p, sphere.xyz)) + 2.5) * fac) * _Heat), 3.0);
            #line 388
            fac *= 0.25;
            dens += 0.4;
            p -= d;
        }
        else{
            #line 394
            p -= (d * 3.0);
        }
    }
    return vec2( heat, dens);
}
#line 361
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    highp float dist;
    highp int i = 0;
    for ( ; (i < 9); (++i)) {
        #line 368
        dist = distf( sphere, p);
        if ((dist < 0.15)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 372
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 399
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp vec2 hd = heat( i.sphere, m.xyz, normalize(i.viewVec));
    #line 403
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( hd.x, 0.0, 0.0, 0.0));
    col.w = xll_saturate_f((xll_saturate_f(hd.y) * _Alpha));
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 p_16;
    p_16 = ((tmpvar_10 * 2.0) + tmpvar_11.z);
    vec4 tmpvar_17;
    tmpvar_17.zw = vec2(0.0, 0.0);
    tmpvar_17.xy = (p_16.xz + (vec2(37.0, 13.0) * floor(p_16.y)));
    vec4 coord_18;
    coord_18 = (tmpvar_17 / 64.0);
    vec2 tmpvar_19;
    tmpvar_19 = texture2DLod (_MainTex, coord_18.xy, coord_18.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_19.x, tmpvar_19.y, fract(p_16.y)) / 2.0)));
    if ((tmpvar_8 < 0.15)) {
      vec4 tmpvar_20;
      tmpvar_20.w = 0.0;
      tmpvar_20.xyz = p_3;
      tmpvar_5 = tmpvar_20;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec3 p_21;
  p_21 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  float edge0_22;
  edge0_22 = (_Radius + 0.5);
  float t_23;
  t_23 = max (min (((sqrt(dot (p_21, p_21)) - edge0_22) / ((_Radius + 1.5) - edge0_22)), 1.0), 0.0);
  vec4 tmpvar_24;
  tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_24.x = (1.0 - ((t_23 * (t_23 * (3.0 - (2.0 * t_23)))) / _Heat));
  col_1.xyz = texture2DLod (_RampTex, tmpvar_24.xy, 0.0).xyz;
  col_1.w = clamp (_Alpha, 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_OFF" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 p_17;
    p_17 = ((tmpvar_10 * 2.0) + tmpvar_11.z);
    highp vec2 rg_18;
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    highp vec4 coord_20;
    coord_20 = (tmpvar_19 / 64.0);
    lowp vec2 tmpvar_21;
    tmpvar_21 = texture2DLodEXT (_MainTex, coord_20.xy, coord_20.w).yx;
    rg_18 = tmpvar_21;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_18.x, rg_18.y, fract(p_17.y)) / 2.0)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_22;
      tmpvar_22.w = 0.0;
      tmpvar_22.xyz = p_3;
      tmpvar_5 = tmpvar_22;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_23;
  p_23 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_24;
  edge0_24 = (_Radius + 0.5);
  highp float t_25;
  t_25 = max (min (((sqrt(dot (p_23, p_23)) - edge0_24) / ((_Radius + 1.5) - edge0_24)), 1.0), 0.0);
  highp vec4 tmpvar_26;
  tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_26.x = (1.0 - ((t_25 * (t_25 * (3.0 - (2.0 * t_25)))) / _Heat));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DLodEXT (_RampTex, tmpvar_26.xy, 0.0);
  col_1.xyz = tmpvar_27.xyz;
  highp float tmpvar_28;
  tmpvar_28 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_28;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 p_17;
    p_17 = ((tmpvar_10 * 2.0) + tmpvar_11.z);
    highp vec2 rg_18;
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    highp vec4 coord_20;
    coord_20 = (tmpvar_19 / 64.0);
    lowp vec2 tmpvar_21;
    tmpvar_21 = texture2DLodEXT (_MainTex, coord_20.xy, coord_20.w).yx;
    rg_18 = tmpvar_21;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_18.x, rg_18.y, fract(p_17.y)) / 2.0)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_22;
      tmpvar_22.w = 0.0;
      tmpvar_22.xyz = p_3;
      tmpvar_5 = tmpvar_22;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_23;
  p_23 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_24;
  edge0_24 = (_Radius + 0.5);
  highp float t_25;
  t_25 = max (min (((sqrt(dot (p_23, p_23)) - edge0_24) / ((_Radius + 1.5) - edge0_24)), 1.0), 0.0);
  highp vec4 tmpvar_26;
  tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_26.x = (1.0 - ((t_25 * (t_25 * (3.0 - (2.0 * t_25)))) / _Heat));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DLodEXT (_RampTex, tmpvar_26.xy, 0.0);
  col_1.xyz = tmpvar_27.xyz;
  highp float tmpvar_28;
  tmpvar_28 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_28;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 357
#line 361
#line 399
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 357
#line 361
#line 399
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    return v;
}
#line 357
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 361
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    highp float dist;
    highp int i = 0;
    for ( ; (i < 9); (++i)) {
        #line 368
        dist = distf( sphere, p);
        if ((dist < 0.15)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 372
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 399
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp float heatfac = (smoothstep( (_Radius + 0.5), (_Radius + 1.5), distance( m.xyz, i.sphere.xyz)) / _Heat);
    #line 403
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( (1.0 - heatfac), 0.0, 0.0, 0.0));
    col.w = xll_saturate_f(_Alpha);
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_ON" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 tmpvar_16;
    tmpvar_16 = (tmpvar_10 * 2.0);
    vec3 p_17;
    p_17 = (tmpvar_16 + tmpvar_11.z);
    vec4 tmpvar_18;
    tmpvar_18.zw = vec2(0.0, 0.0);
    tmpvar_18.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    vec4 coord_19;
    coord_19 = (tmpvar_18 / 64.0);
    vec2 tmpvar_20;
    tmpvar_20 = texture2DLod (_MainTex, coord_19.xy, coord_19.w).yx;
    vec3 p_21;
    p_21 = ((tmpvar_16 * 2.0) + tmpvar_11.z);
    vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.xy = (p_21.xz + (vec2(37.0, 13.0) * floor(p_21.y)));
    vec4 coord_23;
    coord_23 = (tmpvar_22 / 64.0);
    vec2 tmpvar_24;
    tmpvar_24 = texture2DLod (_MainTex, coord_23.xy, coord_23.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_20.x, tmpvar_20.y, fract(p_17.y)) / 2.0)) + (mix (tmpvar_24.x, tmpvar_24.y, fract(p_21.y)) / 4.0)));
    if ((tmpvar_8 < 0.15)) {
      vec4 tmpvar_25;
      tmpvar_25.w = 0.0;
      tmpvar_25.xyz = p_3;
      tmpvar_5 = tmpvar_25;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec4 sphere_26;
  sphere_26 = xlv_TEXCOORD2;
  vec3 p_27;
  p_27 = tmpvar_5.xyz;
  vec3 d_28;
  int i_29;
  float fac_30;
  float dens_31;
  float heat_32;
  heat_32 = 0.0;
  dens_31 = 0.0;
  fac_30 = 0.5;
  d_28 = (normalize(xlv_TEXCOORD1) * 0.2);
  i_29 = 0;
  for (int i_29 = 0; i_29 < 5; ) {
    float tmpvar_33;
    vec3 p_34;
    p_34 = (p_27 - sphere_26.xyz);
    vec3 tmpvar_35;
    tmpvar_35 = (p_27 * _Frequency);
    vec4 tmpvar_36;
    tmpvar_36 = (_Time * _ScrollSpeed);
    vec3 p_37;
    p_37 = (tmpvar_35 + tmpvar_36.y);
    vec4 tmpvar_38;
    tmpvar_38.zw = vec2(0.0, 0.0);
    tmpvar_38.xy = (p_37.xz + (vec2(37.0, 13.0) * floor(p_37.y)));
    vec4 coord_39;
    coord_39 = (tmpvar_38 / 64.0);
    vec2 tmpvar_40;
    tmpvar_40 = texture2DLod (_MainTex, coord_39.xy, coord_39.w).yx;
    vec3 tmpvar_41;
    tmpvar_41 = (tmpvar_35 * 2.0);
    vec3 p_42;
    p_42 = (tmpvar_41 + tmpvar_36.z);
    vec4 tmpvar_43;
    tmpvar_43.zw = vec2(0.0, 0.0);
    tmpvar_43.xy = (p_42.xz + (vec2(37.0, 13.0) * floor(p_42.y)));
    vec4 coord_44;
    coord_44 = (tmpvar_43 / 64.0);
    vec2 tmpvar_45;
    tmpvar_45 = texture2DLod (_MainTex, coord_44.xy, coord_44.w).yx;
    vec3 p_46;
    p_46 = ((tmpvar_41 * 2.0) + tmpvar_36.z);
    vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.xy = (p_46.xz + (vec2(37.0, 13.0) * floor(p_46.y)));
    vec4 coord_48;
    coord_48 = (tmpvar_47 / 64.0);
    vec2 tmpvar_49;
    tmpvar_49 = texture2DLod (_MainTex, coord_48.xy, coord_48.w).yx;
    tmpvar_33 = ((sqrt(dot (p_34, p_34)) - _Radius) - ((mix (tmpvar_40.x, tmpvar_40.y, fract(p_37.y)) + (mix (tmpvar_45.x, tmpvar_45.y, fract(p_42.y)) / 2.0)) + (mix (tmpvar_49.x, tmpvar_49.y, fract(p_46.y)) / 4.0)));
    if ((tmpvar_33 <= 0.15)) {
      vec3 p_50;
      p_50 = (p_27 - sphere_26.xyz);
      heat_32 = (heat_32 + pow (((((_Radius - sqrt(dot (p_50, p_50))) + 2.5) * fac_30) * _Heat), 3.0));
      fac_30 = (fac_30 * 0.25);
      dens_31 = (dens_31 + 0.4);
      p_27 = (p_27 - d_28);
    } else {
      p_27 = (p_27 - (d_28 * 3.0));
    };
    i_29 = (i_29 + 1);
  };
  vec2 tmpvar_51;
  tmpvar_51.x = heat_32;
  tmpvar_51.y = dens_31;
  vec4 tmpvar_52;
  tmpvar_52.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_52.x = tmpvar_51.x;
  col_1.xyz = texture2DLod (_RampTex, tmpvar_52.xy, 0.0).xyz;
  col_1.w = clamp ((clamp (dens_31, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_ON" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 p_23;
    p_23 = ((tmpvar_17 * 2.0) + tmpvar_11.z);
    highp vec2 rg_24;
    highp vec4 tmpvar_25;
    tmpvar_25.zw = vec2(0.0, 0.0);
    tmpvar_25.xy = (p_23.xz + (vec2(37.0, 13.0) * floor(p_23.y)));
    highp vec4 coord_26;
    coord_26 = (tmpvar_25 / 64.0);
    lowp vec2 tmpvar_27;
    tmpvar_27 = texture2DLodEXT (_MainTex, coord_26.xy, coord_26.w).yx;
    rg_24 = tmpvar_27;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_24.x, rg_24.y, fract(p_23.y)) / 4.0)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_28;
      tmpvar_28.w = 0.0;
      tmpvar_28.xyz = p_3;
      tmpvar_5 = tmpvar_28;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_29;
  sphere_29 = xlv_TEXCOORD2;
  highp vec3 p_30;
  p_30 = tmpvar_5.xyz;
  highp vec3 d_31;
  int i_32;
  highp float fac_33;
  highp float dens_34;
  highp float heat_35;
  heat_35 = 0.0;
  dens_34 = 0.0;
  fac_33 = 0.5;
  d_31 = (normalize(xlv_TEXCOORD1) * 0.2);
  i_32 = 0;
  for (int i_32 = 0; i_32 < 5; ) {
    highp float tmpvar_36;
    highp vec3 p_37;
    p_37 = (p_30 - sphere_29.xyz);
    highp vec3 tmpvar_38;
    tmpvar_38 = (p_30 * _Frequency);
    highp vec4 tmpvar_39;
    tmpvar_39 = (_Time * _ScrollSpeed);
    highp vec3 p_40;
    p_40 = (tmpvar_38 + tmpvar_39.y);
    highp vec2 rg_41;
    highp vec4 tmpvar_42;
    tmpvar_42.zw = vec2(0.0, 0.0);
    tmpvar_42.xy = (p_40.xz + (vec2(37.0, 13.0) * floor(p_40.y)));
    highp vec4 coord_43;
    coord_43 = (tmpvar_42 / 64.0);
    lowp vec2 tmpvar_44;
    tmpvar_44 = texture2DLodEXT (_MainTex, coord_43.xy, coord_43.w).yx;
    rg_41 = tmpvar_44;
    highp vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_38 * 2.0);
    highp vec3 p_46;
    p_46 = (tmpvar_45 + tmpvar_39.z);
    highp vec2 rg_47;
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.xy = (p_46.xz + (vec2(37.0, 13.0) * floor(p_46.y)));
    highp vec4 coord_49;
    coord_49 = (tmpvar_48 / 64.0);
    lowp vec2 tmpvar_50;
    tmpvar_50 = texture2DLodEXT (_MainTex, coord_49.xy, coord_49.w).yx;
    rg_47 = tmpvar_50;
    highp vec3 p_51;
    p_51 = ((tmpvar_45 * 2.0) + tmpvar_39.z);
    highp vec2 rg_52;
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.xy = (p_51.xz + (vec2(37.0, 13.0) * floor(p_51.y)));
    highp vec4 coord_54;
    coord_54 = (tmpvar_53 / 64.0);
    lowp vec2 tmpvar_55;
    tmpvar_55 = texture2DLodEXT (_MainTex, coord_54.xy, coord_54.w).yx;
    rg_52 = tmpvar_55;
    tmpvar_36 = ((sqrt(dot (p_37, p_37)) - _Radius) - ((mix (rg_41.x, rg_41.y, fract(p_40.y)) + (mix (rg_47.x, rg_47.y, fract(p_46.y)) / 2.0)) + (mix (rg_52.x, rg_52.y, fract(p_51.y)) / 4.0)));
    if ((tmpvar_36 <= 0.15)) {
      highp vec3 p_56;
      p_56 = (p_30 - sphere_29.xyz);
      heat_35 = (heat_35 + pow (((((_Radius - sqrt(dot (p_56, p_56))) + 2.5) * fac_33) * _Heat), 3.0));
      fac_33 = (fac_33 * 0.25);
      dens_34 = (dens_34 + 0.4);
      p_30 = (p_30 - d_31);
    } else {
      p_30 = (p_30 - (d_31 * 3.0));
    };
    i_32 = (i_32 + 1);
  };
  highp vec2 tmpvar_57;
  tmpvar_57.x = heat_35;
  tmpvar_57.y = dens_34;
  highp vec4 tmpvar_58;
  tmpvar_58.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_58.x = tmpvar_57.x;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DLodEXT (_RampTex, tmpvar_58.xy, 0.0);
  col_1.xyz = tmpvar_59.xyz;
  highp float tmpvar_60;
  tmpvar_60 = clamp ((clamp (dens_34, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_60;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 p_23;
    p_23 = ((tmpvar_17 * 2.0) + tmpvar_11.z);
    highp vec2 rg_24;
    highp vec4 tmpvar_25;
    tmpvar_25.zw = vec2(0.0, 0.0);
    tmpvar_25.xy = (p_23.xz + (vec2(37.0, 13.0) * floor(p_23.y)));
    highp vec4 coord_26;
    coord_26 = (tmpvar_25 / 64.0);
    lowp vec2 tmpvar_27;
    tmpvar_27 = texture2DLodEXT (_MainTex, coord_26.xy, coord_26.w).yx;
    rg_24 = tmpvar_27;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_24.x, rg_24.y, fract(p_23.y)) / 4.0)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_28;
      tmpvar_28.w = 0.0;
      tmpvar_28.xyz = p_3;
      tmpvar_5 = tmpvar_28;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_29;
  sphere_29 = xlv_TEXCOORD2;
  highp vec3 p_30;
  p_30 = tmpvar_5.xyz;
  highp vec3 d_31;
  int i_32;
  highp float fac_33;
  highp float dens_34;
  highp float heat_35;
  heat_35 = 0.0;
  dens_34 = 0.0;
  fac_33 = 0.5;
  d_31 = (normalize(xlv_TEXCOORD1) * 0.2);
  i_32 = 0;
  for (int i_32 = 0; i_32 < 5; ) {
    highp float tmpvar_36;
    highp vec3 p_37;
    p_37 = (p_30 - sphere_29.xyz);
    highp vec3 tmpvar_38;
    tmpvar_38 = (p_30 * _Frequency);
    highp vec4 tmpvar_39;
    tmpvar_39 = (_Time * _ScrollSpeed);
    highp vec3 p_40;
    p_40 = (tmpvar_38 + tmpvar_39.y);
    highp vec2 rg_41;
    highp vec4 tmpvar_42;
    tmpvar_42.zw = vec2(0.0, 0.0);
    tmpvar_42.xy = (p_40.xz + (vec2(37.0, 13.0) * floor(p_40.y)));
    highp vec4 coord_43;
    coord_43 = (tmpvar_42 / 64.0);
    lowp vec2 tmpvar_44;
    tmpvar_44 = texture2DLodEXT (_MainTex, coord_43.xy, coord_43.w).yx;
    rg_41 = tmpvar_44;
    highp vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_38 * 2.0);
    highp vec3 p_46;
    p_46 = (tmpvar_45 + tmpvar_39.z);
    highp vec2 rg_47;
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.xy = (p_46.xz + (vec2(37.0, 13.0) * floor(p_46.y)));
    highp vec4 coord_49;
    coord_49 = (tmpvar_48 / 64.0);
    lowp vec2 tmpvar_50;
    tmpvar_50 = texture2DLodEXT (_MainTex, coord_49.xy, coord_49.w).yx;
    rg_47 = tmpvar_50;
    highp vec3 p_51;
    p_51 = ((tmpvar_45 * 2.0) + tmpvar_39.z);
    highp vec2 rg_52;
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.xy = (p_51.xz + (vec2(37.0, 13.0) * floor(p_51.y)));
    highp vec4 coord_54;
    coord_54 = (tmpvar_53 / 64.0);
    lowp vec2 tmpvar_55;
    tmpvar_55 = texture2DLodEXT (_MainTex, coord_54.xy, coord_54.w).yx;
    rg_52 = tmpvar_55;
    tmpvar_36 = ((sqrt(dot (p_37, p_37)) - _Radius) - ((mix (rg_41.x, rg_41.y, fract(p_40.y)) + (mix (rg_47.x, rg_47.y, fract(p_46.y)) / 2.0)) + (mix (rg_52.x, rg_52.y, fract(p_51.y)) / 4.0)));
    if ((tmpvar_36 <= 0.15)) {
      highp vec3 p_56;
      p_56 = (p_30 - sphere_29.xyz);
      heat_35 = (heat_35 + pow (((((_Radius - sqrt(dot (p_56, p_56))) + 2.5) * fac_33) * _Heat), 3.0));
      fac_33 = (fac_33 * 0.25);
      dens_34 = (dens_34 + 0.4);
      p_30 = (p_30 - d_31);
    } else {
      p_30 = (p_30 - (d_31 * 3.0));
    };
    i_32 = (i_32 + 1);
  };
  highp vec2 tmpvar_57;
  tmpvar_57.x = heat_35;
  tmpvar_57.y = dens_34;
  highp vec4 tmpvar_58;
  tmpvar_58.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_58.x = tmpvar_57.x;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DLodEXT (_RampTex, tmpvar_58.xy, 0.0);
  col_1.xyz = tmpvar_59.xyz;
  highp float tmpvar_60;
  tmpvar_60 = clamp ((clamp (dens_34, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_60;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 401
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 401
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    v += (noise( (p + offset.z)) / 4.0);
    #line 356
    p *= 2.0;
    return v;
}
#line 359
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    #line 361
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 376
highp vec2 heat( in highp vec4 sphere, in highp vec3 p, in highp vec3 d ) {
    #line 378
    highp float heat = 0.0;
    highp float dens = 0.0;
    highp float fac = 0.5;
    d *= 0.2;
    #line 382
    highp int i = 0;
    for ( ; (i < 5); (++i)) {
        #line 386
        highp float dis = distf( sphere, p);
        if ((dis <= 0.15)){
            heat += pow( ((((_Radius - distance( p, sphere.xyz)) + 2.5) * fac) * _Heat), 3.0);
            #line 390
            fac *= 0.25;
            dens += 0.4;
            p -= d;
        }
        else{
            #line 396
            p -= (d * 3.0);
        }
    }
    return vec2( heat, dens);
}
#line 363
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    #line 365
    highp float dist;
    highp int i = 0;
    for ( ; (i < 9); (++i)) {
        #line 370
        dist = distf( sphere, p);
        if ((dist < 0.15)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 374
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 401
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp vec2 hd = heat( i.sphere, m.xyz, normalize(i.viewVec));
    #line 405
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( hd.x, 0.0, 0.0, 0.0));
    col.w = xll_saturate_f((xll_saturate_f(hd.y) * _Alpha));
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 tmpvar_16;
    tmpvar_16 = (tmpvar_10 * 2.0);
    vec3 p_17;
    p_17 = (tmpvar_16 + tmpvar_11.z);
    vec4 tmpvar_18;
    tmpvar_18.zw = vec2(0.0, 0.0);
    tmpvar_18.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    vec4 coord_19;
    coord_19 = (tmpvar_18 / 64.0);
    vec2 tmpvar_20;
    tmpvar_20 = texture2DLod (_MainTex, coord_19.xy, coord_19.w).yx;
    vec3 p_21;
    p_21 = ((tmpvar_16 * 2.0) + tmpvar_11.z);
    vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.xy = (p_21.xz + (vec2(37.0, 13.0) * floor(p_21.y)));
    vec4 coord_23;
    coord_23 = (tmpvar_22 / 64.0);
    vec2 tmpvar_24;
    tmpvar_24 = texture2DLod (_MainTex, coord_23.xy, coord_23.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_20.x, tmpvar_20.y, fract(p_17.y)) / 2.0)) + (mix (tmpvar_24.x, tmpvar_24.y, fract(p_21.y)) / 4.0)));
    if ((tmpvar_8 < 0.15)) {
      vec4 tmpvar_25;
      tmpvar_25.w = 0.0;
      tmpvar_25.xyz = p_3;
      tmpvar_5 = tmpvar_25;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec3 p_26;
  p_26 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  float edge0_27;
  edge0_27 = (_Radius + 0.5);
  float t_28;
  t_28 = max (min (((sqrt(dot (p_26, p_26)) - edge0_27) / ((_Radius + 1.5) - edge0_27)), 1.0), 0.0);
  vec4 tmpvar_29;
  tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_29.x = (1.0 - ((t_28 * (t_28 * (3.0 - (2.0 * t_28)))) / _Heat));
  col_1.xyz = texture2DLod (_RampTex, tmpvar_29.xy, 0.0).xyz;
  col_1.w = clamp (_Alpha, 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_OFF" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 p_23;
    p_23 = ((tmpvar_17 * 2.0) + tmpvar_11.z);
    highp vec2 rg_24;
    highp vec4 tmpvar_25;
    tmpvar_25.zw = vec2(0.0, 0.0);
    tmpvar_25.xy = (p_23.xz + (vec2(37.0, 13.0) * floor(p_23.y)));
    highp vec4 coord_26;
    coord_26 = (tmpvar_25 / 64.0);
    lowp vec2 tmpvar_27;
    tmpvar_27 = texture2DLodEXT (_MainTex, coord_26.xy, coord_26.w).yx;
    rg_24 = tmpvar_27;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_24.x, rg_24.y, fract(p_23.y)) / 4.0)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_28;
      tmpvar_28.w = 0.0;
      tmpvar_28.xyz = p_3;
      tmpvar_5 = tmpvar_28;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_29;
  p_29 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_30;
  edge0_30 = (_Radius + 0.5);
  highp float t_31;
  t_31 = max (min (((sqrt(dot (p_29, p_29)) - edge0_30) / ((_Radius + 1.5) - edge0_30)), 1.0), 0.0);
  highp vec4 tmpvar_32;
  tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_32.x = (1.0 - ((t_31 * (t_31 * (3.0 - (2.0 * t_31)))) / _Heat));
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DLodEXT (_RampTex, tmpvar_32.xy, 0.0);
  col_1.xyz = tmpvar_33.xyz;
  highp float tmpvar_34;
  tmpvar_34 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_34;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 p_23;
    p_23 = ((tmpvar_17 * 2.0) + tmpvar_11.z);
    highp vec2 rg_24;
    highp vec4 tmpvar_25;
    tmpvar_25.zw = vec2(0.0, 0.0);
    tmpvar_25.xy = (p_23.xz + (vec2(37.0, 13.0) * floor(p_23.y)));
    highp vec4 coord_26;
    coord_26 = (tmpvar_25 / 64.0);
    lowp vec2 tmpvar_27;
    tmpvar_27 = texture2DLodEXT (_MainTex, coord_26.xy, coord_26.w).yx;
    rg_24 = tmpvar_27;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_24.x, rg_24.y, fract(p_23.y)) / 4.0)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_28;
      tmpvar_28.w = 0.0;
      tmpvar_28.xyz = p_3;
      tmpvar_5 = tmpvar_28;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_29;
  p_29 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_30;
  edge0_30 = (_Radius + 0.5);
  highp float t_31;
  t_31 = max (min (((sqrt(dot (p_29, p_29)) - edge0_30) / ((_Radius + 1.5) - edge0_30)), 1.0), 0.0);
  highp vec4 tmpvar_32;
  tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_32.x = (1.0 - ((t_31 * (t_31 * (3.0 - (2.0 * t_31)))) / _Heat));
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DLodEXT (_RampTex, tmpvar_32.xy, 0.0);
  col_1.xyz = tmpvar_33.xyz;
  highp float tmpvar_34;
  tmpvar_34 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_34;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 401
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 401
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    v += (noise( (p + offset.z)) / 4.0);
    #line 356
    p *= 2.0;
    return v;
}
#line 359
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    #line 361
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 363
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    #line 365
    highp float dist;
    highp int i = 0;
    for ( ; (i < 9); (++i)) {
        #line 370
        dist = distf( sphere, p);
        if ((dist < 0.15)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 374
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 401
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp float heatfac = (smoothstep( (_Radius + 0.5), (_Radius + 1.5), distance( m.xyz, i.sphere.xyz)) / _Heat);
    #line 405
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( (1.0 - heatfac), 0.0, 0.0, 0.0));
    col.w = xll_saturate_f(_Alpha);
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_ON" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 tmpvar_16;
    tmpvar_16 = (tmpvar_10 * 2.0);
    vec3 p_17;
    p_17 = (tmpvar_16 + tmpvar_11.z);
    vec4 tmpvar_18;
    tmpvar_18.zw = vec2(0.0, 0.0);
    tmpvar_18.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    vec4 coord_19;
    coord_19 = (tmpvar_18 / 64.0);
    vec2 tmpvar_20;
    tmpvar_20 = texture2DLod (_MainTex, coord_19.xy, coord_19.w).yx;
    vec3 tmpvar_21;
    tmpvar_21 = (tmpvar_16 * 2.0);
    vec3 p_22;
    p_22 = (tmpvar_21 + tmpvar_11.z);
    vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.xy = (p_22.xz + (vec2(37.0, 13.0) * floor(p_22.y)));
    vec4 coord_24;
    coord_24 = (tmpvar_23 / 64.0);
    vec2 tmpvar_25;
    tmpvar_25 = texture2DLod (_MainTex, coord_24.xy, coord_24.w).yx;
    vec3 tmpvar_26;
    tmpvar_26 = (tmpvar_21 * 2.0);
    vec3 p_27;
    p_27 = (tmpvar_26 + tmpvar_11.w);
    vec4 tmpvar_28;
    tmpvar_28.zw = vec2(0.0, 0.0);
    tmpvar_28.xy = (p_27.xz + (vec2(37.0, 13.0) * floor(p_27.y)));
    vec4 coord_29;
    coord_29 = (tmpvar_28 / 64.0);
    vec2 tmpvar_30;
    tmpvar_30 = texture2DLod (_MainTex, coord_29.xy, coord_29.w).yx;
    vec3 p_31;
    p_31 = ((tmpvar_26 * 2.0) + tmpvar_11.w);
    vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.xy = (p_31.xz + (vec2(37.0, 13.0) * floor(p_31.y)));
    vec4 coord_33;
    coord_33 = (tmpvar_32 / 64.0);
    vec2 tmpvar_34;
    tmpvar_34 = texture2DLod (_MainTex, coord_33.xy, coord_33.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((((mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_20.x, tmpvar_20.y, fract(p_17.y)) / 2.0)) + (mix (tmpvar_25.x, tmpvar_25.y, fract(p_22.y)) / 4.0)) + (mix (tmpvar_30.x, tmpvar_30.y, fract(p_27.y)) / 8.0)) + (mix (tmpvar_34.x, tmpvar_34.y, fract(p_31.y)) / 16.0)));
    if ((tmpvar_8 < 0.15)) {
      vec4 tmpvar_35;
      tmpvar_35.w = 0.0;
      tmpvar_35.xyz = p_3;
      tmpvar_5 = tmpvar_35;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec4 sphere_36;
  sphere_36 = xlv_TEXCOORD2;
  vec3 p_37;
  p_37 = tmpvar_5.xyz;
  vec3 d_38;
  int i_39;
  float fac_40;
  float dens_41;
  float heat_42;
  heat_42 = 0.0;
  dens_41 = 0.0;
  fac_40 = 0.5;
  d_38 = (normalize(xlv_TEXCOORD1) * 0.2);
  i_39 = 0;
  for (int i_39 = 0; i_39 < 5; ) {
    float tmpvar_43;
    vec3 p_44;
    p_44 = (p_37 - sphere_36.xyz);
    vec3 tmpvar_45;
    tmpvar_45 = (p_37 * _Frequency);
    vec4 tmpvar_46;
    tmpvar_46 = (_Time * _ScrollSpeed);
    vec3 p_47;
    p_47 = (tmpvar_45 + tmpvar_46.y);
    vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.xy = (p_47.xz + (vec2(37.0, 13.0) * floor(p_47.y)));
    vec4 coord_49;
    coord_49 = (tmpvar_48 / 64.0);
    vec2 tmpvar_50;
    tmpvar_50 = texture2DLod (_MainTex, coord_49.xy, coord_49.w).yx;
    vec3 tmpvar_51;
    tmpvar_51 = (tmpvar_45 * 2.0);
    vec3 p_52;
    p_52 = (tmpvar_51 + tmpvar_46.z);
    vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.xy = (p_52.xz + (vec2(37.0, 13.0) * floor(p_52.y)));
    vec4 coord_54;
    coord_54 = (tmpvar_53 / 64.0);
    vec2 tmpvar_55;
    tmpvar_55 = texture2DLod (_MainTex, coord_54.xy, coord_54.w).yx;
    vec3 tmpvar_56;
    tmpvar_56 = (tmpvar_51 * 2.0);
    vec3 p_57;
    p_57 = (tmpvar_56 + tmpvar_46.z);
    vec4 tmpvar_58;
    tmpvar_58.zw = vec2(0.0, 0.0);
    tmpvar_58.xy = (p_57.xz + (vec2(37.0, 13.0) * floor(p_57.y)));
    vec4 coord_59;
    coord_59 = (tmpvar_58 / 64.0);
    vec2 tmpvar_60;
    tmpvar_60 = texture2DLod (_MainTex, coord_59.xy, coord_59.w).yx;
    vec3 tmpvar_61;
    tmpvar_61 = (tmpvar_56 * 2.0);
    vec3 p_62;
    p_62 = (tmpvar_61 + tmpvar_46.w);
    vec4 tmpvar_63;
    tmpvar_63.zw = vec2(0.0, 0.0);
    tmpvar_63.xy = (p_62.xz + (vec2(37.0, 13.0) * floor(p_62.y)));
    vec4 coord_64;
    coord_64 = (tmpvar_63 / 64.0);
    vec2 tmpvar_65;
    tmpvar_65 = texture2DLod (_MainTex, coord_64.xy, coord_64.w).yx;
    vec3 p_66;
    p_66 = ((tmpvar_61 * 2.0) + tmpvar_46.w);
    vec4 tmpvar_67;
    tmpvar_67.zw = vec2(0.0, 0.0);
    tmpvar_67.xy = (p_66.xz + (vec2(37.0, 13.0) * floor(p_66.y)));
    vec4 coord_68;
    coord_68 = (tmpvar_67 / 64.0);
    vec2 tmpvar_69;
    tmpvar_69 = texture2DLod (_MainTex, coord_68.xy, coord_68.w).yx;
    tmpvar_43 = ((sqrt(dot (p_44, p_44)) - _Radius) - ((((mix (tmpvar_50.x, tmpvar_50.y, fract(p_47.y)) + (mix (tmpvar_55.x, tmpvar_55.y, fract(p_52.y)) / 2.0)) + (mix (tmpvar_60.x, tmpvar_60.y, fract(p_57.y)) / 4.0)) + (mix (tmpvar_65.x, tmpvar_65.y, fract(p_62.y)) / 8.0)) + (mix (tmpvar_69.x, tmpvar_69.y, fract(p_66.y)) / 16.0)));
    if ((tmpvar_43 <= 0.15)) {
      vec3 p_70;
      p_70 = (p_37 - sphere_36.xyz);
      heat_42 = (heat_42 + pow (((((_Radius - sqrt(dot (p_70, p_70))) + 2.5) * fac_40) * _Heat), 3.0));
      fac_40 = (fac_40 * 0.25);
      dens_41 = (dens_41 + 0.4);
      p_37 = (p_37 - d_38);
    } else {
      p_37 = (p_37 - (d_38 * 3.0));
    };
    i_39 = (i_39 + 1);
  };
  vec2 tmpvar_71;
  tmpvar_71.x = heat_42;
  tmpvar_71.y = dens_41;
  vec4 tmpvar_72;
  tmpvar_72.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_72.x = tmpvar_71.x;
  col_1.xyz = texture2DLod (_RampTex, tmpvar_72.xy, 0.0).xyz;
  col_1.w = clamp ((clamp (dens_41, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_ON" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = (tmpvar_23 * 2.0);
    highp vec3 p_30;
    p_30 = (tmpvar_29 + tmpvar_11.w);
    highp vec2 rg_31;
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.xy = (p_30.xz + (vec2(37.0, 13.0) * floor(p_30.y)));
    highp vec4 coord_33;
    coord_33 = (tmpvar_32 / 64.0);
    lowp vec2 tmpvar_34;
    tmpvar_34 = texture2DLodEXT (_MainTex, coord_33.xy, coord_33.w).yx;
    rg_31 = tmpvar_34;
    highp vec3 p_35;
    p_35 = ((tmpvar_29 * 2.0) + tmpvar_11.w);
    highp vec2 rg_36;
    highp vec4 tmpvar_37;
    tmpvar_37.zw = vec2(0.0, 0.0);
    tmpvar_37.xy = (p_35.xz + (vec2(37.0, 13.0) * floor(p_35.y)));
    highp vec4 coord_38;
    coord_38 = (tmpvar_37 / 64.0);
    lowp vec2 tmpvar_39;
    tmpvar_39 = texture2DLodEXT (_MainTex, coord_38.xy, coord_38.w).yx;
    rg_36 = tmpvar_39;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_31.x, rg_31.y, fract(p_30.y)) / 8.0)) + (mix (rg_36.x, rg_36.y, fract(p_35.y)) / 16.0)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.xyz = p_3;
      tmpvar_5 = tmpvar_40;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_41;
  sphere_41 = xlv_TEXCOORD2;
  highp vec3 p_42;
  p_42 = tmpvar_5.xyz;
  highp vec3 d_43;
  int i_44;
  highp float fac_45;
  highp float dens_46;
  highp float heat_47;
  heat_47 = 0.0;
  dens_46 = 0.0;
  fac_45 = 0.5;
  d_43 = (normalize(xlv_TEXCOORD1) * 0.2);
  i_44 = 0;
  for (int i_44 = 0; i_44 < 5; ) {
    highp float tmpvar_48;
    highp vec3 p_49;
    p_49 = (p_42 - sphere_41.xyz);
    highp vec3 tmpvar_50;
    tmpvar_50 = (p_42 * _Frequency);
    highp vec4 tmpvar_51;
    tmpvar_51 = (_Time * _ScrollSpeed);
    highp vec3 p_52;
    p_52 = (tmpvar_50 + tmpvar_51.y);
    highp vec2 rg_53;
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.xy = (p_52.xz + (vec2(37.0, 13.0) * floor(p_52.y)));
    highp vec4 coord_55;
    coord_55 = (tmpvar_54 / 64.0);
    lowp vec2 tmpvar_56;
    tmpvar_56 = texture2DLodEXT (_MainTex, coord_55.xy, coord_55.w).yx;
    rg_53 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_50 * 2.0);
    highp vec3 p_58;
    p_58 = (tmpvar_57 + tmpvar_51.z);
    highp vec2 rg_59;
    highp vec4 tmpvar_60;
    tmpvar_60.zw = vec2(0.0, 0.0);
    tmpvar_60.xy = (p_58.xz + (vec2(37.0, 13.0) * floor(p_58.y)));
    highp vec4 coord_61;
    coord_61 = (tmpvar_60 / 64.0);
    lowp vec2 tmpvar_62;
    tmpvar_62 = texture2DLodEXT (_MainTex, coord_61.xy, coord_61.w).yx;
    rg_59 = tmpvar_62;
    highp vec3 tmpvar_63;
    tmpvar_63 = (tmpvar_57 * 2.0);
    highp vec3 p_64;
    p_64 = (tmpvar_63 + tmpvar_51.z);
    highp vec2 rg_65;
    highp vec4 tmpvar_66;
    tmpvar_66.zw = vec2(0.0, 0.0);
    tmpvar_66.xy = (p_64.xz + (vec2(37.0, 13.0) * floor(p_64.y)));
    highp vec4 coord_67;
    coord_67 = (tmpvar_66 / 64.0);
    lowp vec2 tmpvar_68;
    tmpvar_68 = texture2DLodEXT (_MainTex, coord_67.xy, coord_67.w).yx;
    rg_65 = tmpvar_68;
    highp vec3 tmpvar_69;
    tmpvar_69 = (tmpvar_63 * 2.0);
    highp vec3 p_70;
    p_70 = (tmpvar_69 + tmpvar_51.w);
    highp vec2 rg_71;
    highp vec4 tmpvar_72;
    tmpvar_72.zw = vec2(0.0, 0.0);
    tmpvar_72.xy = (p_70.xz + (vec2(37.0, 13.0) * floor(p_70.y)));
    highp vec4 coord_73;
    coord_73 = (tmpvar_72 / 64.0);
    lowp vec2 tmpvar_74;
    tmpvar_74 = texture2DLodEXT (_MainTex, coord_73.xy, coord_73.w).yx;
    rg_71 = tmpvar_74;
    highp vec3 p_75;
    p_75 = ((tmpvar_69 * 2.0) + tmpvar_51.w);
    highp vec2 rg_76;
    highp vec4 tmpvar_77;
    tmpvar_77.zw = vec2(0.0, 0.0);
    tmpvar_77.xy = (p_75.xz + (vec2(37.0, 13.0) * floor(p_75.y)));
    highp vec4 coord_78;
    coord_78 = (tmpvar_77 / 64.0);
    lowp vec2 tmpvar_79;
    tmpvar_79 = texture2DLodEXT (_MainTex, coord_78.xy, coord_78.w).yx;
    rg_76 = tmpvar_79;
    tmpvar_48 = ((sqrt(dot (p_49, p_49)) - _Radius) - ((((mix (rg_53.x, rg_53.y, fract(p_52.y)) + (mix (rg_59.x, rg_59.y, fract(p_58.y)) / 2.0)) + (mix (rg_65.x, rg_65.y, fract(p_64.y)) / 4.0)) + (mix (rg_71.x, rg_71.y, fract(p_70.y)) / 8.0)) + (mix (rg_76.x, rg_76.y, fract(p_75.y)) / 16.0)));
    if ((tmpvar_48 <= 0.15)) {
      highp vec3 p_80;
      p_80 = (p_42 - sphere_41.xyz);
      heat_47 = (heat_47 + pow (((((_Radius - sqrt(dot (p_80, p_80))) + 2.5) * fac_45) * _Heat), 3.0));
      fac_45 = (fac_45 * 0.25);
      dens_46 = (dens_46 + 0.4);
      p_42 = (p_42 - d_43);
    } else {
      p_42 = (p_42 - (d_43 * 3.0));
    };
    i_44 = (i_44 + 1);
  };
  highp vec2 tmpvar_81;
  tmpvar_81.x = heat_47;
  tmpvar_81.y = dens_46;
  highp vec4 tmpvar_82;
  tmpvar_82.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_82.x = tmpvar_81.x;
  lowp vec4 tmpvar_83;
  tmpvar_83 = texture2DLodEXT (_RampTex, tmpvar_82.xy, 0.0);
  col_1.xyz = tmpvar_83.xyz;
  highp float tmpvar_84;
  tmpvar_84 = clamp ((clamp (dens_46, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_84;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = (tmpvar_23 * 2.0);
    highp vec3 p_30;
    p_30 = (tmpvar_29 + tmpvar_11.w);
    highp vec2 rg_31;
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.xy = (p_30.xz + (vec2(37.0, 13.0) * floor(p_30.y)));
    highp vec4 coord_33;
    coord_33 = (tmpvar_32 / 64.0);
    lowp vec2 tmpvar_34;
    tmpvar_34 = texture2DLodEXT (_MainTex, coord_33.xy, coord_33.w).yx;
    rg_31 = tmpvar_34;
    highp vec3 p_35;
    p_35 = ((tmpvar_29 * 2.0) + tmpvar_11.w);
    highp vec2 rg_36;
    highp vec4 tmpvar_37;
    tmpvar_37.zw = vec2(0.0, 0.0);
    tmpvar_37.xy = (p_35.xz + (vec2(37.0, 13.0) * floor(p_35.y)));
    highp vec4 coord_38;
    coord_38 = (tmpvar_37 / 64.0);
    lowp vec2 tmpvar_39;
    tmpvar_39 = texture2DLodEXT (_MainTex, coord_38.xy, coord_38.w).yx;
    rg_36 = tmpvar_39;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_31.x, rg_31.y, fract(p_30.y)) / 8.0)) + (mix (rg_36.x, rg_36.y, fract(p_35.y)) / 16.0)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.xyz = p_3;
      tmpvar_5 = tmpvar_40;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_41;
  sphere_41 = xlv_TEXCOORD2;
  highp vec3 p_42;
  p_42 = tmpvar_5.xyz;
  highp vec3 d_43;
  int i_44;
  highp float fac_45;
  highp float dens_46;
  highp float heat_47;
  heat_47 = 0.0;
  dens_46 = 0.0;
  fac_45 = 0.5;
  d_43 = (normalize(xlv_TEXCOORD1) * 0.2);
  i_44 = 0;
  for (int i_44 = 0; i_44 < 5; ) {
    highp float tmpvar_48;
    highp vec3 p_49;
    p_49 = (p_42 - sphere_41.xyz);
    highp vec3 tmpvar_50;
    tmpvar_50 = (p_42 * _Frequency);
    highp vec4 tmpvar_51;
    tmpvar_51 = (_Time * _ScrollSpeed);
    highp vec3 p_52;
    p_52 = (tmpvar_50 + tmpvar_51.y);
    highp vec2 rg_53;
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.xy = (p_52.xz + (vec2(37.0, 13.0) * floor(p_52.y)));
    highp vec4 coord_55;
    coord_55 = (tmpvar_54 / 64.0);
    lowp vec2 tmpvar_56;
    tmpvar_56 = texture2DLodEXT (_MainTex, coord_55.xy, coord_55.w).yx;
    rg_53 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_50 * 2.0);
    highp vec3 p_58;
    p_58 = (tmpvar_57 + tmpvar_51.z);
    highp vec2 rg_59;
    highp vec4 tmpvar_60;
    tmpvar_60.zw = vec2(0.0, 0.0);
    tmpvar_60.xy = (p_58.xz + (vec2(37.0, 13.0) * floor(p_58.y)));
    highp vec4 coord_61;
    coord_61 = (tmpvar_60 / 64.0);
    lowp vec2 tmpvar_62;
    tmpvar_62 = texture2DLodEXT (_MainTex, coord_61.xy, coord_61.w).yx;
    rg_59 = tmpvar_62;
    highp vec3 tmpvar_63;
    tmpvar_63 = (tmpvar_57 * 2.0);
    highp vec3 p_64;
    p_64 = (tmpvar_63 + tmpvar_51.z);
    highp vec2 rg_65;
    highp vec4 tmpvar_66;
    tmpvar_66.zw = vec2(0.0, 0.0);
    tmpvar_66.xy = (p_64.xz + (vec2(37.0, 13.0) * floor(p_64.y)));
    highp vec4 coord_67;
    coord_67 = (tmpvar_66 / 64.0);
    lowp vec2 tmpvar_68;
    tmpvar_68 = texture2DLodEXT (_MainTex, coord_67.xy, coord_67.w).yx;
    rg_65 = tmpvar_68;
    highp vec3 tmpvar_69;
    tmpvar_69 = (tmpvar_63 * 2.0);
    highp vec3 p_70;
    p_70 = (tmpvar_69 + tmpvar_51.w);
    highp vec2 rg_71;
    highp vec4 tmpvar_72;
    tmpvar_72.zw = vec2(0.0, 0.0);
    tmpvar_72.xy = (p_70.xz + (vec2(37.0, 13.0) * floor(p_70.y)));
    highp vec4 coord_73;
    coord_73 = (tmpvar_72 / 64.0);
    lowp vec2 tmpvar_74;
    tmpvar_74 = texture2DLodEXT (_MainTex, coord_73.xy, coord_73.w).yx;
    rg_71 = tmpvar_74;
    highp vec3 p_75;
    p_75 = ((tmpvar_69 * 2.0) + tmpvar_51.w);
    highp vec2 rg_76;
    highp vec4 tmpvar_77;
    tmpvar_77.zw = vec2(0.0, 0.0);
    tmpvar_77.xy = (p_75.xz + (vec2(37.0, 13.0) * floor(p_75.y)));
    highp vec4 coord_78;
    coord_78 = (tmpvar_77 / 64.0);
    lowp vec2 tmpvar_79;
    tmpvar_79 = texture2DLodEXT (_MainTex, coord_78.xy, coord_78.w).yx;
    rg_76 = tmpvar_79;
    tmpvar_48 = ((sqrt(dot (p_49, p_49)) - _Radius) - ((((mix (rg_53.x, rg_53.y, fract(p_52.y)) + (mix (rg_59.x, rg_59.y, fract(p_58.y)) / 2.0)) + (mix (rg_65.x, rg_65.y, fract(p_64.y)) / 4.0)) + (mix (rg_71.x, rg_71.y, fract(p_70.y)) / 8.0)) + (mix (rg_76.x, rg_76.y, fract(p_75.y)) / 16.0)));
    if ((tmpvar_48 <= 0.15)) {
      highp vec3 p_80;
      p_80 = (p_42 - sphere_41.xyz);
      heat_47 = (heat_47 + pow (((((_Radius - sqrt(dot (p_80, p_80))) + 2.5) * fac_45) * _Heat), 3.0));
      fac_45 = (fac_45 * 0.25);
      dens_46 = (dens_46 + 0.4);
      p_42 = (p_42 - d_43);
    } else {
      p_42 = (p_42 - (d_43 * 3.0));
    };
    i_44 = (i_44 + 1);
  };
  highp vec2 tmpvar_81;
  tmpvar_81.x = heat_47;
  tmpvar_81.y = dens_46;
  highp vec4 tmpvar_82;
  tmpvar_82.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_82.x = tmpvar_81.x;
  lowp vec4 tmpvar_83;
  tmpvar_83 = texture2DLodEXT (_RampTex, tmpvar_82.xy, 0.0);
  col_1.xyz = tmpvar_83.xyz;
  highp float tmpvar_84;
  tmpvar_84 = clamp ((clamp (dens_46, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_84;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 405
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 405
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    v += (noise( (p + offset.z)) / 4.0);
    #line 356
    p *= 2.0;
    v += (noise( (p + offset.w)) / 8.0);
    p *= 2.0;
    v += (noise( (p + offset.w)) / 16.0);
    #line 360
    p *= 2.0;
    return v;
}
#line 363
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    #line 365
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 380
highp vec2 heat( in highp vec4 sphere, in highp vec3 p, in highp vec3 d ) {
    #line 382
    highp float heat = 0.0;
    highp float dens = 0.0;
    highp float fac = 0.5;
    d *= 0.2;
    #line 386
    highp int i = 0;
    for ( ; (i < 5); (++i)) {
        #line 390
        highp float dis = distf( sphere, p);
        if ((dis <= 0.15)){
            heat += pow( ((((_Radius - distance( p, sphere.xyz)) + 2.5) * fac) * _Heat), 3.0);
            #line 394
            fac *= 0.25;
            dens += 0.4;
            p -= d;
        }
        else{
            #line 400
            p -= (d * 3.0);
        }
    }
    return vec2( heat, dens);
}
#line 367
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    #line 369
    highp float dist;
    highp int i = 0;
    for ( ; (i < 9); (++i)) {
        #line 374
        dist = distf( sphere, p);
        if ((dist < 0.15)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 378
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 405
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp vec2 hd = heat( i.sphere, m.xyz, normalize(i.viewVec));
    #line 409
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( hd.x, 0.0, 0.0, 0.0));
    col.w = xll_saturate_f((xll_saturate_f(hd.y) * _Alpha));
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 tmpvar_16;
    tmpvar_16 = (tmpvar_10 * 2.0);
    vec3 p_17;
    p_17 = (tmpvar_16 + tmpvar_11.z);
    vec4 tmpvar_18;
    tmpvar_18.zw = vec2(0.0, 0.0);
    tmpvar_18.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    vec4 coord_19;
    coord_19 = (tmpvar_18 / 64.0);
    vec2 tmpvar_20;
    tmpvar_20 = texture2DLod (_MainTex, coord_19.xy, coord_19.w).yx;
    vec3 tmpvar_21;
    tmpvar_21 = (tmpvar_16 * 2.0);
    vec3 p_22;
    p_22 = (tmpvar_21 + tmpvar_11.z);
    vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.xy = (p_22.xz + (vec2(37.0, 13.0) * floor(p_22.y)));
    vec4 coord_24;
    coord_24 = (tmpvar_23 / 64.0);
    vec2 tmpvar_25;
    tmpvar_25 = texture2DLod (_MainTex, coord_24.xy, coord_24.w).yx;
    vec3 tmpvar_26;
    tmpvar_26 = (tmpvar_21 * 2.0);
    vec3 p_27;
    p_27 = (tmpvar_26 + tmpvar_11.w);
    vec4 tmpvar_28;
    tmpvar_28.zw = vec2(0.0, 0.0);
    tmpvar_28.xy = (p_27.xz + (vec2(37.0, 13.0) * floor(p_27.y)));
    vec4 coord_29;
    coord_29 = (tmpvar_28 / 64.0);
    vec2 tmpvar_30;
    tmpvar_30 = texture2DLod (_MainTex, coord_29.xy, coord_29.w).yx;
    vec3 p_31;
    p_31 = ((tmpvar_26 * 2.0) + tmpvar_11.w);
    vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.xy = (p_31.xz + (vec2(37.0, 13.0) * floor(p_31.y)));
    vec4 coord_33;
    coord_33 = (tmpvar_32 / 64.0);
    vec2 tmpvar_34;
    tmpvar_34 = texture2DLod (_MainTex, coord_33.xy, coord_33.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((((mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_20.x, tmpvar_20.y, fract(p_17.y)) / 2.0)) + (mix (tmpvar_25.x, tmpvar_25.y, fract(p_22.y)) / 4.0)) + (mix (tmpvar_30.x, tmpvar_30.y, fract(p_27.y)) / 8.0)) + (mix (tmpvar_34.x, tmpvar_34.y, fract(p_31.y)) / 16.0)));
    if ((tmpvar_8 < 0.15)) {
      vec4 tmpvar_35;
      tmpvar_35.w = 0.0;
      tmpvar_35.xyz = p_3;
      tmpvar_5 = tmpvar_35;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec3 p_36;
  p_36 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  float edge0_37;
  edge0_37 = (_Radius + 0.5);
  float t_38;
  t_38 = max (min (((sqrt(dot (p_36, p_36)) - edge0_37) / ((_Radius + 1.5) - edge0_37)), 1.0), 0.0);
  vec4 tmpvar_39;
  tmpvar_39.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_39.x = (1.0 - ((t_38 * (t_38 * (3.0 - (2.0 * t_38)))) / _Heat));
  col_1.xyz = texture2DLod (_RampTex, tmpvar_39.xy, 0.0).xyz;
  col_1.w = clamp (_Alpha, 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_OFF" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = (tmpvar_23 * 2.0);
    highp vec3 p_30;
    p_30 = (tmpvar_29 + tmpvar_11.w);
    highp vec2 rg_31;
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.xy = (p_30.xz + (vec2(37.0, 13.0) * floor(p_30.y)));
    highp vec4 coord_33;
    coord_33 = (tmpvar_32 / 64.0);
    lowp vec2 tmpvar_34;
    tmpvar_34 = texture2DLodEXT (_MainTex, coord_33.xy, coord_33.w).yx;
    rg_31 = tmpvar_34;
    highp vec3 p_35;
    p_35 = ((tmpvar_29 * 2.0) + tmpvar_11.w);
    highp vec2 rg_36;
    highp vec4 tmpvar_37;
    tmpvar_37.zw = vec2(0.0, 0.0);
    tmpvar_37.xy = (p_35.xz + (vec2(37.0, 13.0) * floor(p_35.y)));
    highp vec4 coord_38;
    coord_38 = (tmpvar_37 / 64.0);
    lowp vec2 tmpvar_39;
    tmpvar_39 = texture2DLodEXT (_MainTex, coord_38.xy, coord_38.w).yx;
    rg_36 = tmpvar_39;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_31.x, rg_31.y, fract(p_30.y)) / 8.0)) + (mix (rg_36.x, rg_36.y, fract(p_35.y)) / 16.0)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.xyz = p_3;
      tmpvar_5 = tmpvar_40;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_41;
  p_41 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_42;
  edge0_42 = (_Radius + 0.5);
  highp float t_43;
  t_43 = max (min (((sqrt(dot (p_41, p_41)) - edge0_42) / ((_Radius + 1.5) - edge0_42)), 1.0), 0.0);
  highp vec4 tmpvar_44;
  tmpvar_44.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_44.x = (1.0 - ((t_43 * (t_43 * (3.0 - (2.0 * t_43)))) / _Heat));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DLodEXT (_RampTex, tmpvar_44.xy, 0.0);
  col_1.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  tmpvar_46 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_46;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 9; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = (tmpvar_23 * 2.0);
    highp vec3 p_30;
    p_30 = (tmpvar_29 + tmpvar_11.w);
    highp vec2 rg_31;
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.xy = (p_30.xz + (vec2(37.0, 13.0) * floor(p_30.y)));
    highp vec4 coord_33;
    coord_33 = (tmpvar_32 / 64.0);
    lowp vec2 tmpvar_34;
    tmpvar_34 = texture2DLodEXT (_MainTex, coord_33.xy, coord_33.w).yx;
    rg_31 = tmpvar_34;
    highp vec3 p_35;
    p_35 = ((tmpvar_29 * 2.0) + tmpvar_11.w);
    highp vec2 rg_36;
    highp vec4 tmpvar_37;
    tmpvar_37.zw = vec2(0.0, 0.0);
    tmpvar_37.xy = (p_35.xz + (vec2(37.0, 13.0) * floor(p_35.y)));
    highp vec4 coord_38;
    coord_38 = (tmpvar_37 / 64.0);
    lowp vec2 tmpvar_39;
    tmpvar_39 = texture2DLodEXT (_MainTex, coord_38.xy, coord_38.w).yx;
    rg_36 = tmpvar_39;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_31.x, rg_31.y, fract(p_30.y)) / 8.0)) + (mix (rg_36.x, rg_36.y, fract(p_35.y)) / 16.0)));
    if ((tmpvar_8 < 0.15)) {
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.xyz = p_3;
      tmpvar_5 = tmpvar_40;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_41;
  p_41 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_42;
  edge0_42 = (_Radius + 0.5);
  highp float t_43;
  t_43 = max (min (((sqrt(dot (p_41, p_41)) - edge0_42) / ((_Radius + 1.5) - edge0_42)), 1.0), 0.0);
  highp vec4 tmpvar_44;
  tmpvar_44.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_44.x = (1.0 - ((t_43 * (t_43 * (3.0 - (2.0 * t_43)))) / _Heat));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DLodEXT (_RampTex, tmpvar_44.xy, 0.0);
  col_1.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  tmpvar_46 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_46;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 405
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 405
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    v += (noise( (p + offset.z)) / 4.0);
    #line 356
    p *= 2.0;
    v += (noise( (p + offset.w)) / 8.0);
    p *= 2.0;
    v += (noise( (p + offset.w)) / 16.0);
    #line 360
    p *= 2.0;
    return v;
}
#line 363
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    #line 365
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 367
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    #line 369
    highp float dist;
    highp int i = 0;
    for ( ; (i < 9); (++i)) {
        #line 374
        dist = distf( sphere, p);
        if ((dist < 0.15)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 378
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 405
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp float heatfac = (smoothstep( (_Radius + 0.5), (_Radius + 1.5), distance( m.xyz, i.sphere.xyz)) / _Heat);
    #line 409
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( (1.0 - heatfac), 0.0, 0.0, 0.0));
    col.w = xll_saturate_f(_Alpha);
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_ON" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 tmpvar_16;
    tmpvar_16 = (tmpvar_10 * 2.0);
    vec3 p_17;
    p_17 = (tmpvar_16 + tmpvar_11.z);
    vec4 tmpvar_18;
    tmpvar_18.zw = vec2(0.0, 0.0);
    tmpvar_18.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    vec4 coord_19;
    coord_19 = (tmpvar_18 / 64.0);
    vec2 tmpvar_20;
    tmpvar_20 = texture2DLod (_MainTex, coord_19.xy, coord_19.w).yx;
    vec3 tmpvar_21;
    tmpvar_21 = (tmpvar_16 * 2.0);
    vec3 p_22;
    p_22 = (tmpvar_21 + tmpvar_11.z);
    vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.xy = (p_22.xz + (vec2(37.0, 13.0) * floor(p_22.y)));
    vec4 coord_24;
    coord_24 = (tmpvar_23 / 64.0);
    vec2 tmpvar_25;
    tmpvar_25 = texture2DLod (_MainTex, coord_24.xy, coord_24.w).yx;
    vec3 p_26;
    p_26 = ((tmpvar_21 * 2.0) + tmpvar_11.w);
    vec4 tmpvar_27;
    tmpvar_27.zw = vec2(0.0, 0.0);
    tmpvar_27.xy = (p_26.xz + (vec2(37.0, 13.0) * floor(p_26.y)));
    vec4 coord_28;
    coord_28 = (tmpvar_27 / 64.0);
    vec2 tmpvar_29;
    tmpvar_29 = texture2DLod (_MainTex, coord_28.xy, coord_28.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (((mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_20.x, tmpvar_20.y, fract(p_17.y)) / 2.0)) + (mix (tmpvar_25.x, tmpvar_25.y, fract(p_22.y)) / 4.0)) + (mix (tmpvar_29.x, tmpvar_29.y, fract(p_26.y)) / 8.0)));
    if ((tmpvar_8 < 0.05)) {
      vec4 tmpvar_30;
      tmpvar_30.w = 0.0;
      tmpvar_30.xyz = p_3;
      tmpvar_5 = tmpvar_30;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec4 sphere_31;
  sphere_31 = xlv_TEXCOORD2;
  vec3 p_32;
  p_32 = tmpvar_5.xyz;
  vec3 d_33;
  int i_34;
  float fac_35;
  float dens_36;
  float heat_37;
  heat_37 = 0.0;
  dens_36 = 0.0;
  fac_35 = 0.5;
  d_33 = (normalize(xlv_TEXCOORD1) * 0.15);
  i_34 = 0;
  for (int i_34 = 0; i_34 < 8; ) {
    float tmpvar_38;
    vec3 p_39;
    p_39 = (p_32 - sphere_31.xyz);
    vec3 tmpvar_40;
    tmpvar_40 = (p_32 * _Frequency);
    vec4 tmpvar_41;
    tmpvar_41 = (_Time * _ScrollSpeed);
    vec3 p_42;
    p_42 = (tmpvar_40 + tmpvar_41.y);
    vec4 tmpvar_43;
    tmpvar_43.zw = vec2(0.0, 0.0);
    tmpvar_43.xy = (p_42.xz + (vec2(37.0, 13.0) * floor(p_42.y)));
    vec4 coord_44;
    coord_44 = (tmpvar_43 / 64.0);
    vec2 tmpvar_45;
    tmpvar_45 = texture2DLod (_MainTex, coord_44.xy, coord_44.w).yx;
    vec3 tmpvar_46;
    tmpvar_46 = (tmpvar_40 * 2.0);
    vec3 p_47;
    p_47 = (tmpvar_46 + tmpvar_41.z);
    vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.xy = (p_47.xz + (vec2(37.0, 13.0) * floor(p_47.y)));
    vec4 coord_49;
    coord_49 = (tmpvar_48 / 64.0);
    vec2 tmpvar_50;
    tmpvar_50 = texture2DLod (_MainTex, coord_49.xy, coord_49.w).yx;
    vec3 tmpvar_51;
    tmpvar_51 = (tmpvar_46 * 2.0);
    vec3 p_52;
    p_52 = (tmpvar_51 + tmpvar_41.z);
    vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.xy = (p_52.xz + (vec2(37.0, 13.0) * floor(p_52.y)));
    vec4 coord_54;
    coord_54 = (tmpvar_53 / 64.0);
    vec2 tmpvar_55;
    tmpvar_55 = texture2DLod (_MainTex, coord_54.xy, coord_54.w).yx;
    vec3 p_56;
    p_56 = ((tmpvar_51 * 2.0) + tmpvar_41.w);
    vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.xy = (p_56.xz + (vec2(37.0, 13.0) * floor(p_56.y)));
    vec4 coord_58;
    coord_58 = (tmpvar_57 / 64.0);
    vec2 tmpvar_59;
    tmpvar_59 = texture2DLod (_MainTex, coord_58.xy, coord_58.w).yx;
    tmpvar_38 = ((sqrt(dot (p_39, p_39)) - _Radius) - (((mix (tmpvar_45.x, tmpvar_45.y, fract(p_42.y)) + (mix (tmpvar_50.x, tmpvar_50.y, fract(p_47.y)) / 2.0)) + (mix (tmpvar_55.x, tmpvar_55.y, fract(p_52.y)) / 4.0)) + (mix (tmpvar_59.x, tmpvar_59.y, fract(p_56.y)) / 8.0)));
    if ((tmpvar_38 <= 0.05)) {
      vec3 p_60;
      p_60 = (p_32 - sphere_31.xyz);
      heat_37 = (heat_37 + pow (((((_Radius - sqrt(dot (p_60, p_60))) + 2.5) * fac_35) * _Heat), 3.0));
      fac_35 = (fac_35 * 0.25);
      dens_36 = (dens_36 + 0.3);
      p_32 = (p_32 - d_33);
    } else {
      p_32 = (p_32 - (d_33 * 3.0));
    };
    i_34 = (i_34 + 1);
  };
  vec2 tmpvar_61;
  tmpvar_61.x = heat_37;
  tmpvar_61.y = dens_36;
  vec4 tmpvar_62;
  tmpvar_62.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_62.x = tmpvar_61.x;
  col_1.xyz = texture2DLod (_RampTex, tmpvar_62.xy, 0.0).xyz;
  col_1.w = clamp ((clamp (dens_36, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_ON" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 p_29;
    p_29 = ((tmpvar_23 * 2.0) + tmpvar_11.w);
    highp vec2 rg_30;
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.xy = (p_29.xz + (vec2(37.0, 13.0) * floor(p_29.y)));
    highp vec4 coord_32;
    coord_32 = (tmpvar_31 / 64.0);
    lowp vec2 tmpvar_33;
    tmpvar_33 = texture2DLodEXT (_MainTex, coord_32.xy, coord_32.w).yx;
    rg_30 = tmpvar_33;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_30.x, rg_30.y, fract(p_29.y)) / 8.0)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_34;
      tmpvar_34.w = 0.0;
      tmpvar_34.xyz = p_3;
      tmpvar_5 = tmpvar_34;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_35;
  sphere_35 = xlv_TEXCOORD2;
  highp vec3 p_36;
  p_36 = tmpvar_5.xyz;
  highp vec3 d_37;
  int i_38;
  highp float fac_39;
  highp float dens_40;
  highp float heat_41;
  heat_41 = 0.0;
  dens_40 = 0.0;
  fac_39 = 0.5;
  d_37 = (normalize(xlv_TEXCOORD1) * 0.15);
  i_38 = 0;
  for (int i_38 = 0; i_38 < 8; ) {
    highp float tmpvar_42;
    highp vec3 p_43;
    p_43 = (p_36 - sphere_35.xyz);
    highp vec3 tmpvar_44;
    tmpvar_44 = (p_36 * _Frequency);
    highp vec4 tmpvar_45;
    tmpvar_45 = (_Time * _ScrollSpeed);
    highp vec3 p_46;
    p_46 = (tmpvar_44 + tmpvar_45.y);
    highp vec2 rg_47;
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.xy = (p_46.xz + (vec2(37.0, 13.0) * floor(p_46.y)));
    highp vec4 coord_49;
    coord_49 = (tmpvar_48 / 64.0);
    lowp vec2 tmpvar_50;
    tmpvar_50 = texture2DLodEXT (_MainTex, coord_49.xy, coord_49.w).yx;
    rg_47 = tmpvar_50;
    highp vec3 tmpvar_51;
    tmpvar_51 = (tmpvar_44 * 2.0);
    highp vec3 p_52;
    p_52 = (tmpvar_51 + tmpvar_45.z);
    highp vec2 rg_53;
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.xy = (p_52.xz + (vec2(37.0, 13.0) * floor(p_52.y)));
    highp vec4 coord_55;
    coord_55 = (tmpvar_54 / 64.0);
    lowp vec2 tmpvar_56;
    tmpvar_56 = texture2DLodEXT (_MainTex, coord_55.xy, coord_55.w).yx;
    rg_53 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_51 * 2.0);
    highp vec3 p_58;
    p_58 = (tmpvar_57 + tmpvar_45.z);
    highp vec2 rg_59;
    highp vec4 tmpvar_60;
    tmpvar_60.zw = vec2(0.0, 0.0);
    tmpvar_60.xy = (p_58.xz + (vec2(37.0, 13.0) * floor(p_58.y)));
    highp vec4 coord_61;
    coord_61 = (tmpvar_60 / 64.0);
    lowp vec2 tmpvar_62;
    tmpvar_62 = texture2DLodEXT (_MainTex, coord_61.xy, coord_61.w).yx;
    rg_59 = tmpvar_62;
    highp vec3 p_63;
    p_63 = ((tmpvar_57 * 2.0) + tmpvar_45.w);
    highp vec2 rg_64;
    highp vec4 tmpvar_65;
    tmpvar_65.zw = vec2(0.0, 0.0);
    tmpvar_65.xy = (p_63.xz + (vec2(37.0, 13.0) * floor(p_63.y)));
    highp vec4 coord_66;
    coord_66 = (tmpvar_65 / 64.0);
    lowp vec2 tmpvar_67;
    tmpvar_67 = texture2DLodEXT (_MainTex, coord_66.xy, coord_66.w).yx;
    rg_64 = tmpvar_67;
    tmpvar_42 = ((sqrt(dot (p_43, p_43)) - _Radius) - (((mix (rg_47.x, rg_47.y, fract(p_46.y)) + (mix (rg_53.x, rg_53.y, fract(p_52.y)) / 2.0)) + (mix (rg_59.x, rg_59.y, fract(p_58.y)) / 4.0)) + (mix (rg_64.x, rg_64.y, fract(p_63.y)) / 8.0)));
    if ((tmpvar_42 <= 0.05)) {
      highp vec3 p_68;
      p_68 = (p_36 - sphere_35.xyz);
      heat_41 = (heat_41 + pow (((((_Radius - sqrt(dot (p_68, p_68))) + 2.5) * fac_39) * _Heat), 3.0));
      fac_39 = (fac_39 * 0.25);
      dens_40 = (dens_40 + 0.3);
      p_36 = (p_36 - d_37);
    } else {
      p_36 = (p_36 - (d_37 * 3.0));
    };
    i_38 = (i_38 + 1);
  };
  highp vec2 tmpvar_69;
  tmpvar_69.x = heat_41;
  tmpvar_69.y = dens_40;
  highp vec4 tmpvar_70;
  tmpvar_70.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_70.x = tmpvar_69.x;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2DLodEXT (_RampTex, tmpvar_70.xy, 0.0);
  col_1.xyz = tmpvar_71.xyz;
  highp float tmpvar_72;
  tmpvar_72 = clamp ((clamp (dens_40, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_72;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 p_29;
    p_29 = ((tmpvar_23 * 2.0) + tmpvar_11.w);
    highp vec2 rg_30;
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.xy = (p_29.xz + (vec2(37.0, 13.0) * floor(p_29.y)));
    highp vec4 coord_32;
    coord_32 = (tmpvar_31 / 64.0);
    lowp vec2 tmpvar_33;
    tmpvar_33 = texture2DLodEXT (_MainTex, coord_32.xy, coord_32.w).yx;
    rg_30 = tmpvar_33;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_30.x, rg_30.y, fract(p_29.y)) / 8.0)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_34;
      tmpvar_34.w = 0.0;
      tmpvar_34.xyz = p_3;
      tmpvar_5 = tmpvar_34;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_35;
  sphere_35 = xlv_TEXCOORD2;
  highp vec3 p_36;
  p_36 = tmpvar_5.xyz;
  highp vec3 d_37;
  int i_38;
  highp float fac_39;
  highp float dens_40;
  highp float heat_41;
  heat_41 = 0.0;
  dens_40 = 0.0;
  fac_39 = 0.5;
  d_37 = (normalize(xlv_TEXCOORD1) * 0.15);
  i_38 = 0;
  for (int i_38 = 0; i_38 < 8; ) {
    highp float tmpvar_42;
    highp vec3 p_43;
    p_43 = (p_36 - sphere_35.xyz);
    highp vec3 tmpvar_44;
    tmpvar_44 = (p_36 * _Frequency);
    highp vec4 tmpvar_45;
    tmpvar_45 = (_Time * _ScrollSpeed);
    highp vec3 p_46;
    p_46 = (tmpvar_44 + tmpvar_45.y);
    highp vec2 rg_47;
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.xy = (p_46.xz + (vec2(37.0, 13.0) * floor(p_46.y)));
    highp vec4 coord_49;
    coord_49 = (tmpvar_48 / 64.0);
    lowp vec2 tmpvar_50;
    tmpvar_50 = texture2DLodEXT (_MainTex, coord_49.xy, coord_49.w).yx;
    rg_47 = tmpvar_50;
    highp vec3 tmpvar_51;
    tmpvar_51 = (tmpvar_44 * 2.0);
    highp vec3 p_52;
    p_52 = (tmpvar_51 + tmpvar_45.z);
    highp vec2 rg_53;
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.xy = (p_52.xz + (vec2(37.0, 13.0) * floor(p_52.y)));
    highp vec4 coord_55;
    coord_55 = (tmpvar_54 / 64.0);
    lowp vec2 tmpvar_56;
    tmpvar_56 = texture2DLodEXT (_MainTex, coord_55.xy, coord_55.w).yx;
    rg_53 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_51 * 2.0);
    highp vec3 p_58;
    p_58 = (tmpvar_57 + tmpvar_45.z);
    highp vec2 rg_59;
    highp vec4 tmpvar_60;
    tmpvar_60.zw = vec2(0.0, 0.0);
    tmpvar_60.xy = (p_58.xz + (vec2(37.0, 13.0) * floor(p_58.y)));
    highp vec4 coord_61;
    coord_61 = (tmpvar_60 / 64.0);
    lowp vec2 tmpvar_62;
    tmpvar_62 = texture2DLodEXT (_MainTex, coord_61.xy, coord_61.w).yx;
    rg_59 = tmpvar_62;
    highp vec3 p_63;
    p_63 = ((tmpvar_57 * 2.0) + tmpvar_45.w);
    highp vec2 rg_64;
    highp vec4 tmpvar_65;
    tmpvar_65.zw = vec2(0.0, 0.0);
    tmpvar_65.xy = (p_63.xz + (vec2(37.0, 13.0) * floor(p_63.y)));
    highp vec4 coord_66;
    coord_66 = (tmpvar_65 / 64.0);
    lowp vec2 tmpvar_67;
    tmpvar_67 = texture2DLodEXT (_MainTex, coord_66.xy, coord_66.w).yx;
    rg_64 = tmpvar_67;
    tmpvar_42 = ((sqrt(dot (p_43, p_43)) - _Radius) - (((mix (rg_47.x, rg_47.y, fract(p_46.y)) + (mix (rg_53.x, rg_53.y, fract(p_52.y)) / 2.0)) + (mix (rg_59.x, rg_59.y, fract(p_58.y)) / 4.0)) + (mix (rg_64.x, rg_64.y, fract(p_63.y)) / 8.0)));
    if ((tmpvar_42 <= 0.05)) {
      highp vec3 p_68;
      p_68 = (p_36 - sphere_35.xyz);
      heat_41 = (heat_41 + pow (((((_Radius - sqrt(dot (p_68, p_68))) + 2.5) * fac_39) * _Heat), 3.0));
      fac_39 = (fac_39 * 0.25);
      dens_40 = (dens_40 + 0.3);
      p_36 = (p_36 - d_37);
    } else {
      p_36 = (p_36 - (d_37 * 3.0));
    };
    i_38 = (i_38 + 1);
  };
  highp vec2 tmpvar_69;
  tmpvar_69.x = heat_41;
  tmpvar_69.y = dens_40;
  highp vec4 tmpvar_70;
  tmpvar_70.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_70.x = tmpvar_69.x;
  lowp vec4 tmpvar_71;
  tmpvar_71 = texture2DLodEXT (_RampTex, tmpvar_70.xy, 0.0);
  col_1.xyz = tmpvar_71.xyz;
  highp float tmpvar_72;
  tmpvar_72 = clamp ((clamp (dens_40, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_72;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 361
#line 365
#line 403
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 361
#line 365
#line 403
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    v += (noise( (p + offset.z)) / 4.0);
    #line 356
    p *= 2.0;
    v += (noise( (p + offset.w)) / 8.0);
    p *= 2.0;
    return v;
}
#line 361
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 378
highp vec2 heat( in highp vec4 sphere, in highp vec3 p, in highp vec3 d ) {
    #line 380
    highp float heat = 0.0;
    highp float dens = 0.0;
    highp float fac = 0.5;
    d *= 0.15;
    #line 384
    highp int i = 0;
    for ( ; (i < 8); (++i)) {
        #line 388
        highp float dis = distf( sphere, p);
        if ((dis <= 0.05)){
            heat += pow( ((((_Radius - distance( p, sphere.xyz)) + 2.5) * fac) * _Heat), 3.0);
            #line 392
            fac *= 0.25;
            dens += 0.3;
            p -= d;
        }
        else{
            #line 398
            p -= (d * 3.0);
        }
    }
    return vec2( heat, dens);
}
#line 365
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    highp float dist;
    highp int i = 0;
    for ( ; (i < 15); (++i)) {
        #line 372
        dist = distf( sphere, p);
        if ((dist < 0.05)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 376
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 403
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp vec2 hd = heat( i.sphere, m.xyz, normalize(i.viewVec));
    #line 407
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( hd.x, 0.0, 0.0, 0.0));
    col.w = xll_saturate_f((xll_saturate_f(hd.y) * _Alpha));
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 tmpvar_16;
    tmpvar_16 = (tmpvar_10 * 2.0);
    vec3 p_17;
    p_17 = (tmpvar_16 + tmpvar_11.z);
    vec4 tmpvar_18;
    tmpvar_18.zw = vec2(0.0, 0.0);
    tmpvar_18.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    vec4 coord_19;
    coord_19 = (tmpvar_18 / 64.0);
    vec2 tmpvar_20;
    tmpvar_20 = texture2DLod (_MainTex, coord_19.xy, coord_19.w).yx;
    vec3 tmpvar_21;
    tmpvar_21 = (tmpvar_16 * 2.0);
    vec3 p_22;
    p_22 = (tmpvar_21 + tmpvar_11.z);
    vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.xy = (p_22.xz + (vec2(37.0, 13.0) * floor(p_22.y)));
    vec4 coord_24;
    coord_24 = (tmpvar_23 / 64.0);
    vec2 tmpvar_25;
    tmpvar_25 = texture2DLod (_MainTex, coord_24.xy, coord_24.w).yx;
    vec3 p_26;
    p_26 = ((tmpvar_21 * 2.0) + tmpvar_11.w);
    vec4 tmpvar_27;
    tmpvar_27.zw = vec2(0.0, 0.0);
    tmpvar_27.xy = (p_26.xz + (vec2(37.0, 13.0) * floor(p_26.y)));
    vec4 coord_28;
    coord_28 = (tmpvar_27 / 64.0);
    vec2 tmpvar_29;
    tmpvar_29 = texture2DLod (_MainTex, coord_28.xy, coord_28.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (((mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_20.x, tmpvar_20.y, fract(p_17.y)) / 2.0)) + (mix (tmpvar_25.x, tmpvar_25.y, fract(p_22.y)) / 4.0)) + (mix (tmpvar_29.x, tmpvar_29.y, fract(p_26.y)) / 8.0)));
    if ((tmpvar_8 < 0.05)) {
      vec4 tmpvar_30;
      tmpvar_30.w = 0.0;
      tmpvar_30.xyz = p_3;
      tmpvar_5 = tmpvar_30;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec3 p_31;
  p_31 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  float edge0_32;
  edge0_32 = (_Radius + 0.5);
  float t_33;
  t_33 = max (min (((sqrt(dot (p_31, p_31)) - edge0_32) / ((_Radius + 1.5) - edge0_32)), 1.0), 0.0);
  vec4 tmpvar_34;
  tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_34.x = (1.0 - ((t_33 * (t_33 * (3.0 - (2.0 * t_33)))) / _Heat));
  col_1.xyz = texture2DLod (_RampTex, tmpvar_34.xy, 0.0).xyz;
  col_1.w = clamp (_Alpha, 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_OFF" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 p_29;
    p_29 = ((tmpvar_23 * 2.0) + tmpvar_11.w);
    highp vec2 rg_30;
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.xy = (p_29.xz + (vec2(37.0, 13.0) * floor(p_29.y)));
    highp vec4 coord_32;
    coord_32 = (tmpvar_31 / 64.0);
    lowp vec2 tmpvar_33;
    tmpvar_33 = texture2DLodEXT (_MainTex, coord_32.xy, coord_32.w).yx;
    rg_30 = tmpvar_33;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_30.x, rg_30.y, fract(p_29.y)) / 8.0)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_34;
      tmpvar_34.w = 0.0;
      tmpvar_34.xyz = p_3;
      tmpvar_5 = tmpvar_34;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_35;
  p_35 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_36;
  edge0_36 = (_Radius + 0.5);
  highp float t_37;
  t_37 = max (min (((sqrt(dot (p_35, p_35)) - edge0_36) / ((_Radius + 1.5) - edge0_36)), 1.0), 0.0);
  highp vec4 tmpvar_38;
  tmpvar_38.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_38.x = (1.0 - ((t_37 * (t_37 * (3.0 - (2.0 * t_37)))) / _Heat));
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DLodEXT (_RampTex, tmpvar_38.xy, 0.0);
  col_1.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_40;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 p_29;
    p_29 = ((tmpvar_23 * 2.0) + tmpvar_11.w);
    highp vec2 rg_30;
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.xy = (p_29.xz + (vec2(37.0, 13.0) * floor(p_29.y)));
    highp vec4 coord_32;
    coord_32 = (tmpvar_31 / 64.0);
    lowp vec2 tmpvar_33;
    tmpvar_33 = texture2DLodEXT (_MainTex, coord_32.xy, coord_32.w).yx;
    rg_30 = tmpvar_33;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_30.x, rg_30.y, fract(p_29.y)) / 8.0)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_34;
      tmpvar_34.w = 0.0;
      tmpvar_34.xyz = p_3;
      tmpvar_5 = tmpvar_34;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_35;
  p_35 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_36;
  edge0_36 = (_Radius + 0.5);
  highp float t_37;
  t_37 = max (min (((sqrt(dot (p_35, p_35)) - edge0_36) / ((_Radius + 1.5) - edge0_36)), 1.0), 0.0);
  highp vec4 tmpvar_38;
  tmpvar_38.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_38.x = (1.0 - ((t_37 * (t_37 * (3.0 - (2.0 * t_37)))) / _Heat));
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DLodEXT (_RampTex, tmpvar_38.xy, 0.0);
  col_1.xyz = tmpvar_39.xyz;
  highp float tmpvar_40;
  tmpvar_40 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_40;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 361
#line 365
#line 403
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 361
#line 365
#line 403
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    v += (noise( (p + offset.z)) / 4.0);
    #line 356
    p *= 2.0;
    v += (noise( (p + offset.w)) / 8.0);
    p *= 2.0;
    return v;
}
#line 361
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 365
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    highp float dist;
    highp int i = 0;
    for ( ; (i < 15); (++i)) {
        #line 372
        dist = distf( sphere, p);
        if ((dist < 0.05)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 376
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 403
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp float heatfac = (smoothstep( (_Radius + 0.5), (_Radius + 1.5), distance( m.xyz, i.sphere.xyz)) / _Heat);
    #line 407
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( (1.0 - heatfac), 0.0, 0.0, 0.0));
    col.w = xll_saturate_f(_Alpha);
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_ON" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 p_10;
    p_10 = ((p_3 * _Frequency) + (_Time * _ScrollSpeed).y);
    vec4 tmpvar_11;
    tmpvar_11.zw = vec2(0.0, 0.0);
    tmpvar_11.xy = (p_10.xz + (vec2(37.0, 13.0) * floor(p_10.y)));
    vec4 coord_12;
    coord_12 = (tmpvar_11 / 64.0);
    vec2 tmpvar_13;
    tmpvar_13 = texture2DLod (_MainTex, coord_12.xy, coord_12.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - mix (tmpvar_13.x, tmpvar_13.y, fract(p_10.y)));
    if ((tmpvar_8 < 0.05)) {
      vec4 tmpvar_14;
      tmpvar_14.w = 0.0;
      tmpvar_14.xyz = p_3;
      tmpvar_5 = tmpvar_14;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec4 sphere_15;
  sphere_15 = xlv_TEXCOORD2;
  vec3 p_16;
  p_16 = tmpvar_5.xyz;
  vec3 d_17;
  int i_18;
  float fac_19;
  float dens_20;
  float heat_21;
  heat_21 = 0.0;
  dens_20 = 0.0;
  fac_19 = 0.5;
  d_17 = (normalize(xlv_TEXCOORD1) * 0.15);
  i_18 = 0;
  for (int i_18 = 0; i_18 < 8; ) {
    float tmpvar_22;
    vec3 p_23;
    p_23 = (p_16 - sphere_15.xyz);
    vec3 p_24;
    p_24 = ((p_16 * _Frequency) + (_Time * _ScrollSpeed).y);
    vec4 tmpvar_25;
    tmpvar_25.zw = vec2(0.0, 0.0);
    tmpvar_25.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    vec4 coord_26;
    coord_26 = (tmpvar_25 / 64.0);
    vec2 tmpvar_27;
    tmpvar_27 = texture2DLod (_MainTex, coord_26.xy, coord_26.w).yx;
    tmpvar_22 = ((sqrt(dot (p_23, p_23)) - _Radius) - mix (tmpvar_27.x, tmpvar_27.y, fract(p_24.y)));
    if ((tmpvar_22 <= 0.05)) {
      vec3 p_28;
      p_28 = (p_16 - sphere_15.xyz);
      heat_21 = (heat_21 + pow (((((_Radius - sqrt(dot (p_28, p_28))) + 2.5) * fac_19) * _Heat), 3.0));
      fac_19 = (fac_19 * 0.25);
      dens_20 = (dens_20 + 0.3);
      p_16 = (p_16 - d_17);
    } else {
      p_16 = (p_16 - (d_17 * 3.0));
    };
    i_18 = (i_18 + 1);
  };
  vec2 tmpvar_29;
  tmpvar_29.x = heat_21;
  tmpvar_29.y = dens_20;
  vec4 tmpvar_30;
  tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_30.x = tmpvar_29.x;
  col_1.xyz = texture2DLod (_RampTex, tmpvar_30.xy, 0.0).xyz;
  col_1.w = clamp ((clamp (dens_20, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_ON" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 p_10;
    p_10 = ((p_3 * _Frequency) + (_Time * _ScrollSpeed).y);
    highp vec2 rg_11;
    highp vec4 tmpvar_12;
    tmpvar_12.zw = vec2(0.0, 0.0);
    tmpvar_12.xy = (p_10.xz + (vec2(37.0, 13.0) * floor(p_10.y)));
    highp vec4 coord_13;
    coord_13 = (tmpvar_12 / 64.0);
    lowp vec2 tmpvar_14;
    tmpvar_14 = texture2DLodEXT (_MainTex, coord_13.xy, coord_13.w).yx;
    rg_11 = tmpvar_14;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - mix (rg_11.x, rg_11.y, fract(p_10.y)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_15;
      tmpvar_15.w = 0.0;
      tmpvar_15.xyz = p_3;
      tmpvar_5 = tmpvar_15;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_16;
  sphere_16 = xlv_TEXCOORD2;
  highp vec3 p_17;
  p_17 = tmpvar_5.xyz;
  highp vec3 d_18;
  int i_19;
  highp float fac_20;
  highp float dens_21;
  highp float heat_22;
  heat_22 = 0.0;
  dens_21 = 0.0;
  fac_20 = 0.5;
  d_18 = (normalize(xlv_TEXCOORD1) * 0.15);
  i_19 = 0;
  for (int i_19 = 0; i_19 < 8; ) {
    highp float tmpvar_23;
    highp vec3 p_24;
    p_24 = (p_17 - sphere_16.xyz);
    highp vec3 p_25;
    p_25 = ((p_17 * _Frequency) + (_Time * _ScrollSpeed).y);
    highp vec2 rg_26;
    highp vec4 tmpvar_27;
    tmpvar_27.zw = vec2(0.0, 0.0);
    tmpvar_27.xy = (p_25.xz + (vec2(37.0, 13.0) * floor(p_25.y)));
    highp vec4 coord_28;
    coord_28 = (tmpvar_27 / 64.0);
    lowp vec2 tmpvar_29;
    tmpvar_29 = texture2DLodEXT (_MainTex, coord_28.xy, coord_28.w).yx;
    rg_26 = tmpvar_29;
    tmpvar_23 = ((sqrt(dot (p_24, p_24)) - _Radius) - mix (rg_26.x, rg_26.y, fract(p_25.y)));
    if ((tmpvar_23 <= 0.05)) {
      highp vec3 p_30;
      p_30 = (p_17 - sphere_16.xyz);
      heat_22 = (heat_22 + pow (((((_Radius - sqrt(dot (p_30, p_30))) + 2.5) * fac_20) * _Heat), 3.0));
      fac_20 = (fac_20 * 0.25);
      dens_21 = (dens_21 + 0.3);
      p_17 = (p_17 - d_18);
    } else {
      p_17 = (p_17 - (d_18 * 3.0));
    };
    i_19 = (i_19 + 1);
  };
  highp vec2 tmpvar_31;
  tmpvar_31.x = heat_22;
  tmpvar_31.y = dens_21;
  highp vec4 tmpvar_32;
  tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_32.x = tmpvar_31.x;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DLodEXT (_RampTex, tmpvar_32.xy, 0.0);
  col_1.xyz = tmpvar_33.xyz;
  highp float tmpvar_34;
  tmpvar_34 = clamp ((clamp (dens_21, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_34;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 p_10;
    p_10 = ((p_3 * _Frequency) + (_Time * _ScrollSpeed).y);
    highp vec2 rg_11;
    highp vec4 tmpvar_12;
    tmpvar_12.zw = vec2(0.0, 0.0);
    tmpvar_12.xy = (p_10.xz + (vec2(37.0, 13.0) * floor(p_10.y)));
    highp vec4 coord_13;
    coord_13 = (tmpvar_12 / 64.0);
    lowp vec2 tmpvar_14;
    tmpvar_14 = texture2DLodEXT (_MainTex, coord_13.xy, coord_13.w).yx;
    rg_11 = tmpvar_14;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - mix (rg_11.x, rg_11.y, fract(p_10.y)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_15;
      tmpvar_15.w = 0.0;
      tmpvar_15.xyz = p_3;
      tmpvar_5 = tmpvar_15;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_16;
  sphere_16 = xlv_TEXCOORD2;
  highp vec3 p_17;
  p_17 = tmpvar_5.xyz;
  highp vec3 d_18;
  int i_19;
  highp float fac_20;
  highp float dens_21;
  highp float heat_22;
  heat_22 = 0.0;
  dens_21 = 0.0;
  fac_20 = 0.5;
  d_18 = (normalize(xlv_TEXCOORD1) * 0.15);
  i_19 = 0;
  for (int i_19 = 0; i_19 < 8; ) {
    highp float tmpvar_23;
    highp vec3 p_24;
    p_24 = (p_17 - sphere_16.xyz);
    highp vec3 p_25;
    p_25 = ((p_17 * _Frequency) + (_Time * _ScrollSpeed).y);
    highp vec2 rg_26;
    highp vec4 tmpvar_27;
    tmpvar_27.zw = vec2(0.0, 0.0);
    tmpvar_27.xy = (p_25.xz + (vec2(37.0, 13.0) * floor(p_25.y)));
    highp vec4 coord_28;
    coord_28 = (tmpvar_27 / 64.0);
    lowp vec2 tmpvar_29;
    tmpvar_29 = texture2DLodEXT (_MainTex, coord_28.xy, coord_28.w).yx;
    rg_26 = tmpvar_29;
    tmpvar_23 = ((sqrt(dot (p_24, p_24)) - _Radius) - mix (rg_26.x, rg_26.y, fract(p_25.y)));
    if ((tmpvar_23 <= 0.05)) {
      highp vec3 p_30;
      p_30 = (p_17 - sphere_16.xyz);
      heat_22 = (heat_22 + pow (((((_Radius - sqrt(dot (p_30, p_30))) + 2.5) * fac_20) * _Heat), 3.0));
      fac_20 = (fac_20 * 0.25);
      dens_21 = (dens_21 + 0.3);
      p_17 = (p_17 - d_18);
    } else {
      p_17 = (p_17 - (d_18 * 3.0));
    };
    i_19 = (i_19 + 1);
  };
  highp vec2 tmpvar_31;
  tmpvar_31.x = heat_22;
  tmpvar_31.y = dens_21;
  highp vec4 tmpvar_32;
  tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_32.x = tmpvar_31.x;
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DLodEXT (_RampTex, tmpvar_32.xy, 0.0);
  col_1.xyz = tmpvar_33.xyz;
  highp float tmpvar_34;
  tmpvar_34 = clamp ((clamp (dens_21, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_34;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 396
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 396
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    return v;
}
#line 354
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    #line 356
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 371
highp vec2 heat( in highp vec4 sphere, in highp vec3 p, in highp vec3 d ) {
    #line 373
    highp float heat = 0.0;
    highp float dens = 0.0;
    highp float fac = 0.5;
    d *= 0.15;
    #line 377
    highp int i = 0;
    for ( ; (i < 8); (++i)) {
        #line 381
        highp float dis = distf( sphere, p);
        if ((dis <= 0.05)){
            heat += pow( ((((_Radius - distance( p, sphere.xyz)) + 2.5) * fac) * _Heat), 3.0);
            #line 385
            fac *= 0.25;
            dens += 0.3;
            p -= d;
        }
        else{
            #line 391
            p -= (d * 3.0);
        }
    }
    return vec2( heat, dens);
}
#line 358
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    #line 360
    highp float dist;
    highp int i = 0;
    for ( ; (i < 15); (++i)) {
        #line 365
        dist = distf( sphere, p);
        if ((dist < 0.05)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 369
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 396
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp vec2 hd = heat( i.sphere, m.xyz, normalize(i.viewVec));
    #line 400
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( hd.x, 0.0, 0.0, 0.0));
    col.w = xll_saturate_f((xll_saturate_f(hd.y) * _Alpha));
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 p_10;
    p_10 = ((p_3 * _Frequency) + (_Time * _ScrollSpeed).y);
    vec4 tmpvar_11;
    tmpvar_11.zw = vec2(0.0, 0.0);
    tmpvar_11.xy = (p_10.xz + (vec2(37.0, 13.0) * floor(p_10.y)));
    vec4 coord_12;
    coord_12 = (tmpvar_11 / 64.0);
    vec2 tmpvar_13;
    tmpvar_13 = texture2DLod (_MainTex, coord_12.xy, coord_12.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - mix (tmpvar_13.x, tmpvar_13.y, fract(p_10.y)));
    if ((tmpvar_8 < 0.05)) {
      vec4 tmpvar_14;
      tmpvar_14.w = 0.0;
      tmpvar_14.xyz = p_3;
      tmpvar_5 = tmpvar_14;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec3 p_15;
  p_15 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  float edge0_16;
  edge0_16 = (_Radius + 0.5);
  float t_17;
  t_17 = max (min (((sqrt(dot (p_15, p_15)) - edge0_16) / ((_Radius + 1.5) - edge0_16)), 1.0), 0.0);
  vec4 tmpvar_18;
  tmpvar_18.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_18.x = (1.0 - ((t_17 * (t_17 * (3.0 - (2.0 * t_17)))) / _Heat));
  col_1.xyz = texture2DLod (_RampTex, tmpvar_18.xy, 0.0).xyz;
  col_1.w = clamp (_Alpha, 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_OFF" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 p_10;
    p_10 = ((p_3 * _Frequency) + (_Time * _ScrollSpeed).y);
    highp vec2 rg_11;
    highp vec4 tmpvar_12;
    tmpvar_12.zw = vec2(0.0, 0.0);
    tmpvar_12.xy = (p_10.xz + (vec2(37.0, 13.0) * floor(p_10.y)));
    highp vec4 coord_13;
    coord_13 = (tmpvar_12 / 64.0);
    lowp vec2 tmpvar_14;
    tmpvar_14 = texture2DLodEXT (_MainTex, coord_13.xy, coord_13.w).yx;
    rg_11 = tmpvar_14;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - mix (rg_11.x, rg_11.y, fract(p_10.y)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_15;
      tmpvar_15.w = 0.0;
      tmpvar_15.xyz = p_3;
      tmpvar_5 = tmpvar_15;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_16;
  p_16 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_17;
  edge0_17 = (_Radius + 0.5);
  highp float t_18;
  t_18 = max (min (((sqrt(dot (p_16, p_16)) - edge0_17) / ((_Radius + 1.5) - edge0_17)), 1.0), 0.0);
  highp vec4 tmpvar_19;
  tmpvar_19.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_19.x = (1.0 - ((t_18 * (t_18 * (3.0 - (2.0 * t_18)))) / _Heat));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DLodEXT (_RampTex, tmpvar_19.xy, 0.0);
  col_1.xyz = tmpvar_20.xyz;
  highp float tmpvar_21;
  tmpvar_21 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_21;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 p_10;
    p_10 = ((p_3 * _Frequency) + (_Time * _ScrollSpeed).y);
    highp vec2 rg_11;
    highp vec4 tmpvar_12;
    tmpvar_12.zw = vec2(0.0, 0.0);
    tmpvar_12.xy = (p_10.xz + (vec2(37.0, 13.0) * floor(p_10.y)));
    highp vec4 coord_13;
    coord_13 = (tmpvar_12 / 64.0);
    lowp vec2 tmpvar_14;
    tmpvar_14 = texture2DLodEXT (_MainTex, coord_13.xy, coord_13.w).yx;
    rg_11 = tmpvar_14;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - mix (rg_11.x, rg_11.y, fract(p_10.y)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_15;
      tmpvar_15.w = 0.0;
      tmpvar_15.xyz = p_3;
      tmpvar_5 = tmpvar_15;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_16;
  p_16 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_17;
  edge0_17 = (_Radius + 0.5);
  highp float t_18;
  t_18 = max (min (((sqrt(dot (p_16, p_16)) - edge0_17) / ((_Radius + 1.5) - edge0_17)), 1.0), 0.0);
  highp vec4 tmpvar_19;
  tmpvar_19.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_19.x = (1.0 - ((t_18 * (t_18 * (3.0 - (2.0 * t_18)))) / _Heat));
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2DLodEXT (_RampTex, tmpvar_19.xy, 0.0);
  col_1.xyz = tmpvar_20.xyz;
  highp float tmpvar_21;
  tmpvar_21 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_21;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 396
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 396
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    return v;
}
#line 354
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    #line 356
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 358
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    #line 360
    highp float dist;
    highp int i = 0;
    for ( ; (i < 15); (++i)) {
        #line 365
        dist = distf( sphere, p);
        if ((dist < 0.05)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 369
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 396
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp float heatfac = (smoothstep( (_Radius + 0.5), (_Radius + 1.5), distance( m.xyz, i.sphere.xyz)) / _Heat);
    #line 400
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( (1.0 - heatfac), 0.0, 0.0, 0.0));
    col.w = xll_saturate_f(_Alpha);
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_ON" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 p_16;
    p_16 = ((tmpvar_10 * 2.0) + tmpvar_11.z);
    vec4 tmpvar_17;
    tmpvar_17.zw = vec2(0.0, 0.0);
    tmpvar_17.xy = (p_16.xz + (vec2(37.0, 13.0) * floor(p_16.y)));
    vec4 coord_18;
    coord_18 = (tmpvar_17 / 64.0);
    vec2 tmpvar_19;
    tmpvar_19 = texture2DLod (_MainTex, coord_18.xy, coord_18.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_19.x, tmpvar_19.y, fract(p_16.y)) / 2.0)));
    if ((tmpvar_8 < 0.05)) {
      vec4 tmpvar_20;
      tmpvar_20.w = 0.0;
      tmpvar_20.xyz = p_3;
      tmpvar_5 = tmpvar_20;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec4 sphere_21;
  sphere_21 = xlv_TEXCOORD2;
  vec3 p_22;
  p_22 = tmpvar_5.xyz;
  vec3 d_23;
  int i_24;
  float fac_25;
  float dens_26;
  float heat_27;
  heat_27 = 0.0;
  dens_26 = 0.0;
  fac_25 = 0.5;
  d_23 = (normalize(xlv_TEXCOORD1) * 0.15);
  i_24 = 0;
  for (int i_24 = 0; i_24 < 8; ) {
    float tmpvar_28;
    vec3 p_29;
    p_29 = (p_22 - sphere_21.xyz);
    vec3 tmpvar_30;
    tmpvar_30 = (p_22 * _Frequency);
    vec4 tmpvar_31;
    tmpvar_31 = (_Time * _ScrollSpeed);
    vec3 p_32;
    p_32 = (tmpvar_30 + tmpvar_31.y);
    vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.xy = (p_32.xz + (vec2(37.0, 13.0) * floor(p_32.y)));
    vec4 coord_34;
    coord_34 = (tmpvar_33 / 64.0);
    vec2 tmpvar_35;
    tmpvar_35 = texture2DLod (_MainTex, coord_34.xy, coord_34.w).yx;
    vec3 p_36;
    p_36 = ((tmpvar_30 * 2.0) + tmpvar_31.z);
    vec4 tmpvar_37;
    tmpvar_37.zw = vec2(0.0, 0.0);
    tmpvar_37.xy = (p_36.xz + (vec2(37.0, 13.0) * floor(p_36.y)));
    vec4 coord_38;
    coord_38 = (tmpvar_37 / 64.0);
    vec2 tmpvar_39;
    tmpvar_39 = texture2DLod (_MainTex, coord_38.xy, coord_38.w).yx;
    tmpvar_28 = ((sqrt(dot (p_29, p_29)) - _Radius) - (mix (tmpvar_35.x, tmpvar_35.y, fract(p_32.y)) + (mix (tmpvar_39.x, tmpvar_39.y, fract(p_36.y)) / 2.0)));
    if ((tmpvar_28 <= 0.05)) {
      vec3 p_40;
      p_40 = (p_22 - sphere_21.xyz);
      heat_27 = (heat_27 + pow (((((_Radius - sqrt(dot (p_40, p_40))) + 2.5) * fac_25) * _Heat), 3.0));
      fac_25 = (fac_25 * 0.25);
      dens_26 = (dens_26 + 0.3);
      p_22 = (p_22 - d_23);
    } else {
      p_22 = (p_22 - (d_23 * 3.0));
    };
    i_24 = (i_24 + 1);
  };
  vec2 tmpvar_41;
  tmpvar_41.x = heat_27;
  tmpvar_41.y = dens_26;
  vec4 tmpvar_42;
  tmpvar_42.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_42.x = tmpvar_41.x;
  col_1.xyz = texture2DLod (_RampTex, tmpvar_42.xy, 0.0).xyz;
  col_1.w = clamp ((clamp (dens_26, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_ON" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 p_17;
    p_17 = ((tmpvar_10 * 2.0) + tmpvar_11.z);
    highp vec2 rg_18;
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    highp vec4 coord_20;
    coord_20 = (tmpvar_19 / 64.0);
    lowp vec2 tmpvar_21;
    tmpvar_21 = texture2DLodEXT (_MainTex, coord_20.xy, coord_20.w).yx;
    rg_18 = tmpvar_21;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_18.x, rg_18.y, fract(p_17.y)) / 2.0)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_22;
      tmpvar_22.w = 0.0;
      tmpvar_22.xyz = p_3;
      tmpvar_5 = tmpvar_22;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_23;
  sphere_23 = xlv_TEXCOORD2;
  highp vec3 p_24;
  p_24 = tmpvar_5.xyz;
  highp vec3 d_25;
  int i_26;
  highp float fac_27;
  highp float dens_28;
  highp float heat_29;
  heat_29 = 0.0;
  dens_28 = 0.0;
  fac_27 = 0.5;
  d_25 = (normalize(xlv_TEXCOORD1) * 0.15);
  i_26 = 0;
  for (int i_26 = 0; i_26 < 8; ) {
    highp float tmpvar_30;
    highp vec3 p_31;
    p_31 = (p_24 - sphere_23.xyz);
    highp vec3 tmpvar_32;
    tmpvar_32 = (p_24 * _Frequency);
    highp vec4 tmpvar_33;
    tmpvar_33 = (_Time * _ScrollSpeed);
    highp vec3 p_34;
    p_34 = (tmpvar_32 + tmpvar_33.y);
    highp vec2 rg_35;
    highp vec4 tmpvar_36;
    tmpvar_36.zw = vec2(0.0, 0.0);
    tmpvar_36.xy = (p_34.xz + (vec2(37.0, 13.0) * floor(p_34.y)));
    highp vec4 coord_37;
    coord_37 = (tmpvar_36 / 64.0);
    lowp vec2 tmpvar_38;
    tmpvar_38 = texture2DLodEXT (_MainTex, coord_37.xy, coord_37.w).yx;
    rg_35 = tmpvar_38;
    highp vec3 p_39;
    p_39 = ((tmpvar_32 * 2.0) + tmpvar_33.z);
    highp vec2 rg_40;
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.xy = (p_39.xz + (vec2(37.0, 13.0) * floor(p_39.y)));
    highp vec4 coord_42;
    coord_42 = (tmpvar_41 / 64.0);
    lowp vec2 tmpvar_43;
    tmpvar_43 = texture2DLodEXT (_MainTex, coord_42.xy, coord_42.w).yx;
    rg_40 = tmpvar_43;
    tmpvar_30 = ((sqrt(dot (p_31, p_31)) - _Radius) - (mix (rg_35.x, rg_35.y, fract(p_34.y)) + (mix (rg_40.x, rg_40.y, fract(p_39.y)) / 2.0)));
    if ((tmpvar_30 <= 0.05)) {
      highp vec3 p_44;
      p_44 = (p_24 - sphere_23.xyz);
      heat_29 = (heat_29 + pow (((((_Radius - sqrt(dot (p_44, p_44))) + 2.5) * fac_27) * _Heat), 3.0));
      fac_27 = (fac_27 * 0.25);
      dens_28 = (dens_28 + 0.3);
      p_24 = (p_24 - d_25);
    } else {
      p_24 = (p_24 - (d_25 * 3.0));
    };
    i_26 = (i_26 + 1);
  };
  highp vec2 tmpvar_45;
  tmpvar_45.x = heat_29;
  tmpvar_45.y = dens_28;
  highp vec4 tmpvar_46;
  tmpvar_46.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_46.x = tmpvar_45.x;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DLodEXT (_RampTex, tmpvar_46.xy, 0.0);
  col_1.xyz = tmpvar_47.xyz;
  highp float tmpvar_48;
  tmpvar_48 = clamp ((clamp (dens_28, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_48;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 p_17;
    p_17 = ((tmpvar_10 * 2.0) + tmpvar_11.z);
    highp vec2 rg_18;
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    highp vec4 coord_20;
    coord_20 = (tmpvar_19 / 64.0);
    lowp vec2 tmpvar_21;
    tmpvar_21 = texture2DLodEXT (_MainTex, coord_20.xy, coord_20.w).yx;
    rg_18 = tmpvar_21;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_18.x, rg_18.y, fract(p_17.y)) / 2.0)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_22;
      tmpvar_22.w = 0.0;
      tmpvar_22.xyz = p_3;
      tmpvar_5 = tmpvar_22;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_23;
  sphere_23 = xlv_TEXCOORD2;
  highp vec3 p_24;
  p_24 = tmpvar_5.xyz;
  highp vec3 d_25;
  int i_26;
  highp float fac_27;
  highp float dens_28;
  highp float heat_29;
  heat_29 = 0.0;
  dens_28 = 0.0;
  fac_27 = 0.5;
  d_25 = (normalize(xlv_TEXCOORD1) * 0.15);
  i_26 = 0;
  for (int i_26 = 0; i_26 < 8; ) {
    highp float tmpvar_30;
    highp vec3 p_31;
    p_31 = (p_24 - sphere_23.xyz);
    highp vec3 tmpvar_32;
    tmpvar_32 = (p_24 * _Frequency);
    highp vec4 tmpvar_33;
    tmpvar_33 = (_Time * _ScrollSpeed);
    highp vec3 p_34;
    p_34 = (tmpvar_32 + tmpvar_33.y);
    highp vec2 rg_35;
    highp vec4 tmpvar_36;
    tmpvar_36.zw = vec2(0.0, 0.0);
    tmpvar_36.xy = (p_34.xz + (vec2(37.0, 13.0) * floor(p_34.y)));
    highp vec4 coord_37;
    coord_37 = (tmpvar_36 / 64.0);
    lowp vec2 tmpvar_38;
    tmpvar_38 = texture2DLodEXT (_MainTex, coord_37.xy, coord_37.w).yx;
    rg_35 = tmpvar_38;
    highp vec3 p_39;
    p_39 = ((tmpvar_32 * 2.0) + tmpvar_33.z);
    highp vec2 rg_40;
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.xy = (p_39.xz + (vec2(37.0, 13.0) * floor(p_39.y)));
    highp vec4 coord_42;
    coord_42 = (tmpvar_41 / 64.0);
    lowp vec2 tmpvar_43;
    tmpvar_43 = texture2DLodEXT (_MainTex, coord_42.xy, coord_42.w).yx;
    rg_40 = tmpvar_43;
    tmpvar_30 = ((sqrt(dot (p_31, p_31)) - _Radius) - (mix (rg_35.x, rg_35.y, fract(p_34.y)) + (mix (rg_40.x, rg_40.y, fract(p_39.y)) / 2.0)));
    if ((tmpvar_30 <= 0.05)) {
      highp vec3 p_44;
      p_44 = (p_24 - sphere_23.xyz);
      heat_29 = (heat_29 + pow (((((_Radius - sqrt(dot (p_44, p_44))) + 2.5) * fac_27) * _Heat), 3.0));
      fac_27 = (fac_27 * 0.25);
      dens_28 = (dens_28 + 0.3);
      p_24 = (p_24 - d_25);
    } else {
      p_24 = (p_24 - (d_25 * 3.0));
    };
    i_26 = (i_26 + 1);
  };
  highp vec2 tmpvar_45;
  tmpvar_45.x = heat_29;
  tmpvar_45.y = dens_28;
  highp vec4 tmpvar_46;
  tmpvar_46.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_46.x = tmpvar_45.x;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2DLodEXT (_RampTex, tmpvar_46.xy, 0.0);
  col_1.xyz = tmpvar_47.xyz;
  highp float tmpvar_48;
  tmpvar_48 = clamp ((clamp (dens_28, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_48;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 357
#line 361
#line 399
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 357
#line 361
#line 399
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    return v;
}
#line 357
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 374
highp vec2 heat( in highp vec4 sphere, in highp vec3 p, in highp vec3 d ) {
    #line 376
    highp float heat = 0.0;
    highp float dens = 0.0;
    highp float fac = 0.5;
    d *= 0.15;
    #line 380
    highp int i = 0;
    for ( ; (i < 8); (++i)) {
        #line 384
        highp float dis = distf( sphere, p);
        if ((dis <= 0.05)){
            heat += pow( ((((_Radius - distance( p, sphere.xyz)) + 2.5) * fac) * _Heat), 3.0);
            #line 388
            fac *= 0.25;
            dens += 0.3;
            p -= d;
        }
        else{
            #line 394
            p -= (d * 3.0);
        }
    }
    return vec2( heat, dens);
}
#line 361
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    highp float dist;
    highp int i = 0;
    for ( ; (i < 15); (++i)) {
        #line 368
        dist = distf( sphere, p);
        if ((dist < 0.05)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 372
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 399
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp vec2 hd = heat( i.sphere, m.xyz, normalize(i.viewVec));
    #line 403
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( hd.x, 0.0, 0.0, 0.0));
    col.w = xll_saturate_f((xll_saturate_f(hd.y) * _Alpha));
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 p_16;
    p_16 = ((tmpvar_10 * 2.0) + tmpvar_11.z);
    vec4 tmpvar_17;
    tmpvar_17.zw = vec2(0.0, 0.0);
    tmpvar_17.xy = (p_16.xz + (vec2(37.0, 13.0) * floor(p_16.y)));
    vec4 coord_18;
    coord_18 = (tmpvar_17 / 64.0);
    vec2 tmpvar_19;
    tmpvar_19 = texture2DLod (_MainTex, coord_18.xy, coord_18.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_19.x, tmpvar_19.y, fract(p_16.y)) / 2.0)));
    if ((tmpvar_8 < 0.05)) {
      vec4 tmpvar_20;
      tmpvar_20.w = 0.0;
      tmpvar_20.xyz = p_3;
      tmpvar_5 = tmpvar_20;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec3 p_21;
  p_21 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  float edge0_22;
  edge0_22 = (_Radius + 0.5);
  float t_23;
  t_23 = max (min (((sqrt(dot (p_21, p_21)) - edge0_22) / ((_Radius + 1.5) - edge0_22)), 1.0), 0.0);
  vec4 tmpvar_24;
  tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_24.x = (1.0 - ((t_23 * (t_23 * (3.0 - (2.0 * t_23)))) / _Heat));
  col_1.xyz = texture2DLod (_RampTex, tmpvar_24.xy, 0.0).xyz;
  col_1.w = clamp (_Alpha, 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_OFF" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 p_17;
    p_17 = ((tmpvar_10 * 2.0) + tmpvar_11.z);
    highp vec2 rg_18;
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    highp vec4 coord_20;
    coord_20 = (tmpvar_19 / 64.0);
    lowp vec2 tmpvar_21;
    tmpvar_21 = texture2DLodEXT (_MainTex, coord_20.xy, coord_20.w).yx;
    rg_18 = tmpvar_21;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_18.x, rg_18.y, fract(p_17.y)) / 2.0)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_22;
      tmpvar_22.w = 0.0;
      tmpvar_22.xyz = p_3;
      tmpvar_5 = tmpvar_22;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_23;
  p_23 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_24;
  edge0_24 = (_Radius + 0.5);
  highp float t_25;
  t_25 = max (min (((sqrt(dot (p_23, p_23)) - edge0_24) / ((_Radius + 1.5) - edge0_24)), 1.0), 0.0);
  highp vec4 tmpvar_26;
  tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_26.x = (1.0 - ((t_25 * (t_25 * (3.0 - (2.0 * t_25)))) / _Heat));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DLodEXT (_RampTex, tmpvar_26.xy, 0.0);
  col_1.xyz = tmpvar_27.xyz;
  highp float tmpvar_28;
  tmpvar_28 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_28;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 p_17;
    p_17 = ((tmpvar_10 * 2.0) + tmpvar_11.z);
    highp vec2 rg_18;
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    highp vec4 coord_20;
    coord_20 = (tmpvar_19 / 64.0);
    lowp vec2 tmpvar_21;
    tmpvar_21 = texture2DLodEXT (_MainTex, coord_20.xy, coord_20.w).yx;
    rg_18 = tmpvar_21;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - (mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_18.x, rg_18.y, fract(p_17.y)) / 2.0)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_22;
      tmpvar_22.w = 0.0;
      tmpvar_22.xyz = p_3;
      tmpvar_5 = tmpvar_22;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_23;
  p_23 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_24;
  edge0_24 = (_Radius + 0.5);
  highp float t_25;
  t_25 = max (min (((sqrt(dot (p_23, p_23)) - edge0_24) / ((_Radius + 1.5) - edge0_24)), 1.0), 0.0);
  highp vec4 tmpvar_26;
  tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_26.x = (1.0 - ((t_25 * (t_25 * (3.0 - (2.0 * t_25)))) / _Heat));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DLodEXT (_RampTex, tmpvar_26.xy, 0.0);
  col_1.xyz = tmpvar_27.xyz;
  highp float tmpvar_28;
  tmpvar_28 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_28;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 357
#line 361
#line 399
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 357
#line 361
#line 399
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    return v;
}
#line 357
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 361
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    highp float dist;
    highp int i = 0;
    for ( ; (i < 15); (++i)) {
        #line 368
        dist = distf( sphere, p);
        if ((dist < 0.05)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 372
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 399
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp float heatfac = (smoothstep( (_Radius + 0.5), (_Radius + 1.5), distance( m.xyz, i.sphere.xyz)) / _Heat);
    #line 403
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( (1.0 - heatfac), 0.0, 0.0, 0.0));
    col.w = xll_saturate_f(_Alpha);
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_ON" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 tmpvar_16;
    tmpvar_16 = (tmpvar_10 * 2.0);
    vec3 p_17;
    p_17 = (tmpvar_16 + tmpvar_11.z);
    vec4 tmpvar_18;
    tmpvar_18.zw = vec2(0.0, 0.0);
    tmpvar_18.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    vec4 coord_19;
    coord_19 = (tmpvar_18 / 64.0);
    vec2 tmpvar_20;
    tmpvar_20 = texture2DLod (_MainTex, coord_19.xy, coord_19.w).yx;
    vec3 p_21;
    p_21 = ((tmpvar_16 * 2.0) + tmpvar_11.z);
    vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.xy = (p_21.xz + (vec2(37.0, 13.0) * floor(p_21.y)));
    vec4 coord_23;
    coord_23 = (tmpvar_22 / 64.0);
    vec2 tmpvar_24;
    tmpvar_24 = texture2DLod (_MainTex, coord_23.xy, coord_23.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_20.x, tmpvar_20.y, fract(p_17.y)) / 2.0)) + (mix (tmpvar_24.x, tmpvar_24.y, fract(p_21.y)) / 4.0)));
    if ((tmpvar_8 < 0.05)) {
      vec4 tmpvar_25;
      tmpvar_25.w = 0.0;
      tmpvar_25.xyz = p_3;
      tmpvar_5 = tmpvar_25;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec4 sphere_26;
  sphere_26 = xlv_TEXCOORD2;
  vec3 p_27;
  p_27 = tmpvar_5.xyz;
  vec3 d_28;
  int i_29;
  float fac_30;
  float dens_31;
  float heat_32;
  heat_32 = 0.0;
  dens_31 = 0.0;
  fac_30 = 0.5;
  d_28 = (normalize(xlv_TEXCOORD1) * 0.15);
  i_29 = 0;
  for (int i_29 = 0; i_29 < 8; ) {
    float tmpvar_33;
    vec3 p_34;
    p_34 = (p_27 - sphere_26.xyz);
    vec3 tmpvar_35;
    tmpvar_35 = (p_27 * _Frequency);
    vec4 tmpvar_36;
    tmpvar_36 = (_Time * _ScrollSpeed);
    vec3 p_37;
    p_37 = (tmpvar_35 + tmpvar_36.y);
    vec4 tmpvar_38;
    tmpvar_38.zw = vec2(0.0, 0.0);
    tmpvar_38.xy = (p_37.xz + (vec2(37.0, 13.0) * floor(p_37.y)));
    vec4 coord_39;
    coord_39 = (tmpvar_38 / 64.0);
    vec2 tmpvar_40;
    tmpvar_40 = texture2DLod (_MainTex, coord_39.xy, coord_39.w).yx;
    vec3 tmpvar_41;
    tmpvar_41 = (tmpvar_35 * 2.0);
    vec3 p_42;
    p_42 = (tmpvar_41 + tmpvar_36.z);
    vec4 tmpvar_43;
    tmpvar_43.zw = vec2(0.0, 0.0);
    tmpvar_43.xy = (p_42.xz + (vec2(37.0, 13.0) * floor(p_42.y)));
    vec4 coord_44;
    coord_44 = (tmpvar_43 / 64.0);
    vec2 tmpvar_45;
    tmpvar_45 = texture2DLod (_MainTex, coord_44.xy, coord_44.w).yx;
    vec3 p_46;
    p_46 = ((tmpvar_41 * 2.0) + tmpvar_36.z);
    vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.xy = (p_46.xz + (vec2(37.0, 13.0) * floor(p_46.y)));
    vec4 coord_48;
    coord_48 = (tmpvar_47 / 64.0);
    vec2 tmpvar_49;
    tmpvar_49 = texture2DLod (_MainTex, coord_48.xy, coord_48.w).yx;
    tmpvar_33 = ((sqrt(dot (p_34, p_34)) - _Radius) - ((mix (tmpvar_40.x, tmpvar_40.y, fract(p_37.y)) + (mix (tmpvar_45.x, tmpvar_45.y, fract(p_42.y)) / 2.0)) + (mix (tmpvar_49.x, tmpvar_49.y, fract(p_46.y)) / 4.0)));
    if ((tmpvar_33 <= 0.05)) {
      vec3 p_50;
      p_50 = (p_27 - sphere_26.xyz);
      heat_32 = (heat_32 + pow (((((_Radius - sqrt(dot (p_50, p_50))) + 2.5) * fac_30) * _Heat), 3.0));
      fac_30 = (fac_30 * 0.25);
      dens_31 = (dens_31 + 0.3);
      p_27 = (p_27 - d_28);
    } else {
      p_27 = (p_27 - (d_28 * 3.0));
    };
    i_29 = (i_29 + 1);
  };
  vec2 tmpvar_51;
  tmpvar_51.x = heat_32;
  tmpvar_51.y = dens_31;
  vec4 tmpvar_52;
  tmpvar_52.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_52.x = tmpvar_51.x;
  col_1.xyz = texture2DLod (_RampTex, tmpvar_52.xy, 0.0).xyz;
  col_1.w = clamp ((clamp (dens_31, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_ON" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 p_23;
    p_23 = ((tmpvar_17 * 2.0) + tmpvar_11.z);
    highp vec2 rg_24;
    highp vec4 tmpvar_25;
    tmpvar_25.zw = vec2(0.0, 0.0);
    tmpvar_25.xy = (p_23.xz + (vec2(37.0, 13.0) * floor(p_23.y)));
    highp vec4 coord_26;
    coord_26 = (tmpvar_25 / 64.0);
    lowp vec2 tmpvar_27;
    tmpvar_27 = texture2DLodEXT (_MainTex, coord_26.xy, coord_26.w).yx;
    rg_24 = tmpvar_27;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_24.x, rg_24.y, fract(p_23.y)) / 4.0)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_28;
      tmpvar_28.w = 0.0;
      tmpvar_28.xyz = p_3;
      tmpvar_5 = tmpvar_28;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_29;
  sphere_29 = xlv_TEXCOORD2;
  highp vec3 p_30;
  p_30 = tmpvar_5.xyz;
  highp vec3 d_31;
  int i_32;
  highp float fac_33;
  highp float dens_34;
  highp float heat_35;
  heat_35 = 0.0;
  dens_34 = 0.0;
  fac_33 = 0.5;
  d_31 = (normalize(xlv_TEXCOORD1) * 0.15);
  i_32 = 0;
  for (int i_32 = 0; i_32 < 8; ) {
    highp float tmpvar_36;
    highp vec3 p_37;
    p_37 = (p_30 - sphere_29.xyz);
    highp vec3 tmpvar_38;
    tmpvar_38 = (p_30 * _Frequency);
    highp vec4 tmpvar_39;
    tmpvar_39 = (_Time * _ScrollSpeed);
    highp vec3 p_40;
    p_40 = (tmpvar_38 + tmpvar_39.y);
    highp vec2 rg_41;
    highp vec4 tmpvar_42;
    tmpvar_42.zw = vec2(0.0, 0.0);
    tmpvar_42.xy = (p_40.xz + (vec2(37.0, 13.0) * floor(p_40.y)));
    highp vec4 coord_43;
    coord_43 = (tmpvar_42 / 64.0);
    lowp vec2 tmpvar_44;
    tmpvar_44 = texture2DLodEXT (_MainTex, coord_43.xy, coord_43.w).yx;
    rg_41 = tmpvar_44;
    highp vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_38 * 2.0);
    highp vec3 p_46;
    p_46 = (tmpvar_45 + tmpvar_39.z);
    highp vec2 rg_47;
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.xy = (p_46.xz + (vec2(37.0, 13.0) * floor(p_46.y)));
    highp vec4 coord_49;
    coord_49 = (tmpvar_48 / 64.0);
    lowp vec2 tmpvar_50;
    tmpvar_50 = texture2DLodEXT (_MainTex, coord_49.xy, coord_49.w).yx;
    rg_47 = tmpvar_50;
    highp vec3 p_51;
    p_51 = ((tmpvar_45 * 2.0) + tmpvar_39.z);
    highp vec2 rg_52;
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.xy = (p_51.xz + (vec2(37.0, 13.0) * floor(p_51.y)));
    highp vec4 coord_54;
    coord_54 = (tmpvar_53 / 64.0);
    lowp vec2 tmpvar_55;
    tmpvar_55 = texture2DLodEXT (_MainTex, coord_54.xy, coord_54.w).yx;
    rg_52 = tmpvar_55;
    tmpvar_36 = ((sqrt(dot (p_37, p_37)) - _Radius) - ((mix (rg_41.x, rg_41.y, fract(p_40.y)) + (mix (rg_47.x, rg_47.y, fract(p_46.y)) / 2.0)) + (mix (rg_52.x, rg_52.y, fract(p_51.y)) / 4.0)));
    if ((tmpvar_36 <= 0.05)) {
      highp vec3 p_56;
      p_56 = (p_30 - sphere_29.xyz);
      heat_35 = (heat_35 + pow (((((_Radius - sqrt(dot (p_56, p_56))) + 2.5) * fac_33) * _Heat), 3.0));
      fac_33 = (fac_33 * 0.25);
      dens_34 = (dens_34 + 0.3);
      p_30 = (p_30 - d_31);
    } else {
      p_30 = (p_30 - (d_31 * 3.0));
    };
    i_32 = (i_32 + 1);
  };
  highp vec2 tmpvar_57;
  tmpvar_57.x = heat_35;
  tmpvar_57.y = dens_34;
  highp vec4 tmpvar_58;
  tmpvar_58.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_58.x = tmpvar_57.x;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DLodEXT (_RampTex, tmpvar_58.xy, 0.0);
  col_1.xyz = tmpvar_59.xyz;
  highp float tmpvar_60;
  tmpvar_60 = clamp ((clamp (dens_34, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_60;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 p_23;
    p_23 = ((tmpvar_17 * 2.0) + tmpvar_11.z);
    highp vec2 rg_24;
    highp vec4 tmpvar_25;
    tmpvar_25.zw = vec2(0.0, 0.0);
    tmpvar_25.xy = (p_23.xz + (vec2(37.0, 13.0) * floor(p_23.y)));
    highp vec4 coord_26;
    coord_26 = (tmpvar_25 / 64.0);
    lowp vec2 tmpvar_27;
    tmpvar_27 = texture2DLodEXT (_MainTex, coord_26.xy, coord_26.w).yx;
    rg_24 = tmpvar_27;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_24.x, rg_24.y, fract(p_23.y)) / 4.0)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_28;
      tmpvar_28.w = 0.0;
      tmpvar_28.xyz = p_3;
      tmpvar_5 = tmpvar_28;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_29;
  sphere_29 = xlv_TEXCOORD2;
  highp vec3 p_30;
  p_30 = tmpvar_5.xyz;
  highp vec3 d_31;
  int i_32;
  highp float fac_33;
  highp float dens_34;
  highp float heat_35;
  heat_35 = 0.0;
  dens_34 = 0.0;
  fac_33 = 0.5;
  d_31 = (normalize(xlv_TEXCOORD1) * 0.15);
  i_32 = 0;
  for (int i_32 = 0; i_32 < 8; ) {
    highp float tmpvar_36;
    highp vec3 p_37;
    p_37 = (p_30 - sphere_29.xyz);
    highp vec3 tmpvar_38;
    tmpvar_38 = (p_30 * _Frequency);
    highp vec4 tmpvar_39;
    tmpvar_39 = (_Time * _ScrollSpeed);
    highp vec3 p_40;
    p_40 = (tmpvar_38 + tmpvar_39.y);
    highp vec2 rg_41;
    highp vec4 tmpvar_42;
    tmpvar_42.zw = vec2(0.0, 0.0);
    tmpvar_42.xy = (p_40.xz + (vec2(37.0, 13.0) * floor(p_40.y)));
    highp vec4 coord_43;
    coord_43 = (tmpvar_42 / 64.0);
    lowp vec2 tmpvar_44;
    tmpvar_44 = texture2DLodEXT (_MainTex, coord_43.xy, coord_43.w).yx;
    rg_41 = tmpvar_44;
    highp vec3 tmpvar_45;
    tmpvar_45 = (tmpvar_38 * 2.0);
    highp vec3 p_46;
    p_46 = (tmpvar_45 + tmpvar_39.z);
    highp vec2 rg_47;
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.xy = (p_46.xz + (vec2(37.0, 13.0) * floor(p_46.y)));
    highp vec4 coord_49;
    coord_49 = (tmpvar_48 / 64.0);
    lowp vec2 tmpvar_50;
    tmpvar_50 = texture2DLodEXT (_MainTex, coord_49.xy, coord_49.w).yx;
    rg_47 = tmpvar_50;
    highp vec3 p_51;
    p_51 = ((tmpvar_45 * 2.0) + tmpvar_39.z);
    highp vec2 rg_52;
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.xy = (p_51.xz + (vec2(37.0, 13.0) * floor(p_51.y)));
    highp vec4 coord_54;
    coord_54 = (tmpvar_53 / 64.0);
    lowp vec2 tmpvar_55;
    tmpvar_55 = texture2DLodEXT (_MainTex, coord_54.xy, coord_54.w).yx;
    rg_52 = tmpvar_55;
    tmpvar_36 = ((sqrt(dot (p_37, p_37)) - _Radius) - ((mix (rg_41.x, rg_41.y, fract(p_40.y)) + (mix (rg_47.x, rg_47.y, fract(p_46.y)) / 2.0)) + (mix (rg_52.x, rg_52.y, fract(p_51.y)) / 4.0)));
    if ((tmpvar_36 <= 0.05)) {
      highp vec3 p_56;
      p_56 = (p_30 - sphere_29.xyz);
      heat_35 = (heat_35 + pow (((((_Radius - sqrt(dot (p_56, p_56))) + 2.5) * fac_33) * _Heat), 3.0));
      fac_33 = (fac_33 * 0.25);
      dens_34 = (dens_34 + 0.3);
      p_30 = (p_30 - d_31);
    } else {
      p_30 = (p_30 - (d_31 * 3.0));
    };
    i_32 = (i_32 + 1);
  };
  highp vec2 tmpvar_57;
  tmpvar_57.x = heat_35;
  tmpvar_57.y = dens_34;
  highp vec4 tmpvar_58;
  tmpvar_58.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_58.x = tmpvar_57.x;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2DLodEXT (_RampTex, tmpvar_58.xy, 0.0);
  col_1.xyz = tmpvar_59.xyz;
  highp float tmpvar_60;
  tmpvar_60 = clamp ((clamp (dens_34, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_60;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 401
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 401
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    v += (noise( (p + offset.z)) / 4.0);
    #line 356
    p *= 2.0;
    return v;
}
#line 359
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    #line 361
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 376
highp vec2 heat( in highp vec4 sphere, in highp vec3 p, in highp vec3 d ) {
    #line 378
    highp float heat = 0.0;
    highp float dens = 0.0;
    highp float fac = 0.5;
    d *= 0.15;
    #line 382
    highp int i = 0;
    for ( ; (i < 8); (++i)) {
        #line 386
        highp float dis = distf( sphere, p);
        if ((dis <= 0.05)){
            heat += pow( ((((_Radius - distance( p, sphere.xyz)) + 2.5) * fac) * _Heat), 3.0);
            #line 390
            fac *= 0.25;
            dens += 0.3;
            p -= d;
        }
        else{
            #line 396
            p -= (d * 3.0);
        }
    }
    return vec2( heat, dens);
}
#line 363
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    #line 365
    highp float dist;
    highp int i = 0;
    for ( ; (i < 15); (++i)) {
        #line 370
        dist = distf( sphere, p);
        if ((dist < 0.05)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 374
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 401
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp vec2 hd = heat( i.sphere, m.xyz, normalize(i.viewVec));
    #line 405
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( hd.x, 0.0, 0.0, 0.0));
    col.w = xll_saturate_f((xll_saturate_f(hd.y) * _Alpha));
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 tmpvar_16;
    tmpvar_16 = (tmpvar_10 * 2.0);
    vec3 p_17;
    p_17 = (tmpvar_16 + tmpvar_11.z);
    vec4 tmpvar_18;
    tmpvar_18.zw = vec2(0.0, 0.0);
    tmpvar_18.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    vec4 coord_19;
    coord_19 = (tmpvar_18 / 64.0);
    vec2 tmpvar_20;
    tmpvar_20 = texture2DLod (_MainTex, coord_19.xy, coord_19.w).yx;
    vec3 p_21;
    p_21 = ((tmpvar_16 * 2.0) + tmpvar_11.z);
    vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.xy = (p_21.xz + (vec2(37.0, 13.0) * floor(p_21.y)));
    vec4 coord_23;
    coord_23 = (tmpvar_22 / 64.0);
    vec2 tmpvar_24;
    tmpvar_24 = texture2DLod (_MainTex, coord_23.xy, coord_23.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_20.x, tmpvar_20.y, fract(p_17.y)) / 2.0)) + (mix (tmpvar_24.x, tmpvar_24.y, fract(p_21.y)) / 4.0)));
    if ((tmpvar_8 < 0.05)) {
      vec4 tmpvar_25;
      tmpvar_25.w = 0.0;
      tmpvar_25.xyz = p_3;
      tmpvar_5 = tmpvar_25;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec3 p_26;
  p_26 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  float edge0_27;
  edge0_27 = (_Radius + 0.5);
  float t_28;
  t_28 = max (min (((sqrt(dot (p_26, p_26)) - edge0_27) / ((_Radius + 1.5) - edge0_27)), 1.0), 0.0);
  vec4 tmpvar_29;
  tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_29.x = (1.0 - ((t_28 * (t_28 * (3.0 - (2.0 * t_28)))) / _Heat));
  col_1.xyz = texture2DLod (_RampTex, tmpvar_29.xy, 0.0).xyz;
  col_1.w = clamp (_Alpha, 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_OFF" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 p_23;
    p_23 = ((tmpvar_17 * 2.0) + tmpvar_11.z);
    highp vec2 rg_24;
    highp vec4 tmpvar_25;
    tmpvar_25.zw = vec2(0.0, 0.0);
    tmpvar_25.xy = (p_23.xz + (vec2(37.0, 13.0) * floor(p_23.y)));
    highp vec4 coord_26;
    coord_26 = (tmpvar_25 / 64.0);
    lowp vec2 tmpvar_27;
    tmpvar_27 = texture2DLodEXT (_MainTex, coord_26.xy, coord_26.w).yx;
    rg_24 = tmpvar_27;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_24.x, rg_24.y, fract(p_23.y)) / 4.0)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_28;
      tmpvar_28.w = 0.0;
      tmpvar_28.xyz = p_3;
      tmpvar_5 = tmpvar_28;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_29;
  p_29 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_30;
  edge0_30 = (_Radius + 0.5);
  highp float t_31;
  t_31 = max (min (((sqrt(dot (p_29, p_29)) - edge0_30) / ((_Radius + 1.5) - edge0_30)), 1.0), 0.0);
  highp vec4 tmpvar_32;
  tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_32.x = (1.0 - ((t_31 * (t_31 * (3.0 - (2.0 * t_31)))) / _Heat));
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DLodEXT (_RampTex, tmpvar_32.xy, 0.0);
  col_1.xyz = tmpvar_33.xyz;
  highp float tmpvar_34;
  tmpvar_34 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_34;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 p_23;
    p_23 = ((tmpvar_17 * 2.0) + tmpvar_11.z);
    highp vec2 rg_24;
    highp vec4 tmpvar_25;
    tmpvar_25.zw = vec2(0.0, 0.0);
    tmpvar_25.xy = (p_23.xz + (vec2(37.0, 13.0) * floor(p_23.y)));
    highp vec4 coord_26;
    coord_26 = (tmpvar_25 / 64.0);
    lowp vec2 tmpvar_27;
    tmpvar_27 = texture2DLodEXT (_MainTex, coord_26.xy, coord_26.w).yx;
    rg_24 = tmpvar_27;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_24.x, rg_24.y, fract(p_23.y)) / 4.0)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_28;
      tmpvar_28.w = 0.0;
      tmpvar_28.xyz = p_3;
      tmpvar_5 = tmpvar_28;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_29;
  p_29 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_30;
  edge0_30 = (_Radius + 0.5);
  highp float t_31;
  t_31 = max (min (((sqrt(dot (p_29, p_29)) - edge0_30) / ((_Radius + 1.5) - edge0_30)), 1.0), 0.0);
  highp vec4 tmpvar_32;
  tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_32.x = (1.0 - ((t_31 * (t_31 * (3.0 - (2.0 * t_31)))) / _Heat));
  lowp vec4 tmpvar_33;
  tmpvar_33 = texture2DLodEXT (_RampTex, tmpvar_32.xy, 0.0);
  col_1.xyz = tmpvar_33.xyz;
  highp float tmpvar_34;
  tmpvar_34 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_34;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 401
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 401
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    v += (noise( (p + offset.z)) / 4.0);
    #line 356
    p *= 2.0;
    return v;
}
#line 359
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    #line 361
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 363
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    #line 365
    highp float dist;
    highp int i = 0;
    for ( ; (i < 15); (++i)) {
        #line 370
        dist = distf( sphere, p);
        if ((dist < 0.05)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 374
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 401
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp float heatfac = (smoothstep( (_Radius + 0.5), (_Radius + 1.5), distance( m.xyz, i.sphere.xyz)) / _Heat);
    #line 405
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( (1.0 - heatfac), 0.0, 0.0, 0.0));
    col.w = xll_saturate_f(_Alpha);
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_ON" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 tmpvar_16;
    tmpvar_16 = (tmpvar_10 * 2.0);
    vec3 p_17;
    p_17 = (tmpvar_16 + tmpvar_11.z);
    vec4 tmpvar_18;
    tmpvar_18.zw = vec2(0.0, 0.0);
    tmpvar_18.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    vec4 coord_19;
    coord_19 = (tmpvar_18 / 64.0);
    vec2 tmpvar_20;
    tmpvar_20 = texture2DLod (_MainTex, coord_19.xy, coord_19.w).yx;
    vec3 tmpvar_21;
    tmpvar_21 = (tmpvar_16 * 2.0);
    vec3 p_22;
    p_22 = (tmpvar_21 + tmpvar_11.z);
    vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.xy = (p_22.xz + (vec2(37.0, 13.0) * floor(p_22.y)));
    vec4 coord_24;
    coord_24 = (tmpvar_23 / 64.0);
    vec2 tmpvar_25;
    tmpvar_25 = texture2DLod (_MainTex, coord_24.xy, coord_24.w).yx;
    vec3 tmpvar_26;
    tmpvar_26 = (tmpvar_21 * 2.0);
    vec3 p_27;
    p_27 = (tmpvar_26 + tmpvar_11.w);
    vec4 tmpvar_28;
    tmpvar_28.zw = vec2(0.0, 0.0);
    tmpvar_28.xy = (p_27.xz + (vec2(37.0, 13.0) * floor(p_27.y)));
    vec4 coord_29;
    coord_29 = (tmpvar_28 / 64.0);
    vec2 tmpvar_30;
    tmpvar_30 = texture2DLod (_MainTex, coord_29.xy, coord_29.w).yx;
    vec3 p_31;
    p_31 = ((tmpvar_26 * 2.0) + tmpvar_11.w);
    vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.xy = (p_31.xz + (vec2(37.0, 13.0) * floor(p_31.y)));
    vec4 coord_33;
    coord_33 = (tmpvar_32 / 64.0);
    vec2 tmpvar_34;
    tmpvar_34 = texture2DLod (_MainTex, coord_33.xy, coord_33.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((((mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_20.x, tmpvar_20.y, fract(p_17.y)) / 2.0)) + (mix (tmpvar_25.x, tmpvar_25.y, fract(p_22.y)) / 4.0)) + (mix (tmpvar_30.x, tmpvar_30.y, fract(p_27.y)) / 8.0)) + (mix (tmpvar_34.x, tmpvar_34.y, fract(p_31.y)) / 16.0)));
    if ((tmpvar_8 < 0.05)) {
      vec4 tmpvar_35;
      tmpvar_35.w = 0.0;
      tmpvar_35.xyz = p_3;
      tmpvar_5 = tmpvar_35;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec4 sphere_36;
  sphere_36 = xlv_TEXCOORD2;
  vec3 p_37;
  p_37 = tmpvar_5.xyz;
  vec3 d_38;
  int i_39;
  float fac_40;
  float dens_41;
  float heat_42;
  heat_42 = 0.0;
  dens_41 = 0.0;
  fac_40 = 0.5;
  d_38 = (normalize(xlv_TEXCOORD1) * 0.15);
  i_39 = 0;
  for (int i_39 = 0; i_39 < 8; ) {
    float tmpvar_43;
    vec3 p_44;
    p_44 = (p_37 - sphere_36.xyz);
    vec3 tmpvar_45;
    tmpvar_45 = (p_37 * _Frequency);
    vec4 tmpvar_46;
    tmpvar_46 = (_Time * _ScrollSpeed);
    vec3 p_47;
    p_47 = (tmpvar_45 + tmpvar_46.y);
    vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.xy = (p_47.xz + (vec2(37.0, 13.0) * floor(p_47.y)));
    vec4 coord_49;
    coord_49 = (tmpvar_48 / 64.0);
    vec2 tmpvar_50;
    tmpvar_50 = texture2DLod (_MainTex, coord_49.xy, coord_49.w).yx;
    vec3 tmpvar_51;
    tmpvar_51 = (tmpvar_45 * 2.0);
    vec3 p_52;
    p_52 = (tmpvar_51 + tmpvar_46.z);
    vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.xy = (p_52.xz + (vec2(37.0, 13.0) * floor(p_52.y)));
    vec4 coord_54;
    coord_54 = (tmpvar_53 / 64.0);
    vec2 tmpvar_55;
    tmpvar_55 = texture2DLod (_MainTex, coord_54.xy, coord_54.w).yx;
    vec3 tmpvar_56;
    tmpvar_56 = (tmpvar_51 * 2.0);
    vec3 p_57;
    p_57 = (tmpvar_56 + tmpvar_46.z);
    vec4 tmpvar_58;
    tmpvar_58.zw = vec2(0.0, 0.0);
    tmpvar_58.xy = (p_57.xz + (vec2(37.0, 13.0) * floor(p_57.y)));
    vec4 coord_59;
    coord_59 = (tmpvar_58 / 64.0);
    vec2 tmpvar_60;
    tmpvar_60 = texture2DLod (_MainTex, coord_59.xy, coord_59.w).yx;
    vec3 tmpvar_61;
    tmpvar_61 = (tmpvar_56 * 2.0);
    vec3 p_62;
    p_62 = (tmpvar_61 + tmpvar_46.w);
    vec4 tmpvar_63;
    tmpvar_63.zw = vec2(0.0, 0.0);
    tmpvar_63.xy = (p_62.xz + (vec2(37.0, 13.0) * floor(p_62.y)));
    vec4 coord_64;
    coord_64 = (tmpvar_63 / 64.0);
    vec2 tmpvar_65;
    tmpvar_65 = texture2DLod (_MainTex, coord_64.xy, coord_64.w).yx;
    vec3 p_66;
    p_66 = ((tmpvar_61 * 2.0) + tmpvar_46.w);
    vec4 tmpvar_67;
    tmpvar_67.zw = vec2(0.0, 0.0);
    tmpvar_67.xy = (p_66.xz + (vec2(37.0, 13.0) * floor(p_66.y)));
    vec4 coord_68;
    coord_68 = (tmpvar_67 / 64.0);
    vec2 tmpvar_69;
    tmpvar_69 = texture2DLod (_MainTex, coord_68.xy, coord_68.w).yx;
    tmpvar_43 = ((sqrt(dot (p_44, p_44)) - _Radius) - ((((mix (tmpvar_50.x, tmpvar_50.y, fract(p_47.y)) + (mix (tmpvar_55.x, tmpvar_55.y, fract(p_52.y)) / 2.0)) + (mix (tmpvar_60.x, tmpvar_60.y, fract(p_57.y)) / 4.0)) + (mix (tmpvar_65.x, tmpvar_65.y, fract(p_62.y)) / 8.0)) + (mix (tmpvar_69.x, tmpvar_69.y, fract(p_66.y)) / 16.0)));
    if ((tmpvar_43 <= 0.05)) {
      vec3 p_70;
      p_70 = (p_37 - sphere_36.xyz);
      heat_42 = (heat_42 + pow (((((_Radius - sqrt(dot (p_70, p_70))) + 2.5) * fac_40) * _Heat), 3.0));
      fac_40 = (fac_40 * 0.25);
      dens_41 = (dens_41 + 0.3);
      p_37 = (p_37 - d_38);
    } else {
      p_37 = (p_37 - (d_38 * 3.0));
    };
    i_39 = (i_39 + 1);
  };
  vec2 tmpvar_71;
  tmpvar_71.x = heat_42;
  tmpvar_71.y = dens_41;
  vec4 tmpvar_72;
  tmpvar_72.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_72.x = tmpvar_71.x;
  col_1.xyz = texture2DLod (_RampTex, tmpvar_72.xy, 0.0).xyz;
  col_1.w = clamp ((clamp (dens_41, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_ON" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_ON" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = (tmpvar_23 * 2.0);
    highp vec3 p_30;
    p_30 = (tmpvar_29 + tmpvar_11.w);
    highp vec2 rg_31;
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.xy = (p_30.xz + (vec2(37.0, 13.0) * floor(p_30.y)));
    highp vec4 coord_33;
    coord_33 = (tmpvar_32 / 64.0);
    lowp vec2 tmpvar_34;
    tmpvar_34 = texture2DLodEXT (_MainTex, coord_33.xy, coord_33.w).yx;
    rg_31 = tmpvar_34;
    highp vec3 p_35;
    p_35 = ((tmpvar_29 * 2.0) + tmpvar_11.w);
    highp vec2 rg_36;
    highp vec4 tmpvar_37;
    tmpvar_37.zw = vec2(0.0, 0.0);
    tmpvar_37.xy = (p_35.xz + (vec2(37.0, 13.0) * floor(p_35.y)));
    highp vec4 coord_38;
    coord_38 = (tmpvar_37 / 64.0);
    lowp vec2 tmpvar_39;
    tmpvar_39 = texture2DLodEXT (_MainTex, coord_38.xy, coord_38.w).yx;
    rg_36 = tmpvar_39;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_31.x, rg_31.y, fract(p_30.y)) / 8.0)) + (mix (rg_36.x, rg_36.y, fract(p_35.y)) / 16.0)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.xyz = p_3;
      tmpvar_5 = tmpvar_40;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_41;
  sphere_41 = xlv_TEXCOORD2;
  highp vec3 p_42;
  p_42 = tmpvar_5.xyz;
  highp vec3 d_43;
  int i_44;
  highp float fac_45;
  highp float dens_46;
  highp float heat_47;
  heat_47 = 0.0;
  dens_46 = 0.0;
  fac_45 = 0.5;
  d_43 = (normalize(xlv_TEXCOORD1) * 0.15);
  i_44 = 0;
  for (int i_44 = 0; i_44 < 8; ) {
    highp float tmpvar_48;
    highp vec3 p_49;
    p_49 = (p_42 - sphere_41.xyz);
    highp vec3 tmpvar_50;
    tmpvar_50 = (p_42 * _Frequency);
    highp vec4 tmpvar_51;
    tmpvar_51 = (_Time * _ScrollSpeed);
    highp vec3 p_52;
    p_52 = (tmpvar_50 + tmpvar_51.y);
    highp vec2 rg_53;
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.xy = (p_52.xz + (vec2(37.0, 13.0) * floor(p_52.y)));
    highp vec4 coord_55;
    coord_55 = (tmpvar_54 / 64.0);
    lowp vec2 tmpvar_56;
    tmpvar_56 = texture2DLodEXT (_MainTex, coord_55.xy, coord_55.w).yx;
    rg_53 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_50 * 2.0);
    highp vec3 p_58;
    p_58 = (tmpvar_57 + tmpvar_51.z);
    highp vec2 rg_59;
    highp vec4 tmpvar_60;
    tmpvar_60.zw = vec2(0.0, 0.0);
    tmpvar_60.xy = (p_58.xz + (vec2(37.0, 13.0) * floor(p_58.y)));
    highp vec4 coord_61;
    coord_61 = (tmpvar_60 / 64.0);
    lowp vec2 tmpvar_62;
    tmpvar_62 = texture2DLodEXT (_MainTex, coord_61.xy, coord_61.w).yx;
    rg_59 = tmpvar_62;
    highp vec3 tmpvar_63;
    tmpvar_63 = (tmpvar_57 * 2.0);
    highp vec3 p_64;
    p_64 = (tmpvar_63 + tmpvar_51.z);
    highp vec2 rg_65;
    highp vec4 tmpvar_66;
    tmpvar_66.zw = vec2(0.0, 0.0);
    tmpvar_66.xy = (p_64.xz + (vec2(37.0, 13.0) * floor(p_64.y)));
    highp vec4 coord_67;
    coord_67 = (tmpvar_66 / 64.0);
    lowp vec2 tmpvar_68;
    tmpvar_68 = texture2DLodEXT (_MainTex, coord_67.xy, coord_67.w).yx;
    rg_65 = tmpvar_68;
    highp vec3 tmpvar_69;
    tmpvar_69 = (tmpvar_63 * 2.0);
    highp vec3 p_70;
    p_70 = (tmpvar_69 + tmpvar_51.w);
    highp vec2 rg_71;
    highp vec4 tmpvar_72;
    tmpvar_72.zw = vec2(0.0, 0.0);
    tmpvar_72.xy = (p_70.xz + (vec2(37.0, 13.0) * floor(p_70.y)));
    highp vec4 coord_73;
    coord_73 = (tmpvar_72 / 64.0);
    lowp vec2 tmpvar_74;
    tmpvar_74 = texture2DLodEXT (_MainTex, coord_73.xy, coord_73.w).yx;
    rg_71 = tmpvar_74;
    highp vec3 p_75;
    p_75 = ((tmpvar_69 * 2.0) + tmpvar_51.w);
    highp vec2 rg_76;
    highp vec4 tmpvar_77;
    tmpvar_77.zw = vec2(0.0, 0.0);
    tmpvar_77.xy = (p_75.xz + (vec2(37.0, 13.0) * floor(p_75.y)));
    highp vec4 coord_78;
    coord_78 = (tmpvar_77 / 64.0);
    lowp vec2 tmpvar_79;
    tmpvar_79 = texture2DLodEXT (_MainTex, coord_78.xy, coord_78.w).yx;
    rg_76 = tmpvar_79;
    tmpvar_48 = ((sqrt(dot (p_49, p_49)) - _Radius) - ((((mix (rg_53.x, rg_53.y, fract(p_52.y)) + (mix (rg_59.x, rg_59.y, fract(p_58.y)) / 2.0)) + (mix (rg_65.x, rg_65.y, fract(p_64.y)) / 4.0)) + (mix (rg_71.x, rg_71.y, fract(p_70.y)) / 8.0)) + (mix (rg_76.x, rg_76.y, fract(p_75.y)) / 16.0)));
    if ((tmpvar_48 <= 0.05)) {
      highp vec3 p_80;
      p_80 = (p_42 - sphere_41.xyz);
      heat_47 = (heat_47 + pow (((((_Radius - sqrt(dot (p_80, p_80))) + 2.5) * fac_45) * _Heat), 3.0));
      fac_45 = (fac_45 * 0.25);
      dens_46 = (dens_46 + 0.3);
      p_42 = (p_42 - d_43);
    } else {
      p_42 = (p_42 - (d_43 * 3.0));
    };
    i_44 = (i_44 + 1);
  };
  highp vec2 tmpvar_81;
  tmpvar_81.x = heat_47;
  tmpvar_81.y = dens_46;
  highp vec4 tmpvar_82;
  tmpvar_82.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_82.x = tmpvar_81.x;
  lowp vec4 tmpvar_83;
  tmpvar_83 = texture2DLodEXT (_RampTex, tmpvar_82.xy, 0.0);
  col_1.xyz = tmpvar_83.xyz;
  highp float tmpvar_84;
  tmpvar_84 = clamp ((clamp (dens_46, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_84;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_ON" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = (tmpvar_23 * 2.0);
    highp vec3 p_30;
    p_30 = (tmpvar_29 + tmpvar_11.w);
    highp vec2 rg_31;
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.xy = (p_30.xz + (vec2(37.0, 13.0) * floor(p_30.y)));
    highp vec4 coord_33;
    coord_33 = (tmpvar_32 / 64.0);
    lowp vec2 tmpvar_34;
    tmpvar_34 = texture2DLodEXT (_MainTex, coord_33.xy, coord_33.w).yx;
    rg_31 = tmpvar_34;
    highp vec3 p_35;
    p_35 = ((tmpvar_29 * 2.0) + tmpvar_11.w);
    highp vec2 rg_36;
    highp vec4 tmpvar_37;
    tmpvar_37.zw = vec2(0.0, 0.0);
    tmpvar_37.xy = (p_35.xz + (vec2(37.0, 13.0) * floor(p_35.y)));
    highp vec4 coord_38;
    coord_38 = (tmpvar_37 / 64.0);
    lowp vec2 tmpvar_39;
    tmpvar_39 = texture2DLodEXT (_MainTex, coord_38.xy, coord_38.w).yx;
    rg_36 = tmpvar_39;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_31.x, rg_31.y, fract(p_30.y)) / 8.0)) + (mix (rg_36.x, rg_36.y, fract(p_35.y)) / 16.0)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.xyz = p_3;
      tmpvar_5 = tmpvar_40;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec4 sphere_41;
  sphere_41 = xlv_TEXCOORD2;
  highp vec3 p_42;
  p_42 = tmpvar_5.xyz;
  highp vec3 d_43;
  int i_44;
  highp float fac_45;
  highp float dens_46;
  highp float heat_47;
  heat_47 = 0.0;
  dens_46 = 0.0;
  fac_45 = 0.5;
  d_43 = (normalize(xlv_TEXCOORD1) * 0.15);
  i_44 = 0;
  for (int i_44 = 0; i_44 < 8; ) {
    highp float tmpvar_48;
    highp vec3 p_49;
    p_49 = (p_42 - sphere_41.xyz);
    highp vec3 tmpvar_50;
    tmpvar_50 = (p_42 * _Frequency);
    highp vec4 tmpvar_51;
    tmpvar_51 = (_Time * _ScrollSpeed);
    highp vec3 p_52;
    p_52 = (tmpvar_50 + tmpvar_51.y);
    highp vec2 rg_53;
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.xy = (p_52.xz + (vec2(37.0, 13.0) * floor(p_52.y)));
    highp vec4 coord_55;
    coord_55 = (tmpvar_54 / 64.0);
    lowp vec2 tmpvar_56;
    tmpvar_56 = texture2DLodEXT (_MainTex, coord_55.xy, coord_55.w).yx;
    rg_53 = tmpvar_56;
    highp vec3 tmpvar_57;
    tmpvar_57 = (tmpvar_50 * 2.0);
    highp vec3 p_58;
    p_58 = (tmpvar_57 + tmpvar_51.z);
    highp vec2 rg_59;
    highp vec4 tmpvar_60;
    tmpvar_60.zw = vec2(0.0, 0.0);
    tmpvar_60.xy = (p_58.xz + (vec2(37.0, 13.0) * floor(p_58.y)));
    highp vec4 coord_61;
    coord_61 = (tmpvar_60 / 64.0);
    lowp vec2 tmpvar_62;
    tmpvar_62 = texture2DLodEXT (_MainTex, coord_61.xy, coord_61.w).yx;
    rg_59 = tmpvar_62;
    highp vec3 tmpvar_63;
    tmpvar_63 = (tmpvar_57 * 2.0);
    highp vec3 p_64;
    p_64 = (tmpvar_63 + tmpvar_51.z);
    highp vec2 rg_65;
    highp vec4 tmpvar_66;
    tmpvar_66.zw = vec2(0.0, 0.0);
    tmpvar_66.xy = (p_64.xz + (vec2(37.0, 13.0) * floor(p_64.y)));
    highp vec4 coord_67;
    coord_67 = (tmpvar_66 / 64.0);
    lowp vec2 tmpvar_68;
    tmpvar_68 = texture2DLodEXT (_MainTex, coord_67.xy, coord_67.w).yx;
    rg_65 = tmpvar_68;
    highp vec3 tmpvar_69;
    tmpvar_69 = (tmpvar_63 * 2.0);
    highp vec3 p_70;
    p_70 = (tmpvar_69 + tmpvar_51.w);
    highp vec2 rg_71;
    highp vec4 tmpvar_72;
    tmpvar_72.zw = vec2(0.0, 0.0);
    tmpvar_72.xy = (p_70.xz + (vec2(37.0, 13.0) * floor(p_70.y)));
    highp vec4 coord_73;
    coord_73 = (tmpvar_72 / 64.0);
    lowp vec2 tmpvar_74;
    tmpvar_74 = texture2DLodEXT (_MainTex, coord_73.xy, coord_73.w).yx;
    rg_71 = tmpvar_74;
    highp vec3 p_75;
    p_75 = ((tmpvar_69 * 2.0) + tmpvar_51.w);
    highp vec2 rg_76;
    highp vec4 tmpvar_77;
    tmpvar_77.zw = vec2(0.0, 0.0);
    tmpvar_77.xy = (p_75.xz + (vec2(37.0, 13.0) * floor(p_75.y)));
    highp vec4 coord_78;
    coord_78 = (tmpvar_77 / 64.0);
    lowp vec2 tmpvar_79;
    tmpvar_79 = texture2DLodEXT (_MainTex, coord_78.xy, coord_78.w).yx;
    rg_76 = tmpvar_79;
    tmpvar_48 = ((sqrt(dot (p_49, p_49)) - _Radius) - ((((mix (rg_53.x, rg_53.y, fract(p_52.y)) + (mix (rg_59.x, rg_59.y, fract(p_58.y)) / 2.0)) + (mix (rg_65.x, rg_65.y, fract(p_64.y)) / 4.0)) + (mix (rg_71.x, rg_71.y, fract(p_70.y)) / 8.0)) + (mix (rg_76.x, rg_76.y, fract(p_75.y)) / 16.0)));
    if ((tmpvar_48 <= 0.05)) {
      highp vec3 p_80;
      p_80 = (p_42 - sphere_41.xyz);
      heat_47 = (heat_47 + pow (((((_Radius - sqrt(dot (p_80, p_80))) + 2.5) * fac_45) * _Heat), 3.0));
      fac_45 = (fac_45 * 0.25);
      dens_46 = (dens_46 + 0.3);
      p_42 = (p_42 - d_43);
    } else {
      p_42 = (p_42 - (d_43 * 3.0));
    };
    i_44 = (i_44 + 1);
  };
  highp vec2 tmpvar_81;
  tmpvar_81.x = heat_47;
  tmpvar_81.y = dens_46;
  highp vec4 tmpvar_82;
  tmpvar_82.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_82.x = tmpvar_81.x;
  lowp vec4 tmpvar_83;
  tmpvar_83 = texture2DLodEXT (_RampTex, tmpvar_82.xy, 0.0);
  col_1.xyz = tmpvar_83.xyz;
  highp float tmpvar_84;
  tmpvar_84 = clamp ((clamp (dens_46, 0.0, 1.0) * _Alpha), 0.0, 1.0);
  col_1.w = tmpvar_84;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 405
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 405
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    v += (noise( (p + offset.z)) / 4.0);
    #line 356
    p *= 2.0;
    v += (noise( (p + offset.w)) / 8.0);
    p *= 2.0;
    v += (noise( (p + offset.w)) / 16.0);
    #line 360
    p *= 2.0;
    return v;
}
#line 363
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    #line 365
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 380
highp vec2 heat( in highp vec4 sphere, in highp vec3 p, in highp vec3 d ) {
    #line 382
    highp float heat = 0.0;
    highp float dens = 0.0;
    highp float fac = 0.5;
    d *= 0.15;
    #line 386
    highp int i = 0;
    for ( ; (i < 8); (++i)) {
        #line 390
        highp float dis = distf( sphere, p);
        if ((dis <= 0.05)){
            heat += pow( ((((_Radius - distance( p, sphere.xyz)) + 2.5) * fac) * _Heat), 3.0);
            #line 394
            fac *= 0.25;
            dens += 0.3;
            p -= d;
        }
        else{
            #line 400
            p -= (d * 3.0);
        }
    }
    return vec2( heat, dens);
}
#line 367
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    #line 369
    highp float dist;
    highp int i = 0;
    for ( ; (i < 15); (++i)) {
        #line 374
        dist = distf( sphere, p);
        if ((dist < 0.05)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 378
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 405
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp vec2 hd = heat( i.sphere, m.xyz, normalize(i.viewVec));
    #line 409
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( hd.x, 0.0, 0.0, 0.0));
    col.w = xll_saturate_f((xll_saturate_f(hd.y) * _Alpha));
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = (_Object2World * gl_Vertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec4 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying vec3 xlv_TEXCOORD0;
uniform float _Alpha;
uniform float _ScrollSpeed;
uniform float _Frequency;
uniform float _Radius;
uniform float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform vec4 _Time;
void main ()
{
  vec4 col_1;
  vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    float tmpvar_8;
    vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    vec4 tmpvar_13;
    tmpvar_13.zw = vec2(0.0, 0.0);
    tmpvar_13.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    vec4 coord_14;
    coord_14 = (tmpvar_13 / 64.0);
    vec2 tmpvar_15;
    tmpvar_15 = texture2DLod (_MainTex, coord_14.xy, coord_14.w).yx;
    vec3 tmpvar_16;
    tmpvar_16 = (tmpvar_10 * 2.0);
    vec3 p_17;
    p_17 = (tmpvar_16 + tmpvar_11.z);
    vec4 tmpvar_18;
    tmpvar_18.zw = vec2(0.0, 0.0);
    tmpvar_18.xy = (p_17.xz + (vec2(37.0, 13.0) * floor(p_17.y)));
    vec4 coord_19;
    coord_19 = (tmpvar_18 / 64.0);
    vec2 tmpvar_20;
    tmpvar_20 = texture2DLod (_MainTex, coord_19.xy, coord_19.w).yx;
    vec3 tmpvar_21;
    tmpvar_21 = (tmpvar_16 * 2.0);
    vec3 p_22;
    p_22 = (tmpvar_21 + tmpvar_11.z);
    vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.xy = (p_22.xz + (vec2(37.0, 13.0) * floor(p_22.y)));
    vec4 coord_24;
    coord_24 = (tmpvar_23 / 64.0);
    vec2 tmpvar_25;
    tmpvar_25 = texture2DLod (_MainTex, coord_24.xy, coord_24.w).yx;
    vec3 tmpvar_26;
    tmpvar_26 = (tmpvar_21 * 2.0);
    vec3 p_27;
    p_27 = (tmpvar_26 + tmpvar_11.w);
    vec4 tmpvar_28;
    tmpvar_28.zw = vec2(0.0, 0.0);
    tmpvar_28.xy = (p_27.xz + (vec2(37.0, 13.0) * floor(p_27.y)));
    vec4 coord_29;
    coord_29 = (tmpvar_28 / 64.0);
    vec2 tmpvar_30;
    tmpvar_30 = texture2DLod (_MainTex, coord_29.xy, coord_29.w).yx;
    vec3 p_31;
    p_31 = ((tmpvar_26 * 2.0) + tmpvar_11.w);
    vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.xy = (p_31.xz + (vec2(37.0, 13.0) * floor(p_31.y)));
    vec4 coord_33;
    coord_33 = (tmpvar_32 / 64.0);
    vec2 tmpvar_34;
    tmpvar_34 = texture2DLod (_MainTex, coord_33.xy, coord_33.w).yx;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((((mix (tmpvar_15.x, tmpvar_15.y, fract(p_12.y)) + (mix (tmpvar_20.x, tmpvar_20.y, fract(p_17.y)) / 2.0)) + (mix (tmpvar_25.x, tmpvar_25.y, fract(p_22.y)) / 4.0)) + (mix (tmpvar_30.x, tmpvar_30.y, fract(p_27.y)) / 8.0)) + (mix (tmpvar_34.x, tmpvar_34.y, fract(p_31.y)) / 16.0)));
    if ((tmpvar_8 < 0.05)) {
      vec4 tmpvar_35;
      tmpvar_35.w = 0.0;
      tmpvar_35.xyz = p_3;
      tmpvar_5 = tmpvar_35;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  vec3 p_36;
  p_36 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  float edge0_37;
  edge0_37 = (_Radius + 0.5);
  float t_38;
  t_38 = max (min (((sqrt(dot (p_36, p_36)) - edge0_37) / ((_Radius + 1.5) - edge0_37)), 1.0), 0.0);
  vec4 tmpvar_39;
  tmpvar_39.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_39.x = (1.0 - ((t_38 * (t_38 * (3.0 - (2.0 * t_38)))) / _Heat));
  col_1.xyz = texture2DLod (_RampTex, tmpvar_39.xy, 0.0).xyz;
  col_1.w = clamp (_Alpha, 0.0, 1.0);
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_OFF" }
Bind "vertex" Vertex
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 12 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_position0 v0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov o1.xyz, r0
add o2.xyz, -r0, c8
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
mov o3.z, c6.w
mov o3.y, c5.w
mov o3.x, c4.w
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_OFF" }
Bind "vertex" Vertex
ConstBuffer "UnityPerCamera" 128 // 76 used size, 8 vars
Vector 64 [_WorldSpaceCameraPos] 3
ConstBuffer "UnityPerDraw" 336 // 256 used size, 6 vars
Matrix 0 [glstate_matrix_mvp] 4
Matrix 192 [_Object2World] 4
BindCB "UnityPerCamera" 0
BindCB "UnityPerDraw" 1
// 12 instructions, 1 temp regs, 0 temp arrays:
// ALU 9 float, 0 int, 0 uint
// TEX 0 (0 load, 0 comp, 0 bias, 0 grad)
// FLOW 1 static, 0 dynamic
"vs_4_0
eefiecedbplojieeipnloijnldmpmnfnloaeoefgabaaaaaaceadaaaaadaaaaaa
cmaaaaaakaaaaaaaciabaaaaejfdeheogmaaaaaaadaaaaaaaiaaaaaafaaaaaaa
aaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapapaaaafjaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahaaaaaagaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaacaaaaaa
apaaaaaafaepfdejfeejepeoaaeoepfcenebemaafeeffiedepepfceeaaklklkl
epfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaaaaaaaaaaabaaaaaaadaaaaaa
aaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaaadaaaaaaabaaaaaaahaiaaaa
heaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaaahaiaaaaheaaaaaaacaaaaaa
aaaaaaaaadaaaaaaadaaaaaaapaiaaaafdfgfpfaepfdejfeejepeoaafeeffied
epepfceeaaklklklfdeieefcpeabaaaaeaaaabaahnaaaaaafjaaaaaeegiocaaa
aaaaaaaaafaaaaaafjaaaaaeegiocaaaabaaaaaabaaaaaaafpaaaaadpcbabaaa
aaaaaaaaghaaaaaepccabaaaaaaaaaaaabaaaaaagfaaaaadhccabaaaabaaaaaa
gfaaaaadhccabaaaacaaaaaagfaaaaadhccabaaaadaaaaaagiaaaaacabaaaaaa
diaaaaaipcaabaaaaaaaaaaafgbfbaaaaaaaaaaaegiocaaaabaaaaaaabaaaaaa
dcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaaaaaaaaaagbabaaaaaaaaaaa
egaobaaaaaaaaaaadcaaaaakpcaabaaaaaaaaaaaegiocaaaabaaaaaaacaaaaaa
kgbkbaaaaaaaaaaaegaobaaaaaaaaaaadcaaaaakpccabaaaaaaaaaaaegiocaaa
abaaaaaaadaaaaaapgbpbaaaaaaaaaaaegaobaaaaaaaaaaadiaaaaaihcaabaaa
aaaaaaaafgbfbaaaaaaaaaaaegiccaaaabaaaaaaanaaaaaadcaaaaakhcaabaaa
aaaaaaaaegiccaaaabaaaaaaamaaaaaaagbabaaaaaaaaaaaegacbaaaaaaaaaaa
dcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaaoaaaaaakgbkbaaaaaaaaaaa
egacbaaaaaaaaaaadcaaaaakhcaabaaaaaaaaaaaegiccaaaabaaaaaaapaaaaaa
pgbpbaaaaaaaaaaaegacbaaaaaaaaaaadgaaaaafhccabaaaabaaaaaaegacbaaa
aaaaaaaaaaaaaaajhccabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaegiccaaa
aaaaaaaaaeaaaaaadgaaaaaghccabaaaadaaaaaaegiccaaaabaaaaaaapaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = (tmpvar_23 * 2.0);
    highp vec3 p_30;
    p_30 = (tmpvar_29 + tmpvar_11.w);
    highp vec2 rg_31;
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.xy = (p_30.xz + (vec2(37.0, 13.0) * floor(p_30.y)));
    highp vec4 coord_33;
    coord_33 = (tmpvar_32 / 64.0);
    lowp vec2 tmpvar_34;
    tmpvar_34 = texture2DLodEXT (_MainTex, coord_33.xy, coord_33.w).yx;
    rg_31 = tmpvar_34;
    highp vec3 p_35;
    p_35 = ((tmpvar_29 * 2.0) + tmpvar_11.w);
    highp vec2 rg_36;
    highp vec4 tmpvar_37;
    tmpvar_37.zw = vec2(0.0, 0.0);
    tmpvar_37.xy = (p_35.xz + (vec2(37.0, 13.0) * floor(p_35.y)));
    highp vec4 coord_38;
    coord_38 = (tmpvar_37 / 64.0);
    lowp vec2 tmpvar_39;
    tmpvar_39 = texture2DLodEXT (_MainTex, coord_38.xy, coord_38.w).yx;
    rg_36 = tmpvar_39;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_31.x, rg_31.y, fract(p_30.y)) / 8.0)) + (mix (rg_36.x, rg_36.y, fract(p_35.y)) / 16.0)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.xyz = p_3;
      tmpvar_5 = tmpvar_40;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_41;
  p_41 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_42;
  edge0_42 = (_Radius + 0.5);
  highp float t_43;
  t_43 = max (min (((sqrt(dot (p_41, p_41)) - edge0_42) / ((_Radius + 1.5) - edge0_42)), 1.0), 0.0);
  highp vec4 tmpvar_44;
  tmpvar_44.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_44.x = (1.0 - ((t_43 * (t_43 * (3.0 - (2.0 * t_43)))) / _Heat));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DLodEXT (_RampTex, tmpvar_44.xy, 0.0);
  col_1.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  tmpvar_46 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_46;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesVertex;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.xyz = (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = (_Object2World * _glesVertex).xyz;
  xlv_TEXCOORD1 = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  xlv_TEXCOORD2 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
varying highp vec4 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD0;
uniform highp float _Alpha;
uniform highp float _ScrollSpeed;
uniform highp float _Frequency;
uniform highp float _Radius;
uniform highp float _Heat;
uniform sampler2D _MainTex;
uniform sampler2D _RampTex;
uniform highp vec4 _Time;
void main ()
{
  mediump vec4 col_1;
  highp vec4 sphere_2;
  sphere_2 = xlv_TEXCOORD2;
  highp vec3 p_3;
  p_3 = xlv_TEXCOORD0;
  highp vec3 v_4;
  v_4 = normalize(xlv_TEXCOORD1);
  highp vec4 tmpvar_5;
  bool tmpvar_6;
  tmpvar_6 = bool(0);
  int i_7;
  i_7 = 0;
  for (int i_7 = 0; i_7 < 15; ) {
    highp float tmpvar_8;
    highp vec3 p_9;
    p_9 = (p_3 - sphere_2.xyz);
    highp vec3 tmpvar_10;
    tmpvar_10 = (p_3 * _Frequency);
    highp vec4 tmpvar_11;
    tmpvar_11 = (_Time * _ScrollSpeed);
    highp vec3 p_12;
    p_12 = (tmpvar_10 + tmpvar_11.y);
    highp vec2 rg_13;
    highp vec4 tmpvar_14;
    tmpvar_14.zw = vec2(0.0, 0.0);
    tmpvar_14.xy = (p_12.xz + (vec2(37.0, 13.0) * floor(p_12.y)));
    highp vec4 coord_15;
    coord_15 = (tmpvar_14 / 64.0);
    lowp vec2 tmpvar_16;
    tmpvar_16 = texture2DLodEXT (_MainTex, coord_15.xy, coord_15.w).yx;
    rg_13 = tmpvar_16;
    highp vec3 tmpvar_17;
    tmpvar_17 = (tmpvar_10 * 2.0);
    highp vec3 p_18;
    p_18 = (tmpvar_17 + tmpvar_11.z);
    highp vec2 rg_19;
    highp vec4 tmpvar_20;
    tmpvar_20.zw = vec2(0.0, 0.0);
    tmpvar_20.xy = (p_18.xz + (vec2(37.0, 13.0) * floor(p_18.y)));
    highp vec4 coord_21;
    coord_21 = (tmpvar_20 / 64.0);
    lowp vec2 tmpvar_22;
    tmpvar_22 = texture2DLodEXT (_MainTex, coord_21.xy, coord_21.w).yx;
    rg_19 = tmpvar_22;
    highp vec3 tmpvar_23;
    tmpvar_23 = (tmpvar_17 * 2.0);
    highp vec3 p_24;
    p_24 = (tmpvar_23 + tmpvar_11.z);
    highp vec2 rg_25;
    highp vec4 tmpvar_26;
    tmpvar_26.zw = vec2(0.0, 0.0);
    tmpvar_26.xy = (p_24.xz + (vec2(37.0, 13.0) * floor(p_24.y)));
    highp vec4 coord_27;
    coord_27 = (tmpvar_26 / 64.0);
    lowp vec2 tmpvar_28;
    tmpvar_28 = texture2DLodEXT (_MainTex, coord_27.xy, coord_27.w).yx;
    rg_25 = tmpvar_28;
    highp vec3 tmpvar_29;
    tmpvar_29 = (tmpvar_23 * 2.0);
    highp vec3 p_30;
    p_30 = (tmpvar_29 + tmpvar_11.w);
    highp vec2 rg_31;
    highp vec4 tmpvar_32;
    tmpvar_32.zw = vec2(0.0, 0.0);
    tmpvar_32.xy = (p_30.xz + (vec2(37.0, 13.0) * floor(p_30.y)));
    highp vec4 coord_33;
    coord_33 = (tmpvar_32 / 64.0);
    lowp vec2 tmpvar_34;
    tmpvar_34 = texture2DLodEXT (_MainTex, coord_33.xy, coord_33.w).yx;
    rg_31 = tmpvar_34;
    highp vec3 p_35;
    p_35 = ((tmpvar_29 * 2.0) + tmpvar_11.w);
    highp vec2 rg_36;
    highp vec4 tmpvar_37;
    tmpvar_37.zw = vec2(0.0, 0.0);
    tmpvar_37.xy = (p_35.xz + (vec2(37.0, 13.0) * floor(p_35.y)));
    highp vec4 coord_38;
    coord_38 = (tmpvar_37 / 64.0);
    lowp vec2 tmpvar_39;
    tmpvar_39 = texture2DLodEXT (_MainTex, coord_38.xy, coord_38.w).yx;
    rg_36 = tmpvar_39;
    tmpvar_8 = ((sqrt(dot (p_9, p_9)) - _Radius) - ((((mix (rg_13.x, rg_13.y, fract(p_12.y)) + (mix (rg_19.x, rg_19.y, fract(p_18.y)) / 2.0)) + (mix (rg_25.x, rg_25.y, fract(p_24.y)) / 4.0)) + (mix (rg_31.x, rg_31.y, fract(p_30.y)) / 8.0)) + (mix (rg_36.x, rg_36.y, fract(p_35.y)) / 16.0)));
    if ((tmpvar_8 < 0.05)) {
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.xyz = p_3;
      tmpvar_5 = tmpvar_40;
      tmpvar_6 = bool(1);
      break;
    };
    p_3 = (p_3 - (v_4 * (tmpvar_8 + 0.02)));
    i_7 = (i_7 + 1);
  };
  if (tmpvar_6) {
  } else {
    tmpvar_5 = vec4(-100.0, -100.0, -100.0, -100.0);
    tmpvar_6 = bool(1);
  };
  highp vec3 p_41;
  p_41 = (tmpvar_5.xyz - xlv_TEXCOORD2.xyz);
  highp float edge0_42;
  edge0_42 = (_Radius + 0.5);
  highp float t_43;
  t_43 = max (min (((sqrt(dot (p_41, p_41)) - edge0_42) / ((_Radius + 1.5) - edge0_42)), 1.0), 0.0);
  highp vec4 tmpvar_44;
  tmpvar_44.yzw = vec3(0.0, 0.0, 0.0);
  tmpvar_44.x = (1.0 - ((t_43 * (t_43 * (3.0 - (2.0 * t_43)))) / _Heat));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2DLodEXT (_RampTex, tmpvar_44.xy, 0.0);
  col_1.xyz = tmpvar_45.xyz;
  highp float tmpvar_46;
  tmpvar_46 = clamp (_Alpha, 0.0, 1.0);
  col_1.w = tmpvar_46;
  if ((tmpvar_5.w < 0.0)) {
    discard;
  };
  gl_FragData[0] = col_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define gl_MultiTexCoord0 _glesMultiTexCoord0
in vec4 _glesMultiTexCoord0;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 405
#line 87
highp vec3 WorldSpaceViewDir( in highp vec4 v ) {
    return (_WorldSpaceCameraPos.xyz - (_Object2World * v).xyz);
}
#line 330
v2f vert( in appdata_base v ) {
    v2f o;
    o.vertex = (glstate_matrix_mvp * v.vertex);
    #line 334
    o.worldPos = (_Object2World * v.vertex).xyz;
    o.viewVec = WorldSpaceViewDir( v.vertex);
    o.sphere.xyz = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    return o;
}
out highp vec3 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
void main() {
    v2f xl_retval;
    appdata_base xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.texcoord = vec4(gl_MultiTexCoord0);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.vertex);
    xlv_TEXCOORD0 = vec3(xl_retval.worldPos);
    xlv_TEXCOORD1 = vec3(xl_retval.viewVec);
    xlv_TEXCOORD2 = vec4(xl_retval.sphere);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
void xll_clip_f(float x) {
  if ( x<0.0 ) discard;
}
vec4 xll_tex2Dlod(sampler2D s, vec4 coord) {
   return textureLod( s, coord.xy, coord.w);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 322
struct v2f {
    highp vec4 vertex;
    highp vec3 worldPos;
    highp vec3 viewVec;
    highp vec4 sphere;
};
#line 52
struct appdata_base {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 texcoord;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _RampTex;
uniform sampler2D _MainTex;
uniform highp float _Heat;
uniform highp float _Radius;
#line 319
uniform highp float _Frequency;
uniform highp float _ScrollSpeed;
uniform highp float _Alpha;
#line 330
#line 339
#line 405
#line 339
highp float noise( in highp vec3 p ) {
    highp float f = fract(p.y);
    highp float i = floor(p.y);
    #line 343
    highp vec2 rg = xll_tex2Dlod( _MainTex, (vec4( (p.xz + (vec2( 37.0, 13.0) * i)), 0.0, 0.0) / 64.0)).yx;
    return mix( rg.x, rg.y, f);
}
#line 346
highp float fbm( in highp vec3 p ) {
    #line 348
    p *= _Frequency;
    highp float v = 0.0;
    highp vec4 offset = (_Time * _ScrollSpeed);
    v += noise( (p + offset.y));
    #line 352
    p *= 2.0;
    v += (noise( (p + offset.z)) / 2.0);
    p *= 2.0;
    v += (noise( (p + offset.z)) / 4.0);
    #line 356
    p *= 2.0;
    v += (noise( (p + offset.w)) / 8.0);
    p *= 2.0;
    v += (noise( (p + offset.w)) / 16.0);
    #line 360
    p *= 2.0;
    return v;
}
#line 363
highp float distf( in highp vec4 sphere, in highp vec3 p ) {
    #line 365
    return ((distance( p, sphere.xyz) - _Radius) - fbm( p));
}
#line 367
highp vec4 march( in highp vec4 sphere, in highp vec3 p, in highp vec3 v ) {
    #line 369
    highp float dist;
    highp int i = 0;
    for ( ; (i < 15); (++i)) {
        #line 374
        dist = distf( sphere, p);
        if ((dist < 0.05)){
            return vec4( p, 0.0);
        }
        p -= (v * (dist + 0.02));
    }
    #line 378
    return vec4( -100.0, -100.0, -100.0, -100.0);
}
#line 405
mediump vec4 frag( in v2f i ) {
    highp vec4 m = march( i.sphere, i.worldPos, normalize(i.viewVec));
    highp float heatfac = (smoothstep( (_Radius + 0.5), (_Radius + 1.5), distance( m.xyz, i.sphere.xyz)) / _Heat);
    #line 409
    mediump vec4 col = xll_tex2Dlod( _RampTex, vec4( (1.0 - heatfac), 0.0, 0.0, 0.0));
    col.w = xll_saturate_f(_Alpha);
    xll_clip_f(m.w);
    return col;
}
in highp vec3 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
void main() {
    mediump vec4 xl_retval;
    v2f xlt_i;
    xlt_i.vertex = vec4(0.0);
    xlt_i.worldPos = vec3(xlv_TEXCOORD0);
    xlt_i.viewVec = vec3(xlv_TEXCOORD1);
    xlt_i.sphere = vec4(xlv_TEXCOORD2);
    xl_retval = frag( xlt_i);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 30
//   d3d9 - ALU: 50 to 166, TEX: 5 to 23, FLOW: 5 to 10
//   d3d11 - ALU: 31 to 114, TEX: 0 to 0, FLOW: 4 to 5
SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_ON" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_ON" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 145 ALU, 19 TEX, 10 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 25, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, 0.25000000
def c8, 0.12500000, -0.02000000, 0.02000000, -100.00000000
def c9, 0.10000000, 2.50000000, 0.20000000, 3.00000000
defi i1, 10, 0, 1, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r4.xyz, r0.x, v1
mov r3.xyz, v0
mov_pp r3.w, c6.x
loop aL, i0
break_eq r3.w, c6.y
mul r1.xyz, r3, c3.x
mul r5.xyz, r1, c6.z
mov r1.w, c0.y
mad r1.xyz, c4.x, r1.w, r1
mov r0.x, c0.z
mad r0.xyz, c4.x, r0.x, r5
frc r0.w, r0.y
add r0.y, r0, -r0.w
mad r0.xy, r0.y, c7, r0.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
frc r4.w, r1.y
add r0.z, r1.y, -r4.w
add r0.x, r0, -r0.y
mov r1.w, c6.y
mad r1.xy, r0.z, c7, r1.xzzw
mul r1.xyz, r1.xyww, c6.w
texldl r1.xy, r1.xyzz, s0
mad r1.z, r0.x, r0.w, r0.y
add r0.w, r1.x, -r1.y
mad r1.x, r0.w, r4.w, r1.y
mad r1.w, r1.z, c7.z, r1.x
mul r5.xyz, r5, c6.z
mov r0.x, c0.z
mad r0.xyz, c4.x, r0.x, r5
frc r0.w, r0.y
add r0.y, r0, -r0.w
mad r1.xy, r0.y, c7, r0.xzzw
mov r1.z, c6.y
mul r0.xyz, r1, c6.w
texldl r0.xy, r0.xyzz, s0
add r0.x, r0, -r0.y
mad r0.x, r0, r0.w, r0.y
mov r1.x, c0.w
mul r0.z, c4.x, r1.x
mad r1.xyz, r5, c6.z, r0.z
frc r0.w, r1.y
mad r1.w, r0.x, c7, r1
add r0.x, r1.y, -r0.w
mad r0.xy, r0.x, c7, r1.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
add r1.xyz, v2, -r3
dp3 r0.z, r1, r1
add r1.x, r0, -r0.y
mad r0.y, r1.x, r0.w, r0
rsq r0.x, r0.z
rcp r0.x, r0.x
mad r0.y, r0, c8.x, r1.w
add r0.x, r0, -c2
add r0.x, r0, -r0.y
add r1.x, r0, c8.y
add r1.y, r0.x, c8.z
mov r0.xyz, r3
mov r0.w, c6.y
cmp r2, r1.x, r2, r0
mad r0.xyz, -r4, r1.y, r3
cmp_pp r3.w, r1.x, r3, c6.y
cmp r3.xyz, -r3.w, r3, r0
endloop
cmp r0, -r3.w, r2, c8.w
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mov r2.w, r0
mul r1.xyz, r1.x, v1
mov r2.xyz, r0
mul r3.xyz, r1, c9.x
mov r3.w, c6.y
mov r0.w, c6.y
mov r1.w, c7.z
loop aL, i1
mul r0.xyz, r2, c3.x
mul r4.xyz, r0, c6.z
mov r5.x, c0.y
mad r0.xyz, c4.x, r5.x, r0
frc r5.w, r0.y
add r0.y, r0, -r5.w
mov r1.x, c0.z
mad r1.xyz, c4.x, r1.x, r4
frc r4.w, r1.y
add r1.y, r1, -r4.w
mad r1.xy, r1.y, c7, r1.xzzw
mov r1.z, c6.y
mul r1.xyz, r1, c6.w
texldl r1.xy, r1.xyzz, s0
mad r5.xy, r0.y, c7, r0.xzzw
mov r5.z, c6.y
mul r0.xyz, r5, c6.w
texldl r0.xy, r0.xyzz, s0
add r1.x, r1, -r1.y
mad r0.z, r1.x, r4.w, r1.y
add r4.w, r0.x, -r0.y
mul r1.xyz, r4, c6.z
mov r0.x, c0.z
mad r4.xyz, c4.x, r0.x, r1
mad r0.x, r4.w, r5.w, r0.y
mad r5.x, r0.z, c7.z, r0
frc r4.w, r4.y
add r0.x, r4.y, -r4.w
mad r0.xy, r0.x, c7, r4.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
add r0.x, r0, -r0.y
mad r0.x, r0, r4.w, r0.y
mov r4.x, c0.w
mul r0.z, c4.x, r4.x
mad r1.xyz, r1, c6.z, r0.z
frc r4.x, r1.y
mad r4.y, r0.x, c7.w, r5.x
add r0.x, r1.y, -r4
mad r0.xy, r0.x, c7, r1.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
add r1.xyz, v2, -r2
texldl r0.xy, r0.xyzz, s0
dp3 r0.z, r1, r1
add r1.x, r0, -r0.y
mad r0.y, r1.x, r4.x, r0
rsq r0.x, r0.z
rcp r0.x, r0.x
mad r0.y, r0, c8.x, r4
add r0.x, r0, -c2
add r0.y, r0.x, -r0
add r0.z, -r0.y, c8
cmp r0.z, r0, c6.x, c6.y
add r0.x, -r0, c9.y
mul r1.x, r0, r1.w
add r4.y, r0, c8
abs_pp r4.x, r0.z
add r0.xyz, r2, -r3
cmp r0.xyz, -r4.y, r0, r2
mul r4.z, r1.x, c1.x
mul r2.x, r4.z, r4.z
mad r4.z, r2.x, r4, r3.w
mad r1.xyz, -r3, c9.w, r0
cmp r2.xyz, -r4.x, r1, r0
mul r0.x, r1.w, c7.w
add r0.y, r0.w, c9.z
cmp r3.w, -r4.y, r4.z, r3
cmp r1.w, -r4.y, r0.x, r1
cmp r0.w, -r4.y, r0.y, r0
endloop
cmp r0.x, r2.w, c6.y, c6
mov_pp r1, -r0.x
mov_sat r0.w, r0
mov r0.yz, c6.y
mov r0.x, r3.w
texkill r1.xyzw
texldl oC0.xyz, r0.xyzz, s1
mul_sat oC0.w, r0, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_ON" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 138 instructions, 9 temp regs, 0 temp arrays:
// ALU 94 float, 4 int, 0 uint
// TEX 0 (9 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 3 dynamic
"ps_4_0
eefiecedcpoijkgjaolecgbakddpnhghahidgakgabaaaaaabebcaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefccebbaaaaeaaaaaaaejaeaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacajaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajhcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgihcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaabjaaaaaadgaaaaaficaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaacaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaaaaaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaabkaabaaa
afaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaaafaaaaaa
dcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaadpdkaabaaa
adaaaaaadcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaa
bkaabaaaafaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaam
dcaabaaaafaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaa
egaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaa
dcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaa
afaaaaaadcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaiado
dkaabaaaadaaaaaadcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaaaceaaaaa
aaaaaaebaaaaaaebaaaaaaebaaaaaaaakgakbaaaabaaaaaabkaaaaaficaabaaa
aeaaaaaabkaabaaaaeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaaaeaaaaaa
dcaaaaamdcaabaaaaeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaeb
aaaaaaaaaaaaaaaaigaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaaegaabaaa
aeaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaibcaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaa
afaaaaaadcaaaaajbcaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaaeaaaaaa
bkaabaaaafaaaaaadcaaaaajicaabaaaadaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaaadodkaabaaaadaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
dkaabaiaebaaaaaaadaaaaaadbaaaaahicaabaaaadaaaaaadkaabaaaacaaaaaa
abeaaaaaaknhkddmbpaaaeaddkaabaaaadaaaaaadgaaaaafhcaabaaaacaaaaaa
egacbaaaadaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaappppppppacaaaaab
bfaaaaabaaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaknhkddm
dcaaaaakhcaabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaaacaaaaaa
egacbaaaadaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
abaaaaaadgaaaaaficaabaaaabaaaaaadkaabaaaadaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaam
hcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamimc
aaaamimcaaaamimcaaaaaaaadgaaaaafhcaabaaaadaaaaaaegacbaaaacaaaaaa
dgaaaaafbcaabaaaaeaaaaaaabeaaaaaaaaaaaaadgaaaaaigcaabaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaaaadgaaaaaficaabaaaaaaaaaaa
abeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaakaaaaaaadaaaeaddkaabaaaacaaaaaaaaaaaaaihcaabaaaagaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaacaaaaaa
egacbaaaagaaaaaaegacbaaaagaaaaaaelaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaaaaaaaaajicaabaaaadaaaaaadkaabaaaacaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaagaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaahaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaafecaabaaaaeaaaaaabkaabaaa
ahaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaamdcaabaaa
ahaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaaahaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaahaaaaaaegaabaaa
ahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaadcaaaaaj
ecaabaaaaeaaaaaackaabaaaaeaaaaaadkaabaaaaeaaaaaabkaabaaaahaaaaaa
dcaaaaamhcaabaaaahaaaaaaegacbaaaagaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaabkaabaaa
ahaaaaaaebaaaaaficaabaaaafaaaaaabkaabaaaahaaaaaadcaaaaamdcaabaaa
ahaaaaaapgapbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaaahaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaahaaaaaaegaabaaa
ahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaafaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaadcaaaaaj
icaabaaaaeaaaaaadkaabaaaaeaaaaaadkaabaaaafaaaaaabkaabaaaahaaaaaa
dcaaaaajecaabaaaaeaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaadpckaabaaa
aeaaaaaadcaaaaamhcaabaaaahaaaaaaegacbaaaagaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaa
bkaabaaaahaaaaaaebaaaaaficaabaaaafaaaaaabkaabaaaahaaaaaadcaaaaam
dcaabaaaahaaaaaapgapbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaaahaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaahaaaaaa
egaabaaaahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaiicaabaaaafaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaa
dcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaadkaabaaaafaaaaaabkaabaaa
ahaaaaaadcaaaaajecaabaaaaeaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaiado
ckaabaaaaeaaaaaadcaaaaamhcaabaaaagaaaaaaegacbaaaagaaaaaaaceaaaaa
aaaaaaebaaaaaaebaaaaaaebaaaaaaaakgakbaaaabaaaaaabkaaaaaficaabaaa
aeaaaaaabkaabaaaagaaaaaaebaaaaaficaabaaaafaaaaaabkaabaaaagaaaaaa
dcaaaaamdcaabaaaagaaaaaapgapbaaaafaaaaaaaceaaaaaaaaabeecaaaafaeb
aaaaaaaaaaaaaaaaigaabaaaagaaaaaadiaaaaakdcaabaaaagaaaaaaegaabaaa
agaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaa
agaaaaaaegaabaaaagaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaiicaabaaaafaaaaaabkaabaiaebaaaaaaagaaaaaaakaabaaa
agaaaaaadcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaadkaabaaaafaaaaaa
bkaabaaaagaaaaaadcaaaaajecaabaaaaeaaaaaadkaabaaaaeaaaaaaabeaaaaa
aaaaaadockaabaaaaeaaaaaaaaaaaaaiicaabaaaadaaaaaadkaabaaaadaaaaaa
ckaabaiaebaaaaaaaeaaaaaabnaaaaahicaabaaaadaaaaaaabeaaaaaaknhkddm
dkaabaaaadaaaaaaaaaaaaajicaabaaaacaaaaaadkaabaiaebaaaaaaacaaaaaa
bkiacaaaaaaaaaaaabaaaaaaaaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaacaeadiaaaaahicaabaaaacaaaaaackaabaaaafaaaaaadkaabaaa
acaaaaaadiaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaaakiacaaaaaaaaaaa
abaaaaaadiaaaaahecaabaaaaeaaaaaadkaabaaaacaaaaaadkaabaaaacaaaaaa
dcaaaaajbcaabaaaagaaaaaadkaabaaaacaaaaaackaabaaaaeaaaaaaakaabaaa
aeaaaaaadiaaaaahecaabaaaagaaaaaackaabaaaafaaaaaaabeaaaaaaaaaiado
aaaaaaahccaabaaaagaaaaaabkaabaaaafaaaaaaabeaaaaamnmmemdodcaaaaan
hcaabaaaahaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaamnmmmmdnmnmmmmdn
mnmmmmdnaaaaaaaaegacbaaaadaaaaaadcaaaaanhcaabaaaaiaaaaaaegacbaia
ebaaaaaaaaaaaaaaaceaaaaajkjjjjdojkjjjjdojkjjjjdoaaaaaaaaegacbaaa
adaaaaaadhaaaaajhcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaahaaaaaa
egacbaaaaiaaaaaadgaaaaafbcaabaaaafaaaaaaakaabaaaaeaaaaaadhaaaaaj
hcaabaaaafaaaaaapgapbaaaadaaaaaaegacbaaaagaaaaaaegacbaaaafaaaaaa
boaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaabaaaaaadgaaaaaf
bcaabaaaaeaaaaaaakaabaaaafaaaaaabgaaaaabdgaaaaafccaabaaaaeaaaaaa
abeaaaaaaaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaa
bkaabaaaafaaaaaaabeaaaaaaaaaiadpdicaaaaiiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakiacaaaaaaaaaaaacaaaaaaanaaaaaddkaabaaaabaaaaaadgaaaaaf
hccabaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_OFF" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 83 ALU, 11 TEX, 5 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 25, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, 0.25000000
def c8, 0.12500000, -0.02000000, 0.02000000, -100.00000000
def c9, 1.50000000, 2.00000000, 3.00000000, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r4.xyz, r0.x, v1
mov r3.xyz, v0
mov_pp r3.w, c6.x
loop aL, i0
break_eq r3.w, c6.y
mul r1.xyz, r3, c3.x
mul r5.xyz, r1, c6.z
mov r1.w, c0.y
mad r1.xyz, c4.x, r1.w, r1
mov r0.x, c0.z
mad r0.xyz, c4.x, r0.x, r5
frc r0.w, r0.y
add r0.y, r0, -r0.w
mad r0.xy, r0.y, c7, r0.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
frc r4.w, r1.y
add r0.z, r1.y, -r4.w
add r0.x, r0, -r0.y
mov r1.w, c6.y
mad r1.xy, r0.z, c7, r1.xzzw
mul r1.xyz, r1.xyww, c6.w
texldl r1.xy, r1.xyzz, s0
mad r1.z, r0.x, r0.w, r0.y
add r0.w, r1.x, -r1.y
mad r1.x, r0.w, r4.w, r1.y
mad r1.w, r1.z, c7.z, r1.x
mul r5.xyz, r5, c6.z
mov r0.x, c0.z
mad r0.xyz, c4.x, r0.x, r5
frc r0.w, r0.y
add r0.y, r0, -r0.w
mad r1.xy, r0.y, c7, r0.xzzw
mov r1.z, c6.y
mul r0.xyz, r1, c6.w
texldl r0.xy, r0.xyzz, s0
add r0.x, r0, -r0.y
mad r0.x, r0, r0.w, r0.y
mov r1.x, c0.w
mul r0.z, c4.x, r1.x
mad r1.xyz, r5, c6.z, r0.z
frc r0.w, r1.y
mad r1.w, r0.x, c7, r1
add r0.x, r1.y, -r0.w
mad r0.xy, r0.x, c7, r1.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
add r1.xyz, v2, -r3
dp3 r0.z, r1, r1
add r1.x, r0, -r0.y
mad r0.y, r1.x, r0.w, r0
rsq r0.x, r0.z
rcp r0.x, r0.x
mad r0.y, r0, c8.x, r1.w
add r0.x, r0, -c2
add r0.x, r0, -r0.y
add r1.x, r0, c8.y
add r1.y, r0.x, c8.z
mov r0.xyz, r3
mov r0.w, c6.y
cmp r2, r1.x, r2, r0
mad r0.xyz, -r4, r1.y, r3
cmp_pp r3.w, r1.x, r3, c6.y
cmp r3.xyz, -r3.w, r3, r0
endloop
cmp r0, -r3.w, r2, c8.w
add r0.xyz, -r0, v2
dp3 r0.x, r0, r0
mov r1.x, c2
add r1.x, c7.z, r1
add r0.y, -r1.x, c2.x
rsq r0.x, r0.x
add r0.y, r0, c9.x
rcp r0.x, r0.x
add r0.x, r0, -r1
rcp r0.y, r0.y
mul_sat r0.x, r0, r0.y
mul r0.y, r0.x, r0.x
mad r0.x, -r0, c9.y, c9.z
cmp r0.w, r0, c6.y, c6.x
mov_pp r1, -r0.w
rcp r0.z, c1.x
mul r0.x, r0.y, r0
mad r0.x, -r0, r0.z, c6
mov r0.yz, c6.y
texldl oC0.xyz, r0.xyzz, s1
texkill r1.xyzw
mov_sat oC0.w, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_OFF" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 82 instructions, 6 temp regs, 0 temp arrays:
// ALU 54 float, 2 int, 0 uint
// TEX 0 (5 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 2 dynamic
"ps_4_0
eefiecedcfikaegnbhepkhbhflphlgcegddaajeeabaaaaaapeakaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcaeakaaaaeaaaaaaaibacaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajhcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgihcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaabjaaaaaadgaaaaaficaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaacaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaaaaaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaabkaabaaa
afaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaaafaaaaaa
dcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaadpdkaabaaa
adaaaaaadcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaa
bkaabaaaafaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaam
dcaabaaaafaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaa
egaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaa
dcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaa
afaaaaaadcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaiado
dkaabaaaadaaaaaadcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaaaceaaaaa
aaaaaaebaaaaaaebaaaaaaebaaaaaaaakgakbaaaabaaaaaabkaaaaaficaabaaa
aeaaaaaabkaabaaaaeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaaaeaaaaaa
dcaaaaamdcaabaaaaeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaeb
aaaaaaaaaaaaaaaaigaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaaegaabaaa
aeaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaibcaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaa
afaaaaaadcaaaaajbcaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaaeaaaaaa
bkaabaaaafaaaaaadcaaaaajicaabaaaadaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaaadodkaabaaaadaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
dkaabaiaebaaaaaaadaaaaaadbaaaaahicaabaaaadaaaaaadkaabaaaacaaaaaa
abeaaaaaaknhkddmbpaaaeaddkaabaaaadaaaaaadgaaaaafhcaabaaaacaaaaaa
egacbaaaadaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaappppppppacaaaaab
bfaaaaabaaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaknhkddm
dcaaaaakhcaabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaaacaaaaaa
egacbaaaadaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
abaaaaaadgaaaaaficaabaaaabaaaaaadkaabaaaadaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaam
hcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamimc
aaaamimcaaaamimcaaaaaaaaaaaaaaaiicaabaaaaaaaaaaabkiacaaaaaaaaaaa
abaaaaaaabeaaaaaaaaaaadpaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaiaebaaaaaaadaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaaaacaaaai
bcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ccaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaaaaaaeaea
diaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaaoaaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaaakiacaaaaaaaaaaaabaaaaaaaaaaaaaibcaabaaa
aaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdgaaaaafccaabaaa
aaaaaaaaabeaaaaaaaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaabaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaadgcaaaagiccabaaa
aaaaaaaaakiacaaaaaaaaaaaacaaaaaaanaaaaaddkaabaaaabaaaaaadgaaaaaf
hccabaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_ON" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_ON" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 78 ALU, 7 TEX, 10 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 37.00000000, 13.00000000
defi i0, 25, 0, 1, 0
def c7, 0.01562500, -0.02000000, 0.02000000, -100.00000000
def c8, 0.50000000, 0.10000000, 2.50000000, 0.25000000
defi i1, 10, 0, 1, 0
def c9, 0.20000000, 3.00000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r2.xyz, r1.x, v1
mov r3.xyz, v0
mov_pp r2.w, c6.x
loop aL, i0
break_eq r2.w, c6.y
add r4.xyz, v2, -r3
mov r1.x, c0.y
mul r1.x, c4, r1
mad r1.xyz, r3, c3.x, r1.x
frc r1.w, r1.y
add r1.y, r1, -r1.w
mad r1.xy, r1.y, c6.zwzw, r1.xzzw
mov r1.z, c6.y
mul r1.xyz, r1, c7.x
texldl r1.xy, r1.xyzz, s0
dp3 r3.w, r4, r4
rsq r1.z, r3.w
add r3.w, r1.x, -r1.y
mad r1.y, r3.w, r1.w, r1
rcp r1.x, r1.z
add r1.x, r1, -c2
add r1.x, r1, -r1.y
add r3.w, r1.x, c7.y
add r4.x, r1, c7.z
mov r1.xyz, r3
mov r1.w, c6.y
cmp r0, r3.w, r0, r1
mad r1.xyz, -r2, r4.x, r3
cmp_pp r2.w, r3, r2, c6.y
cmp r3.xyz, -r2.w, r3, r1
endloop
cmp r1, -r2.w, r0, c7.w
dp3 r2.x, v1, v1
rsq r0.x, r2.x
mov r0.w, r1
mul r0.xyz, r0.x, v1
mul r0.xyz, r0, c8.y
mov r1.w, c6.y
mov r2.w, c6.y
mov r3.w, c8.x
loop aL, i1
add r3.xyz, v2, -r1
mov r2.x, c0.y
mul r2.x, c4, r2
mad r2.xyz, r1, c3.x, r2.x
frc r4.x, r2.y
add r2.y, r2, -r4.x
mad r2.xy, r2.y, c6.zwzw, r2.xzzw
mov r2.z, c6.y
mul r2.xyz, r2, c7.x
dp3 r3.x, r3, r3
texldl r2.xy, r2.xyzz, s0
rsq r2.z, r3.x
add r3.x, r2, -r2.y
rcp r2.x, r2.z
mad r2.y, r3.x, r4.x, r2
add r3.z, r2.x, -c2.x
add r3.x, r3.z, -r2.y
add r4.x, -r3, c7.z
add r3.z, -r3, c8
cmp r4.x, r4, c6, c6.y
add r3.y, r3.x, c7
mul r3.z, r3, r3.w
add r2.xyz, r1, -r0
cmp r1.xyz, -r3.y, r2, r1
mul r3.x, r3.z, c1
mul r3.z, r3.x, r3.x
mad r3.x, r3.z, r3, r1.w
mad r2.xyz, -r0, c9.y, r1
abs_pp r4.x, r4
cmp r1.xyz, -r4.x, r2, r1
mul r2.x, r3.w, c8.w
add r2.y, r2.w, c9.x
cmp r1.w, -r3.y, r3.x, r1
cmp r3.w, -r3.y, r2.x, r3
cmp r2.w, -r3.y, r2.y, r2
endloop
cmp r0.x, r0.w, c6.y, c6
mov_pp r0, -r0.x
texkill r0.xyzw
mov_sat r0.w, r2
mov r0.yz, c6.y
mov r0.x, r1.w
texldl oC0.xyz, r0.xyzz, s1
mul_sat oC0.w, r0, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_ON" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 81 instructions, 8 temp regs, 0 temp arrays:
// ALU 44 float, 4 int, 0 uint
// TEX 0 (3 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 3 dynamic
"ps_4_0
eefiecedhnndokdpnefahegeffejbmaepjbgkljoabaaaaaaciakaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcdiajaaaaeaaaaaaaeoacaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacaiaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajicaabaaaaaaaaaaa
dkiacaaaaaaaaaaaabaaaaaabkiacaaaabaaaaaaaaaaaaaadgaaaaafhcaabaaa
acaaaaaaegbcbaaaabaaaaaadgaaaaaipcaabaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaaaaa
daaaaaabcbaaaaahbcaabaaaadaaaaaadkaabaaaabaaaaaaabeaaaaabjaaaaaa
dgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaaaaaadaaaeadakaabaaaadaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaacaaaaaaegbcbaiaebaaaaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaaakaabaaa
adaaaaaabkiacaiaebaaaaaaaaaaaaaaabaaaaaadcaaaaakocaabaaaadaaaaaa
agajbaaaacaaaaaakgikcaaaaaaaaaaaabaaaaaapgapbaaaaaaaaaaabkaaaaaf
bcaabaaaaeaaaaaackaabaaaadaaaaaaebaaaaafecaabaaaadaaaaaackaabaaa
adaaaaaadcaaaaamgcaabaaaadaaaaaakgakbaaaadaaaaaaaceaaaaaaaaaaaaa
aaaabeecaaaafaebaaaaaaaafgahbaaaadaaaaaadiaaaaakgcaabaaaadaaaaaa
fgagbaaaadaaaaaaaceaaaaaaaaaaaaaaaaaiadmaaaaiadmaaaaaaaaeiaaaaal
pcaabaaaafaaaaaajgafbaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaaaaaaaaaiccaabaaaadaaaaaabkaabaiaebaaaaaaafaaaaaa
akaabaaaafaaaaaadcaaaaajccaabaaaadaaaaaaakaabaaaaeaaaaaabkaabaaa
adaaaaaabkaabaaaafaaaaaaaaaaaaaibcaabaaaadaaaaaabkaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaadbaaaaahccaabaaaadaaaaaaakaabaaaadaaaaaa
abeaaaaaaknhkddmbpaaaeadbkaabaaaadaaaaaadgaaaaafhcaabaaaabaaaaaa
egacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaappppppppacaaaaab
bfaaaaabaaaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaknhkddm
dcaaaaakhcaabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaagaabaaaadaaaaaa
egacbaaaacaaaaaaboaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
abaaaaaadgaaaaaficaabaaaacaaaaaabkaabaaaadaaaaaadgaaaaaihcaabaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaam
hcaabaaaabaaaaaapgapbaaaacaaaaaaegacbaaaabaaaaaaaceaaaaaaaaamimc
aaaamimcaaaamimcaaaaaaaadgaaaaafhcaabaaaacaaaaaaegacbaaaabaaaaaa
dgaaaaafbcaabaaaadaaaaaaabeaaaaaaaaaaaaadgaaaaaigcaabaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaaaadgaaaaaficaabaaaabaaaaaa
abeaaaaaaaaaaaaadaaaaaabcbaaaaahecaabaaaadaaaaaadkaabaaaabaaaaaa
abeaaaaaakaaaaaaadaaaeadckaabaaaadaaaaaaaaaaaaaihcaabaaaafaaaaaa
egacbaaaacaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahecaabaaaadaaaaaa
egacbaaaafaaaaaaegacbaaaafaaaaaaelaaaaafecaabaaaadaaaaaackaabaaa
adaaaaaaaaaaaaajicaabaaaadaaaaaackaabaaaadaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaacaaaaaakgikcaaa
aaaaaaaaabaaaaaapgapbaaaaaaaaaaabkaaaaaficaabaaaaeaaaaaabkaabaaa
afaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaaafaaaaaa
aaaaaaaiicaabaaaadaaaaaadkaabaaaadaaaaaadkaabaiaebaaaaaaaeaaaaaa
bnaaaaahicaabaaaadaaaaaaabeaaaaaaknhkddmdkaabaaaadaaaaaaaaaaaaaj
ecaabaaaadaaaaaackaabaiaebaaaaaaadaaaaaabkiacaaaaaaaaaaaabaaaaaa
aaaaaaahecaabaaaadaaaaaackaabaaaadaaaaaaabeaaaaaaaaacaeadiaaaaah
ecaabaaaadaaaaaackaabaaaaeaaaaaackaabaaaadaaaaaadiaaaaaiecaabaaa
adaaaaaackaabaaaadaaaaaaakiacaaaaaaaaaaaabaaaaaadiaaaaahicaabaaa
aeaaaaaackaabaaaadaaaaaackaabaaaadaaaaaadcaaaaajbcaabaaaafaaaaaa
ckaabaaaadaaaaaadkaabaaaaeaaaaaaakaabaaaadaaaaaadiaaaaahecaabaaa
afaaaaaackaabaaaaeaaaaaaabeaaaaaaaaaiadoaaaaaaahccaabaaaafaaaaaa
bkaabaaaaeaaaaaaabeaaaaamnmmemdodcaaaaanhcaabaaaagaaaaaaegacbaia
ebaaaaaaaaaaaaaaaceaaaaamnmmmmdnmnmmmmdnmnmmmmdnaaaaaaaaegacbaaa
acaaaaaadcaaaaanhcaabaaaahaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
jkjjjjdojkjjjjdojkjjjjdoaaaaaaaaegacbaaaacaaaaaadhaaaaajhcaabaaa
acaaaaaapgapbaaaadaaaaaaegacbaaaagaaaaaaegacbaaaahaaaaaadgaaaaaf
bcaabaaaaeaaaaaaakaabaaaadaaaaaadhaaaaajhcaabaaaaeaaaaaapgapbaaa
adaaaaaaegacbaaaafaaaaaaegacbaaaaeaaaaaaboaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaabaaaaaadgaaaaafbcaabaaaadaaaaaaakaabaaa
aeaaaaaabgaaaaabdgaaaaafccaabaaaadaaaaaaabeaaaaaaaaaaaaaeiaaaaal
pcaabaaaaaaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaa
abeaaaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaabkaabaaaaeaaaaaaabeaaaaa
aaaaiadpdicaaaaiiccabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaaaaaaaaaaa
acaaaaaaanaaaaaddkaabaaaacaaaaaadgaaaaafhccabaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_OFF" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 50 ALU, 5 TEX, 5 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 37.00000000, 13.00000000
defi i0, 25, 0, 1, 0
def c7, 0.01562500, -0.02000000, 0.02000000, -100.00000000
def c8, 0.50000000, 1.50000000, 2.00000000, 3.00000000
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r2.xyz, r1.x, v1
mov r3.xyz, v0
mov_pp r2.w, c6.x
loop aL, i0
break_eq r2.w, c6.y
add r4.xyz, v2, -r3
mov r1.x, c0.y
mul r1.x, c4, r1
mad r1.xyz, r3, c3.x, r1.x
frc r1.w, r1.y
add r1.y, r1, -r1.w
mad r1.xy, r1.y, c6.zwzw, r1.xzzw
mov r1.z, c6.y
mul r1.xyz, r1, c7.x
texldl r1.xy, r1.xyzz, s0
dp3 r3.w, r4, r4
rsq r1.z, r3.w
add r3.w, r1.x, -r1.y
mad r1.y, r3.w, r1.w, r1
rcp r1.x, r1.z
add r1.x, r1, -c2
add r1.x, r1, -r1.y
add r3.w, r1.x, c7.y
add r4.x, r1, c7.z
mov r1.xyz, r3
mov r1.w, c6.y
cmp r0, r3.w, r0, r1
mad r1.xyz, -r2, r4.x, r3
cmp_pp r2.w, r3, r2, c6.y
cmp r3.xyz, -r2.w, r3, r1
endloop
cmp r0, -r2.w, r0, c7.w
add r0.xyz, -r0, v2
dp3 r0.x, r0, r0
mov r1.x, c2
add r1.x, c8, r1
add r0.y, -r1.x, c2.x
rsq r0.x, r0.x
add r0.y, r0, c8
rcp r0.x, r0.x
add r0.x, r0, -r1
rcp r0.y, r0.y
mul_sat r0.x, r0, r0.y
mul r0.y, r0.x, r0.x
mad r0.x, -r0, c8.z, c8.w
cmp r0.w, r0, c6.y, c6.x
mov_pp r1, -r0.w
rcp r0.z, c1.x
mul r0.x, r0.y, r0
mad r0.x, -r0, r0.z, c6
mov r0.yz, c6.y
texldl oC0.xyz, r0.xyzz, s1
texkill r1.xyzw
mov_sat oC0.w, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_OFF" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 53 instructions, 6 temp regs, 0 temp arrays:
// ALU 29 float, 2 int, 0 uint
// TEX 0 (2 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 2 dynamic
"ps_4_0
eefiecedklhpbkkjkdkhgfiakghghkpkfganfkbfabaaaaaapeagaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcaeagaaaaeaaaaaaaibabaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajicaabaaaaaaaaaaa
dkiacaaaaaaaaaaaabaaaaaabkiacaaaabaaaaaaaaaaaaaadgaaaaafhcaabaaa
acaaaaaaegbcbaaaabaaaaaadgaaaaaipcaabaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaaaaa
daaaaaabcbaaaaahbcaabaaaadaaaaaadkaabaaaabaaaaaaabeaaaaabjaaaaaa
dgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaaaaaadaaaeadakaabaaaadaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaacaaaaaaegbcbaiaebaaaaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaaakaabaaa
adaaaaaabkiacaiaebaaaaaaaaaaaaaaabaaaaaadcaaaaakocaabaaaadaaaaaa
agajbaaaacaaaaaakgikcaaaaaaaaaaaabaaaaaapgapbaaaaaaaaaaabkaaaaaf
bcaabaaaaeaaaaaackaabaaaadaaaaaaebaaaaafecaabaaaadaaaaaackaabaaa
adaaaaaadcaaaaamgcaabaaaadaaaaaakgakbaaaadaaaaaaaceaaaaaaaaaaaaa
aaaabeecaaaafaebaaaaaaaafgahbaaaadaaaaaadiaaaaakgcaabaaaadaaaaaa
fgagbaaaadaaaaaaaceaaaaaaaaaaaaaaaaaiadmaaaaiadmaaaaaaaaeiaaaaal
pcaabaaaafaaaaaajgafbaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaaaaaaaaaiccaabaaaadaaaaaabkaabaiaebaaaaaaafaaaaaa
akaabaaaafaaaaaadcaaaaajccaabaaaadaaaaaaakaabaaaaeaaaaaabkaabaaa
adaaaaaabkaabaaaafaaaaaaaaaaaaaibcaabaaaadaaaaaabkaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaadbaaaaahccaabaaaadaaaaaaakaabaaaadaaaaaa
abeaaaaaaknhkddmbpaaaeadbkaabaaaadaaaaaadgaaaaafhcaabaaaabaaaaaa
egacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaappppppppacaaaaab
bfaaaaabaaaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaknhkddm
dcaaaaakhcaabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaagaabaaaadaaaaaa
egacbaaaacaaaaaaboaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
abaaaaaadgaaaaaficaabaaaacaaaaaabkaabaaaadaaaaaadgaaaaaihcaabaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaam
hcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaabaaaaaaaceaaaaaaaaamimc
aaaamimcaaaamimcaaaaaaaaaaaaaaaiicaabaaaaaaaaaaabkiacaaaaaaaaaaa
abaaaaaaabeaaaaaaaaaaadpaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaiaebaaaaaaadaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaaaacaaaai
bcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ccaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaaaaaaeaea
diaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaaoaaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaaakiacaaaaaaaaaaaabaaaaaaaaaaaaaibcaabaaa
aaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdgaaaaafccaabaaa
aaaaaaaaabeaaaaaaaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaabaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaadgcaaaagiccabaaa
aaaaaaaaakiacaaaaaaaaaaaacaaaaaaanaaaaaddkaabaaaacaaaaaadgaaaaaf
hccabaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_ON" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_ON" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 101 ALU, 11 TEX, 10 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 25, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, -0.02000000
def c8, 0.02000000, -100.00000000, 0.10000000, 2.50000000
defi i1, 10, 0, 1, 0
def c9, 0.25000000, 0.20000000, 3.00000000, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r2.xyz, r0.x, v1
mov r0.xyz, v0
mov_pp r0.w, c6.x
loop aL, i0
break_eq r0.w, c6.y
mov r2.w, c0.z
mul r3.xyz, r0, c3.x
mul r2.w, c4.x, r2
mad r4.xyz, r3, c6.z, r2.w
frc r3.w, r4.y
add r2.w, r4.y, -r3
mad r4.xy, r2.w, c7, r4.xzzw
mov r2.w, c0.y
mad r3.xyz, c4.x, r2.w, r3
frc r2.w, r3.y
mov r4.w, c6.y
mul r4.xyz, r4.xyww, c6.w
texldl r4.xy, r4.xyzz, s0
add r4.x, r4, -r4.y
mad r3.w, r4.x, r3, r4.y
add r3.y, r3, -r2.w
mad r4.xy, r3.y, c7, r3.xzzw
add r3.xyz, v2, -r0
dp3 r3.y, r3, r3
mov r4.z, c6.y
mul r4.xyz, r4, c6.w
texldl r4.xy, r4.xyzz, s0
add r3.x, r4, -r4.y
mad r2.w, r3.x, r2, r4.y
mad r2.w, r3, c7.z, r2
rsq r3.y, r3.y
rcp r3.x, r3.y
add r3.x, r3, -c2
add r3.x, r3, -r2.w
add r4.x, r3, c7.w
add r2.w, r3.x, c8.x
mov r3.xyz, r0
mov r3.w, c6.y
cmp r1, r4.x, r1, r3
mad r3.xyz, -r2, r2.w, r0
cmp_pp r0.w, r4.x, r0, c6.y
cmp r0.xyz, -r0.w, r0, r3
endloop
cmp r0, -r0.w, r1, c8.y
dp3 r2.x, v1, v1
rsq r1.x, r2.x
mul r2.xyz, r1.x, v1
mov r1.w, r0
mov r1.xyz, r0
mul r0.xyz, r2, c8.z
mov r0.w, c6.y
mov r3.x, c6.y
mov r2.w, c7.z
loop aL, i1
mov r2.x, c0.z
mul r3.y, c4.x, r2.x
mul r2.xyz, r1, c3.x
mad r4.xyz, r2, c6.z, r3.y
frc r4.w, r4.y
add r3.y, r4, -r4.w
mad r3.yz, r3.y, c7.xxyw, r4.xxzw
mov r3.w, c6.y
mul r4.xyz, r3.yzww, c6.w
texldl r4.xy, r4.xyzz, s0
mov r3.y, c0
mad r2.xyz, c4.x, r3.y, r2
frc r3.y, r2
add r3.z, r4.x, -r4.y
mad r3.z, r3, r4.w, r4.y
add r2.y, r2, -r3
mad r4.xy, r2.y, c7, r2.xzzw
add r2.xyz, v2, -r1
dp3 r2.y, r2, r2
mov r4.z, c6.y
mul r4.xyz, r4, c6.w
texldl r4.xy, r4.xyzz, s0
add r2.x, r4, -r4.y
mad r2.x, r2, r3.y, r4.y
rsq r2.y, r2.y
rcp r2.y, r2.y
add r2.z, r2.y, -c2.x
mad r2.x, r3.z, c7.z, r2
add r2.y, r2.z, -r2.x
add r2.x, -r2.y, c8
cmp r2.x, r2, c6, c6.y
abs_pp r3.y, r2.x
add r2.x, -r2.z, c8.w
mul r3.w, r2.x, r2
add r3.z, r2.y, c7.w
add r2.xyz, r1, -r0
cmp r2.xyz, -r3.z, r2, r1
mad r1.xyz, -r0, c9.z, r2
cmp r1.xyz, -r3.y, r1, r2
mul r3.w, r3, c1.x
mul r4.x, r3.w, r3.w
mad r3.w, r4.x, r3, r0
mul r2.y, r2.w, c9.x
add r2.x, r3, c9.y
cmp r0.w, -r3.z, r3, r0
cmp r2.w, -r3.z, r2.y, r2
cmp r3.x, -r3.z, r2, r3
endloop
cmp r0.x, r1.w, c6.y, c6
mov_pp r1, -r0.x
texkill r1.xyzw
mov_sat r0.x, r3
mov r1.yz, c6.y
mov r1.x, r0.w
texldl oC0.xyz, r1.xyzz, s1
mul_sat oC0.w, r0.x, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_ON" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 102 instructions, 9 temp regs, 0 temp arrays:
// ALU 62 float, 4 int, 0 uint
// TEX 0 (5 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 3 dynamic
"ps_4_0
eefiecedmfkldelmmckagjcamcefohlilaegdcjhabaaaaaaaeanaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcbeamaaaaeaaaaaaaafadaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacajaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajdcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgifcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaaabeaaaaabjaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaabaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaaaaaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaacaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaadaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaadaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaadaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaadaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
aeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaaaeaaaaaadcaaaaamdcaabaaa
aeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaaegaabaaaaeaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaaeaaaaaaegaabaaa
aeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaaeaaaaaabkaabaiaebaaaaaaaeaaaaaaakaabaaaaeaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaaakaabaaaaeaaaaaabkaabaaaaeaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaaadpdkaabaaa
acaaaaaaaaaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaa
acaaaaaadbaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaaaknhkddm
bpaaaeaddkaabaaaacaaaaaadgaaaaafhcaabaaaacaaaaaaegacbaaaadaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaappppppppacaaaaabbfaaaaabaaaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaknhkddmdcaaaaakhcaabaaa
adaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaadaaaaaa
boaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaabaaaaaadgaaaaaf
ecaabaaaabaaaaaadkaabaaaacaaaaaadgaaaaaihcaabaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaamhcaabaaaacaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamimcaaaamimcaaaamimc
aaaaaaaadgaaaaafhcaabaaaadaaaaaaegacbaaaacaaaaaadgaaaaafbcaabaaa
aeaaaaaaabeaaaaaaaaaaaaadgaaaaaigcaabaaaafaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaadpaaaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
daaaaaabcbaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaaabeaaaaaakaaaaaa
adaaaeaddkaabaaaabaaaaaaaaaaaaaihcaabaaaagaaaaaaegacbaaaadaaaaaa
egbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaagaaaaaa
egacbaaaagaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaj
icaabaaaacaaaaaadkaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaaabaaaaaa
diaaaaaihcaabaaaagaaaaaaegacbaaaadaaaaaakgikcaaaaaaaaaaaabaaaaaa
dcaaaaakhcaabaaaahaaaaaaegacbaaaadaaaaaakgikcaaaaaaaaaaaabaaaaaa
agaabaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaaahaaaaaaebaaaaaf
ecaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaammcaabaaaaeaaaaaakgakbaaa
aeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaabeecaaaafaebagaibaaaahaaaaaa
diaaaaakmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadmaaaaiadmeiaaaaalpcaabaaaahaaaaaaogakbaaaaeaaaaaaeghobaaa
aaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaiecaabaaaaeaaaaaa
bkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaadcaaaaajicaabaaaadaaaaaa
dkaabaaaadaaaaaackaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaamhcaabaaa
agaaaaaaegacbaaaagaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaaa
fgafbaaaabaaaaaabkaaaaafecaabaaaaeaaaaaabkaabaaaagaaaaaaebaaaaaf
icaabaaaaeaaaaaabkaabaaaagaaaaaadcaaaaamdcaabaaaagaaaaaapgapbaaa
aeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaaigaabaaaagaaaaaa
diaaaaakdcaabaaaagaaaaaaegaabaaaagaaaaaaaceaaaaaaaaaiadmaaaaiadm
aaaaaaaaaaaaaaaaeiaaaaalpcaabaaaagaaaaaaegaabaaaagaaaaaaeghobaaa
aaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaiicaabaaaaeaaaaaa
bkaabaiaebaaaaaaagaaaaaaakaabaaaagaaaaaadcaaaaajecaabaaaaeaaaaaa
ckaabaaaaeaaaaaadkaabaaaaeaaaaaabkaabaaaagaaaaaadcaaaaajicaabaaa
adaaaaaackaabaaaaeaaaaaaabeaaaaaaaaaaadpdkaabaaaadaaaaaaaaaaaaai
icaabaaaacaaaaaadkaabaaaacaaaaaadkaabaiaebaaaaaaadaaaaaabnaaaaah
icaabaaaacaaaaaaabeaaaaaaknhkddmdkaabaaaacaaaaaaaaaaaaajicaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaabkiacaaaaaaaaaaaabaaaaaaaaaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaacaeadiaaaaahicaabaaa
abaaaaaackaabaaaafaaaaaadkaabaaaabaaaaaadiaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaaakiacaaaaaaaaaaaabaaaaaadiaaaaahicaabaaaadaaaaaa
dkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaagaaaaaadkaabaaa
abaaaaaadkaabaaaadaaaaaaakaabaaaaeaaaaaadiaaaaahecaabaaaagaaaaaa
ckaabaaaafaaaaaaabeaaaaaaaaaiadoaaaaaaahccaabaaaagaaaaaabkaabaaa
afaaaaaaabeaaaaamnmmemdodcaaaaanhcaabaaaahaaaaaaegacbaiaebaaaaaa
aaaaaaaaaceaaaaamnmmmmdnmnmmmmdnmnmmmmdnaaaaaaaaegacbaaaadaaaaaa
dcaaaaanhcaabaaaaiaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaajkjjjjdo
jkjjjjdojkjjjjdoaaaaaaaaegacbaaaadaaaaaadhaaaaajhcaabaaaadaaaaaa
pgapbaaaacaaaaaaegacbaaaahaaaaaaegacbaaaaiaaaaaadgaaaaafbcaabaaa
afaaaaaaakaabaaaaeaaaaaadhaaaaajhcaabaaaafaaaaaapgapbaaaacaaaaaa
egacbaaaagaaaaaaegacbaaaafaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaabaaaaaadgaaaaafbcaabaaaaeaaaaaaakaabaaaafaaaaaa
bgaaaaabdgaaaaafccaabaaaaeaaaaaaabeaaaaaaaaaaaaaeiaaaaalpcaabaaa
aaaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaabeaaaaa
aaaaaaaaddaaaaahicaabaaaaaaaaaaabkaabaaaafaaaaaaabeaaaaaaaaaiadp
dicaaaaiiccabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaaaaaaaaaaaacaaaaaa
anaaaaadckaabaaaabaaaaaadgaaaaafhccabaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_OFF" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 61 ALU, 7 TEX, 5 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 25, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, -0.02000000
def c8, 0.02000000, -100.00000000, 1.50000000, 0
def c9, 2.00000000, 3.00000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r2.xyz, r0.x, v1
mov r0.xyz, v0
mov_pp r0.w, c6.x
loop aL, i0
break_eq r0.w, c6.y
mov r2.w, c0.z
mul r3.xyz, r0, c3.x
mul r2.w, c4.x, r2
mad r4.xyz, r3, c6.z, r2.w
frc r3.w, r4.y
add r2.w, r4.y, -r3
mad r4.xy, r2.w, c7, r4.xzzw
mov r2.w, c0.y
mad r3.xyz, c4.x, r2.w, r3
frc r2.w, r3.y
mov r4.w, c6.y
mul r4.xyz, r4.xyww, c6.w
texldl r4.xy, r4.xyzz, s0
add r4.x, r4, -r4.y
mad r3.w, r4.x, r3, r4.y
add r3.y, r3, -r2.w
mad r4.xy, r3.y, c7, r3.xzzw
add r3.xyz, v2, -r0
dp3 r3.y, r3, r3
mov r4.z, c6.y
mul r4.xyz, r4, c6.w
texldl r4.xy, r4.xyzz, s0
add r3.x, r4, -r4.y
mad r2.w, r3.x, r2, r4.y
mad r2.w, r3, c7.z, r2
rsq r3.y, r3.y
rcp r3.x, r3.y
add r3.x, r3, -c2
add r3.x, r3, -r2.w
add r4.x, r3, c7.w
add r2.w, r3.x, c8.x
mov r3.xyz, r0
mov r3.w, c6.y
cmp r1, r4.x, r1, r3
mad r3.xyz, -r2, r2.w, r0
cmp_pp r0.w, r4.x, r0, c6.y
cmp r0.xyz, -r0.w, r0, r3
endloop
cmp r0, -r0.w, r1, c8.y
add r2.xyz, -r0, v2
mov r1.x, c2
add r0.y, c7.z, r1.x
add r0.x, -r0.y, c2
dp3 r0.z, r2, r2
rsq r0.z, r0.z
rcp r0.z, r0.z
add r0.x, r0, c8.z
add r0.y, r0.z, -r0
rcp r0.x, r0.x
mul_sat r0.x, r0.y, r0
mul r0.z, r0.x, r0.x
mad r0.y, -r0.x, c9.x, c9
rcp r0.x, c1.x
mul r0.y, r0.z, r0
mad r1.x, -r0.y, r0, c6
cmp r0.x, r0.w, c6.y, c6
mov r1.yz, c6.y
mov_pp r0, -r0.x
texldl oC0.xyz, r1.xyzz, s1
texkill r0.xyzw
mov_sat oC0.w, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_OFF" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 64 instructions, 6 temp regs, 0 temp arrays:
// ALU 38 float, 2 int, 0 uint
// TEX 0 (3 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 2 dynamic
"ps_4_0
eefiecediemdbeladjhmnnopmkiikollbebnggigabaaaaaagmaiaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefchmahaaaaeaaaaaaanpabaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajdcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgifcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaaabeaaaaabjaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaabaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaaaaaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaacaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaadaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaadaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaadaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaadaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
aeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaaaeaaaaaadcaaaaamdcaabaaa
aeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaaegaabaaaaeaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaaeaaaaaaegaabaaa
aeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaaeaaaaaabkaabaiaebaaaaaaaeaaaaaaakaabaaaaeaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaaakaabaaaaeaaaaaabkaabaaaaeaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaaadpdkaabaaa
acaaaaaaaaaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaa
acaaaaaadbaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaaaknhkddm
bpaaaeaddkaabaaaacaaaaaadgaaaaafhcaabaaaacaaaaaaegacbaaaadaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaappppppppacaaaaabbfaaaaabaaaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaknhkddmdcaaaaakhcaabaaa
adaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaadaaaaaa
boaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaabaaaaaadgaaaaaf
ecaabaaaabaaaaaadkaabaaaacaaaaaadgaaaaaihcaabaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaamhcaabaaaaaaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamimcaaaamimcaaaamimc
aaaaaaaaaaaaaaaiicaabaaaaaaaaaaabkiacaaaaaaaaaaaabaaaaaaabeaaaaa
aaaaaadpaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaiaebaaaaaa
adaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaaaacaaaaibcaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajccaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaaaaaaeaeadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaaaoaaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaaakiacaaaaaaaaaaaabaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdgaaaaafccaabaaaaaaaaaaaabeaaaaa
aaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaaaaaaaaaabeaaaaaaaaaaaaadgcaaaagiccabaaaaaaaaaaaakiacaaa
aaaaaaaaacaaaaaaanaaaaadckaabaaaabaaaaaadgaaaaafhccabaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_ON" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_ON" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 122 ALU, 15 TEX, 10 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 25, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, 0.25000000
def c8, -0.02000000, 0.02000000, -100.00000000, 0.10000000
defi i1, 10, 0, 1, 0
def c9, 2.50000000, 0.20000000, 3.00000000, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r1.xyz, r1.x, v1
mov r2.xyz, v0
mov_pp r1.w, c6.x
loop aL, i0
break_eq r1.w, c6.y
mul r4.xyz, r2, c3.x
mul r5.xyz, r4, c6.z
mov r2.w, c0.z
mad r3.xyw, c4.x, r2.w, r5.xyzz
frc r2.w, r3.y
add r3.y, r3, -r2.w
mad r3.xy, r3.y, c7, r3.xwzw
mov r3.w, c0.y
mad r4.xyz, c4.x, r3.w, r4
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
frc r3.w, r4.y
mad r2.w, r3.x, r2, r3.y
add r3.x, r4.y, -r3.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
mad r3.x, r3, r3.w, r3.y
mov r4.x, c0.z
mul r3.z, c4.x, r4.x
mad r4.xyz, r5, c6.z, r3.z
frc r3.w, r4.y
mad r2.w, r2, c7.z, r3.x
add r3.x, r4.y, -r3.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r4.xyz, r3, c6.w
add r3.xyz, v2, -r2
dp3 r3.x, r3, r3
texldl r4.xy, r4.xyzz, s0
add r3.y, r4.x, -r4
mad r3.y, r3, r3.w, r4
rsq r3.x, r3.x
mad r3.y, r3, c7.w, r2.w
rcp r3.x, r3.x
add r2.w, r3.x, -c2.x
add r2.w, r2, -r3.y
add r4.x, r2.w, c8.y
add r2.w, r2, c8.x
mov r3.xyz, r2
mov r3.w, c6.y
cmp r0, r2.w, r0, r3
mad r3.xyz, -r1, r4.x, r2
cmp_pp r1.w, r2, r1, c6.y
cmp r2.xyz, -r1.w, r2, r3
endloop
cmp r0, -r1.w, r0, c8.z
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r1.xyz, r1.x, v1
mov r2.xyz, r0
mul r1.xyz, r1, c8.w
mov r1.w, c6.y
mov r2.w, c6.y
mov r3.w, c7.z
loop aL, i1
mul r3.xyz, r2, c3.x
mul r4.xyz, r3, c6.z
mov r0.x, c0.z
mad r5.xyz, c4.x, r0.x, r4
frc r4.w, r5.y
add r0.x, r5.y, -r4.w
mad r0.xy, r0.x, c7, r5.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r5.xy, r0.xyzz, s0
mov r5.z, c0.y
mad r0.xyz, c4.x, r5.z, r3
add r3.x, r5, -r5.y
frc r5.x, r0.y
mad r4.w, r3.x, r4, r5.y
add r0.y, r0, -r5.x
mad r3.xy, r0.y, c7, r0.xzzw
mov r3.z, c6.y
mul r0.xyz, r3, c6.w
texldl r0.xy, r0.xyzz, s0
add r0.x, r0, -r0.y
mov r3.x, c0.z
mul r0.z, c4.x, r3.x
mad r3.xyz, r4, c6.z, r0.z
mad r0.x, r0, r5, r0.y
frc r4.x, r3.y
mad r4.y, r4.w, c7.z, r0.x
add r0.x, r3.y, -r4
mad r0.xy, r0.x, c7, r3.xzzw
mov r0.z, c6.y
mul r3.xyz, r0, c6.w
add r0.xyz, v2, -r2
dp3 r0.x, r0, r0
texldl r3.xy, r3.xyzz, s0
add r0.y, r3.x, -r3
mad r0.y, r0, r4.x, r3
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, r0, -c2
mad r0.y, r0, c7.w, r4
add r0.y, r0.x, -r0
add r0.z, -r0.y, c8.y
cmp r0.z, r0, c6.x, c6.y
add r0.x, -r0, c9
mul r3.z, r0.x, r3.w
mul r3.z, r3, c1.x
mul r4.x, r3.z, r3.z
add r3.y, r0, c8.x
abs_pp r3.x, r0.z
add r0.xyz, r2, -r1
cmp r0.xyz, -r3.y, r0, r2
mad r2.xyz, -r1, c9.z, r0
cmp r2.xyz, -r3.x, r2, r0
mad r3.z, r4.x, r3, r1.w
mul r0.x, r3.w, c7.w
add r0.y, r2.w, c9
cmp r1.w, -r3.y, r3.z, r1
cmp r3.w, -r3.y, r0.x, r3
cmp r2.w, -r3.y, r0.y, r2
endloop
cmp r0.x, r0.w, c6.y, c6
mov_pp r0, -r0.x
texkill r0.xyzw
mov_sat r0.w, r2
mov r0.yz, c6.y
mov r0.x, r1.w
texldl oC0.xyz, r0.xyzz, s1
mul_sat oC0.w, r0, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_ON" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 120 instructions, 9 temp regs, 0 temp arrays:
// ALU 78 float, 4 int, 0 uint
// TEX 0 (7 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 3 dynamic
"ps_4_0
eefiecedkecdejaflfclcelhnmfpooejhppgjokgabaaaaaaimapaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcjmaoaaaaeaaaaaaakhadaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacajaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajdcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgifcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaaabeaaaaabjaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaabaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaaaaaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaacaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaadaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaadaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaadaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaadaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaabkaabaaaafaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaaadpdkaabaaa
acaaaaaadcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaadaaaaaa
bkaabaaaaeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaaaeaaaaaadcaaaaam
dcaabaaaaeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaaegaabaaaaeaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaaeaaaaaabkaabaiaebaaaaaaaeaaaaaaakaabaaaaeaaaaaa
dcaaaaajicaabaaaadaaaaaadkaabaaaadaaaaaaakaabaaaaeaaaaaabkaabaaa
aeaaaaaadcaaaaajicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaiado
dkaabaaaacaaaaaaaaaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaacaaaaaadbaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaa
aknhkddmbpaaaeaddkaabaaaacaaaaaadgaaaaafhcaabaaaacaaaaaaegacbaaa
adaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaappppppppacaaaaabbfaaaaab
aaaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaknhkddmdcaaaaak
hcaabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaaabaaaaaaegacbaaa
adaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaabaaaaaa
dgaaaaafecaabaaaabaaaaaadkaabaaaacaaaaaadgaaaaaihcaabaaaacaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaamhcaabaaa
acaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamimcaaaamimc
aaaamimcaaaaaaaadgaaaaafhcaabaaaadaaaaaaegacbaaaacaaaaaadgaaaaaf
bcaabaaaaeaaaaaaabeaaaaaaaaaaaaadgaaaaaigcaabaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaadpaaaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaa
aaaaaaaadaaaaaabcbaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaaabeaaaaa
akaaaaaaadaaaeaddkaabaaaabaaaaaaaaaaaaaihcaabaaaagaaaaaaegacbaaa
adaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
agaaaaaaegacbaaaagaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
aaaaaaajicaabaaaacaaaaaadkaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
abaaaaaadiaaaaaihcaabaaaagaaaaaaegacbaaaadaaaaaakgikcaaaaaaaaaaa
abaaaaaadcaaaaakhcaabaaaahaaaaaaegacbaaaadaaaaaakgikcaaaaaaaaaaa
abaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaaahaaaaaa
ebaaaaafecaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaammcaabaaaaeaaaaaa
kgakbaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaabeecaaaafaebagaibaaa
ahaaaaaadiaaaaakmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaiadmaaaaiadmeiaaaaalpcaabaaaahaaaaaaogakbaaaaeaaaaaa
eghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaiecaabaaa
aeaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaadcaaaaajicaabaaa
adaaaaaadkaabaaaadaaaaaackaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaam
hcaabaaaahaaaaaaegacbaaaagaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaaafgafbaaaabaaaaaabkaaaaafecaabaaaaeaaaaaabkaabaaaahaaaaaa
ebaaaaaficaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaamdcaabaaaahaaaaaa
pgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaaigaabaaa
ahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaaahaaaaaaaceaaaaaaaaaiadm
aaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaahaaaaaaegaabaaaahaaaaaa
eghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaiicaabaaa
aeaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaadcaaaaajecaabaaa
aeaaaaaackaabaaaaeaaaaaadkaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaaj
icaabaaaadaaaaaackaabaaaaeaaaaaaabeaaaaaaaaaaadpdkaabaaaadaaaaaa
dcaaaaamhcaabaaaagaaaaaaegacbaaaagaaaaaaaceaaaaaaaaaiaeaaaaaiaea
aaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaafecaabaaaaeaaaaaabkaabaaa
agaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaagaaaaaadcaaaaamdcaabaaa
agaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaagaaaaaadiaaaaakdcaabaaaagaaaaaaegaabaaaagaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaagaaaaaaegaabaaa
agaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaagaaaaaaakaabaaaagaaaaaadcaaaaaj
ecaabaaaaeaaaaaackaabaaaaeaaaaaadkaabaaaaeaaaaaabkaabaaaagaaaaaa
dcaaaaajicaabaaaadaaaaaackaabaaaaeaaaaaaabeaaaaaaaaaiadodkaabaaa
adaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaiaebaaaaaa
adaaaaaabnaaaaahicaabaaaacaaaaaaabeaaaaaaknhkddmdkaabaaaacaaaaaa
aaaaaaajicaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaabkiacaaaaaaaaaaa
abaaaaaaaaaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaacaea
diaaaaahicaabaaaabaaaaaackaabaaaafaaaaaadkaabaaaabaaaaaadiaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaaakiacaaaaaaaaaaaabaaaaaadiaaaaah
icaabaaaadaaaaaadkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaa
agaaaaaadkaabaaaabaaaaaadkaabaaaadaaaaaaakaabaaaaeaaaaaadiaaaaah
ecaabaaaagaaaaaackaabaaaafaaaaaaabeaaaaaaaaaiadoaaaaaaahccaabaaa
agaaaaaabkaabaaaafaaaaaaabeaaaaamnmmemdodcaaaaanhcaabaaaahaaaaaa
egacbaiaebaaaaaaaaaaaaaaaceaaaaamnmmmmdnmnmmmmdnmnmmmmdnaaaaaaaa
egacbaaaadaaaaaadcaaaaanhcaabaaaaiaaaaaaegacbaiaebaaaaaaaaaaaaaa
aceaaaaajkjjjjdojkjjjjdojkjjjjdoaaaaaaaaegacbaaaadaaaaaadhaaaaaj
hcaabaaaadaaaaaapgapbaaaacaaaaaaegacbaaaahaaaaaaegacbaaaaiaaaaaa
dgaaaaafbcaabaaaafaaaaaaakaabaaaaeaaaaaadhaaaaajhcaabaaaafaaaaaa
pgapbaaaacaaaaaaegacbaaaagaaaaaaegacbaaaafaaaaaaboaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaabaaaaaadgaaaaafbcaabaaaaeaaaaaa
akaabaaaafaaaaaabgaaaaabdgaaaaafccaabaaaaeaaaaaaabeaaaaaaaaaaaaa
eiaaaaalpcaabaaaaaaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
aaaaaaaaabeaaaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaabkaabaaaafaaaaaa
abeaaaaaaaaaiadpdicaaaaiiccabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaaa
aaaaaaaaacaaaaaaanaaaaadckaabaaaabaaaaaadgaaaaafhccabaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_OFF" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 72 ALU, 9 TEX, 5 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 25, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, 0.25000000
def c8, -0.02000000, 0.02000000, -100.00000000, 1.50000000
def c9, 2.00000000, 3.00000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r1.xyz, r1.x, v1
mov r2.xyz, v0
mov_pp r1.w, c6.x
loop aL, i0
break_eq r1.w, c6.y
mul r4.xyz, r2, c3.x
mul r5.xyz, r4, c6.z
mov r2.w, c0.z
mad r3.xyw, c4.x, r2.w, r5.xyzz
frc r2.w, r3.y
add r3.y, r3, -r2.w
mad r3.xy, r3.y, c7, r3.xwzw
mov r3.w, c0.y
mad r4.xyz, c4.x, r3.w, r4
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
frc r3.w, r4.y
mad r2.w, r3.x, r2, r3.y
add r3.x, r4.y, -r3.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
mad r3.x, r3, r3.w, r3.y
mov r4.x, c0.z
mul r3.z, c4.x, r4.x
mad r4.xyz, r5, c6.z, r3.z
frc r3.w, r4.y
mad r2.w, r2, c7.z, r3.x
add r3.x, r4.y, -r3.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r4.xyz, r3, c6.w
add r3.xyz, v2, -r2
dp3 r3.x, r3, r3
texldl r4.xy, r4.xyzz, s0
add r3.y, r4.x, -r4
mad r3.y, r3, r3.w, r4
rsq r3.x, r3.x
mad r3.y, r3, c7.w, r2.w
rcp r3.x, r3.x
add r2.w, r3.x, -c2.x
add r2.w, r2, -r3.y
add r4.x, r2.w, c8.y
add r2.w, r2, c8.x
mov r3.xyz, r2
mov r3.w, c6.y
cmp r0, r2.w, r0, r3
mad r3.xyz, -r1, r4.x, r2
cmp_pp r1.w, r2, r1, c6.y
cmp r2.xyz, -r1.w, r2, r3
endloop
cmp r0, -r1.w, r0, c8.z
add r0.xyz, -r0, v2
dp3 r0.x, r0, r0
mov r1.x, c2
add r1.x, c7.z, r1
add r0.y, -r1.x, c2.x
rsq r0.x, r0.x
add r0.y, r0, c8.w
rcp r0.x, r0.x
add r0.x, r0, -r1
rcp r0.y, r0.y
mul_sat r0.x, r0, r0.y
mul r0.y, r0.x, r0.x
mad r0.x, -r0, c9, c9.y
cmp r0.w, r0, c6.y, c6.x
mov_pp r1, -r0.w
rcp r0.z, c1.x
mul r0.x, r0.y, r0
mad r0.x, -r0, r0.z, c6
mov r0.yz, c6.y
texldl oC0.xyz, r0.xyzz, s1
texkill r1.xyzw
mov_sat oC0.w, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_OFF" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 73 instructions, 6 temp regs, 0 temp arrays:
// ALU 46 float, 2 int, 0 uint
// TEX 0 (4 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 2 dynamic
"ps_4_0
eefiecedganjbjlnokeaicmofcbalapkelliehnpabaaaaaalaajaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcmaaiaaaaeaaaaaaadaacaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajdcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgifcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaaabeaaaaabjaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaabaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaaaaaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaacaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaadaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaadaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaadaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaadaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaabkaabaaaafaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaaadpdkaabaaa
acaaaaaadcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaadaaaaaa
bkaabaaaaeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaaaeaaaaaadcaaaaam
dcaabaaaaeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaaegaabaaaaeaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaaeaaaaaabkaabaiaebaaaaaaaeaaaaaaakaabaaaaeaaaaaa
dcaaaaajicaabaaaadaaaaaadkaabaaaadaaaaaaakaabaaaaeaaaaaabkaabaaa
aeaaaaaadcaaaaajicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaiado
dkaabaaaacaaaaaaaaaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaacaaaaaadbaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaa
aknhkddmbpaaaeaddkaabaaaacaaaaaadgaaaaafhcaabaaaacaaaaaaegacbaaa
adaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaappppppppacaaaaabbfaaaaab
aaaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaknhkddmdcaaaaak
hcaabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaaabaaaaaaegacbaaa
adaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaabaaaaaa
dgaaaaafecaabaaaabaaaaaadkaabaaaacaaaaaadgaaaaaihcaabaaaacaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaamhcaabaaa
aaaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamimcaaaamimc
aaaamimcaaaaaaaaaaaaaaaiicaabaaaaaaaaaaabkiacaaaaaaaaaaaabaaaaaa
abeaaaaaaaaaaadpaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaia
ebaaaaaaadaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaaaacaaaaibcaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajccaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaaaaaaeaeadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaaoaaaaaibcaabaaaaaaaaaaa
akaabaaaaaaaaaaaakiacaaaaaaaaaaaabaaaaaaaaaaaaaibcaabaaaaaaaaaaa
akaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdgaaaaafccaabaaaaaaaaaaa
abeaaaaaaaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaa
abaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaadgcaaaagiccabaaaaaaaaaaa
akiacaaaaaaaaaaaacaaaaaaanaaaaadckaabaaaabaaaaaadgaaaaafhccabaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_ON" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_ON" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 166 ALU, 23 TEX, 10 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 25, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, 0.25000000
def c8, 0.12500000, 0.06250000, -0.02000000, 0.02000000
def c9, -100.00000000, 0.10000000, 2.50000000, 0.20000000
defi i1, 10, 0, 1, 0
def c10, 3.00000000, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r1.xyz, r1.x, v1
mov r2.xyz, v0
mov_pp r1.w, c6.x
loop aL, i0
break_eq r1.w, c6.y
mul r4.xyz, r2, c3.x
mul r5.xyz, r4, c6.z
mov r2.w, c0.z
mad r3.xyw, c4.x, r2.w, r5.xyzz
frc r4.w, r3.y
add r2.w, r3.y, -r4
mad r3.xy, r2.w, c7, r3.xwzw
mov r2.w, c0.y
mad r4.xyz, c4.x, r2.w, r4
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
mad r3.w, r3.x, r4, r3.y
frc r2.w, r4.y
add r3.x, r4.y, -r2.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r6.xy, r3.xyzz, s0
add r5.w, r6.x, -r6.y
mul r4.xyz, r5, c6.z
mov r4.w, c0.z
mad r5.xyz, c4.x, r4.w, r4
frc r4.w, r5.y
add r3.x, r5.y, -r4.w
mad r3.xy, r3.x, c7, r5.xzzw
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
mad r2.w, r5, r2, r6.y
mad r3.z, r3.w, c7, r2.w
add r2.w, r3.x, -r3.y
mul r4.xyz, r4, c6.z
mov r3.x, c0.w
mad r5.xyz, c4.x, r3.x, r4
mad r3.x, r2.w, r4.w, r3.y
mad r3.w, r3.x, c7, r3.z
frc r2.w, r5.y
add r3.x, r5.y, -r2.w
mov r3.z, c6.y
mad r3.xy, r3.x, c7, r5.xzzw
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
mad r3.x, r3, r2.w, r3.y
mov r4.w, c0
mul r3.z, c4.x, r4.w
mad r4.xyz, r4, c6.z, r3.z
frc r2.w, r4.y
mad r3.w, r3.x, c8.x, r3
add r3.x, r4.y, -r2.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r4.xyz, r3, c6.w
add r3.xyz, v2, -r2
dp3 r3.x, r3, r3
texldl r4.xy, r4.xyzz, s0
add r3.y, r4.x, -r4
mad r3.y, r3, r2.w, r4
rsq r3.x, r3.x
rcp r2.w, r3.x
mad r3.x, r3.y, c8.y, r3.w
add r2.w, r2, -c2.x
add r2.w, r2, -r3.x
add r4.x, r2.w, c8.w
add r2.w, r2, c8.z
mov r3.xyz, r2
mov r3.w, c6.y
cmp r0, r2.w, r0, r3
mad r3.xyz, -r1, r4.x, r2
cmp_pp r1.w, r2, r1, c6.y
cmp r2.xyz, -r1.w, r2, r3
endloop
cmp r0, -r1.w, r0, c9.x
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r1.xyz, r1.x, v1
mov r2.xyz, r0
mul r1.xyz, r1, c9.y
mov r1.w, c6.y
mov r2.w, c6.y
mov r3.w, c7.z
loop aL, i1
mul r3.xyz, r2, c3.x
mul r4.xyz, r3, c6.z
mov r0.x, c0.z
mad r5.xyz, c4.x, r0.x, r4
frc r5.w, r5.y
add r0.x, r5.y, -r5.w
mov r4.w, c0.y
mad r3.xyz, c4.x, r4.w, r3
mad r0.xy, r0.x, c7, r5.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
add r0.x, r0, -r0.y
frc r4.w, r3.y
mad r5.z, r0.x, r5.w, r0.y
add r0.x, r3.y, -r4.w
mad r0.xy, r0.x, c7, r3.xzzw
mul r3.xyz, r4, c6.z
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r5.xy, r0.xyzz, s0
mov r4.x, c0.z
mad r4.xyz, c4.x, r4.x, r3
frc r5.w, r4.y
add r0.x, r4.y, -r5.w
mad r0.xy, r0.x, c7, r4.xzzw
add r5.x, r5, -r5.y
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
mad r4.x, r5, r4.w, r5.y
add r4.w, r0.x, -r0.y
mad r0.z, r5, c7, r4.x
mul r3.xyz, r3, c6.z
mov r0.x, c0.w
mad r4.xyz, c4.x, r0.x, r3
mad r0.x, r4.w, r5.w, r0.y
mad r5.x, r0, c7.w, r0.z
frc r4.w, r4.y
add r0.x, r4.y, -r4.w
mad r0.xy, r0.x, c7, r4.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
add r0.x, r0, -r0.y
mad r0.x, r0, r4.w, r0.y
mov r4.x, c0.w
mul r0.z, c4.x, r4.x
mad r3.xyz, r3, c6.z, r0.z
frc r4.x, r3.y
mad r4.y, r0.x, c8.x, r5.x
add r0.x, r3.y, -r4
mad r0.xy, r0.x, c7, r3.xzzw
mov r0.z, c6.y
mul r3.xyz, r0, c6.w
add r0.xyz, v2, -r2
dp3 r0.x, r0, r0
texldl r3.xy, r3.xyzz, s0
add r0.y, r3.x, -r3
mad r0.y, r0, r4.x, r3
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, r0, -c2
mad r0.y, r0, c8, r4
add r0.y, r0.x, -r0
add r0.z, -r0.y, c8.w
cmp r0.z, r0, c6.x, c6.y
add r0.x, -r0, c9.z
mul r3.z, r0.x, r3.w
mul r3.z, r3, c1.x
mul r4.x, r3.z, r3.z
add r3.y, r0, c8.z
abs_pp r3.x, r0.z
add r0.xyz, r2, -r1
cmp r0.xyz, -r3.y, r0, r2
mad r2.xyz, -r1, c10.x, r0
cmp r2.xyz, -r3.x, r2, r0
mad r3.z, r4.x, r3, r1.w
mul r0.x, r3.w, c7.w
add r0.y, r2.w, c9.w
cmp r1.w, -r3.y, r3.z, r1
cmp r3.w, -r3.y, r0.x, r3
cmp r2.w, -r3.y, r0.y, r2
endloop
cmp r0.x, r0.w, c6.y, c6
mov_pp r0, -r0.x
texkill r0.xyzw
mov_sat r0.w, r2
mov r0.yz, c6.y
mov r0.x, r1.w
texldl oC0.xyz, r0.xyzz, s1
mul_sat oC0.w, r0, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_ON" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 156 instructions, 9 temp regs, 0 temp arrays:
// ALU 110 float, 4 int, 0 uint
// TEX 0 (11 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 3 dynamic
"ps_4_0
eefiecednlkojlgolonjngdofndmaaodkofhjolhabaaaaaajmbeaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefckmbdaaaaeaaaaaaaolaeaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacajaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajhcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgihcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaabjaaaaaadgaaaaaficaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaacaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaaaaaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaabkaabaaa
afaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaaafaaaaaa
dcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaadpdkaabaaa
adaaaaaadcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaa
bkaabaaaafaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaam
dcaabaaaafaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaa
egaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaa
dcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaa
afaaaaaadcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaiado
dkaabaaaadaaaaaadcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaa
aaaaaaebaaaaaaebaaaaaaebaaaaaaaakgakbaaaabaaaaaabkaaaaaficaabaaa
aeaaaaaabkaabaaaafaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaa
dcaaaaamdcaabaaaafaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaeb
aaaaaaaaaaaaaaaaigaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaa
afaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaa
afaaaaaaegaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaibcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaa
afaaaaaadcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaa
bkaabaaaafaaaaaadcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaa
aaaaaadodkaabaaaadaaaaaadcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaa
aceaaaaaaaaaiaebaaaaiaebaaaaiaebaaaaaaaakgakbaaaabaaaaaabkaaaaaf
icaabaaaaeaaaaaabkaabaaaaeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaa
aeaaaaaadcaaaaamdcaabaaaaeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeec
aaaafaebaaaaaaaaaaaaaaaaigaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaa
egaabaaaaeaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaal
pcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaaaaaaaaaibcaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaa
akaabaaaafaaaaaadcaaaaajbcaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaa
aeaaaaaabkaabaaaafaaaaaadcaaaaajicaabaaaadaaaaaaakaabaaaaeaaaaaa
abeaaaaaaaaaiadndkaabaaaadaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaaa
acaaaaaadkaabaiaebaaaaaaadaaaaaadbaaaaahicaabaaaadaaaaaadkaabaaa
acaaaaaaabeaaaaaaknhkddmbpaaaeaddkaabaaaadaaaaaadgaaaaafhcaabaaa
acaaaaaaegacbaaaadaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaapppppppp
acaaaaabbfaaaaabaaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaa
aknhkddmdcaaaaakhcaabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaa
acaaaaaaegacbaaaadaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaabaaaaaadgaaaaaficaabaaaabaaaaaadkaabaaaadaaaaaadgaaaaai
hcaabaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaab
dhaaaaamhcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaa
aaaamimcaaaamimcaaaamimcaaaaaaaadgaaaaafhcaabaaaadaaaaaaegacbaaa
acaaaaaadgaaaaafbcaabaaaaeaaaaaaabeaaaaaaaaaaaaadgaaaaaigcaabaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaaaadgaaaaaficaabaaa
aaaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaakaaaaaaadaaaeaddkaabaaaacaaaaaaaaaaaaaihcaabaaa
agaaaaaaegacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaa
acaaaaaaegacbaaaagaaaaaaegacbaaaagaaaaaaelaaaaaficaabaaaacaaaaaa
dkaabaaaacaaaaaaaaaaaaajicaabaaaadaaaaaadkaabaaaacaaaaaabkiacaia
ebaaaaaaaaaaaaaaabaaaaaadiaaaaaihcaabaaaagaaaaaaegacbaaaadaaaaaa
kgikcaaaaaaaaaaaabaaaaaadcaaaaakhcaabaaaahaaaaaaegacbaaaadaaaaaa
kgikcaaaaaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaafecaabaaaaeaaaaaa
bkaabaaaahaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaam
dcaabaaaahaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaaahaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaahaaaaaa
egaabaaaahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaiicaabaaaaeaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaa
dcaaaaajecaabaaaaeaaaaaackaabaaaaeaaaaaadkaabaaaaeaaaaaabkaabaaa
ahaaaaaadcaaaaamhcaabaaaahaaaaaaegacbaaaagaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaa
bkaabaaaahaaaaaaebaaaaaficaabaaaafaaaaaabkaabaaaahaaaaaadcaaaaam
dcaabaaaahaaaaaapgapbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaaahaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaahaaaaaa
egaabaaaahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaiicaabaaaafaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaa
dcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaadkaabaaaafaaaaaabkaabaaa
ahaaaaaadcaaaaajecaabaaaaeaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaadp
ckaabaaaaeaaaaaadcaaaaamhcaabaaaahaaaaaaegacbaaaagaaaaaaaceaaaaa
aaaaiaeaaaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaa
aeaaaaaabkaabaaaahaaaaaaebaaaaaficaabaaaafaaaaaabkaabaaaahaaaaaa
dcaaaaamdcaabaaaahaaaaaapgapbaaaafaaaaaaaceaaaaaaaaabeecaaaafaeb
aaaaaaaaaaaaaaaaigaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaa
ahaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaa
ahaaaaaaegaabaaaahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaiicaabaaaafaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaa
ahaaaaaadcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaadkaabaaaafaaaaaa
bkaabaaaahaaaaaadcaaaaajecaabaaaaeaaaaaadkaabaaaaeaaaaaaabeaaaaa
aaaaiadockaabaaaaeaaaaaadcaaaaamhcaabaaaahaaaaaaegacbaaaagaaaaaa
aceaaaaaaaaaaaebaaaaaaebaaaaaaebaaaaaaaakgakbaaaabaaaaaabkaaaaaf
icaabaaaaeaaaaaabkaabaaaahaaaaaaebaaaaaficaabaaaafaaaaaabkaabaaa
ahaaaaaadcaaaaamdcaabaaaahaaaaaapgapbaaaafaaaaaaaceaaaaaaaaabeec
aaaafaebaaaaaaaaaaaaaaaaigaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaa
egaabaaaahaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaal
pcaabaaaahaaaaaaegaabaaaahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaaaaaaaaaiicaabaaaafaaaaaabkaabaiaebaaaaaaahaaaaaa
akaabaaaahaaaaaadcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaadkaabaaa
afaaaaaabkaabaaaahaaaaaadcaaaaajecaabaaaaeaaaaaadkaabaaaaeaaaaaa
abeaaaaaaaaaaadockaabaaaaeaaaaaadcaaaaamhcaabaaaagaaaaaaegacbaaa
agaaaaaaaceaaaaaaaaaiaebaaaaiaebaaaaiaebaaaaaaaakgakbaaaabaaaaaa
bkaaaaaficaabaaaaeaaaaaabkaabaaaagaaaaaaebaaaaaficaabaaaafaaaaaa
bkaabaaaagaaaaaadcaaaaamdcaabaaaagaaaaaapgapbaaaafaaaaaaaceaaaaa
aaaabeecaaaafaebaaaaaaaaaaaaaaaaigaabaaaagaaaaaadiaaaaakdcaabaaa
agaaaaaaegaabaaaagaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaa
eiaaaaalpcaabaaaagaaaaaaegaabaaaagaaaaaaeghobaaaaaaaaaaaaagabaaa
abaaaaaaabeaaaaaaaaaaaaaaaaaaaaiicaabaaaafaaaaaabkaabaiaebaaaaaa
agaaaaaaakaabaaaagaaaaaadcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaa
dkaabaaaafaaaaaabkaabaaaagaaaaaadcaaaaajecaabaaaaeaaaaaadkaabaaa
aeaaaaaaabeaaaaaaaaaiadnckaabaaaaeaaaaaaaaaaaaaiicaabaaaadaaaaaa
dkaabaaaadaaaaaackaabaiaebaaaaaaaeaaaaaabnaaaaahicaabaaaadaaaaaa
abeaaaaaaknhkddmdkaabaaaadaaaaaaaaaaaaajicaabaaaacaaaaaadkaabaia
ebaaaaaaacaaaaaabkiacaaaaaaaaaaaabaaaaaaaaaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaacaeadiaaaaahicaabaaaacaaaaaackaabaaa
afaaaaaadkaabaaaacaaaaaadiaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
akiacaaaaaaaaaaaabaaaaaadiaaaaahecaabaaaaeaaaaaadkaabaaaacaaaaaa
dkaabaaaacaaaaaadcaaaaajbcaabaaaagaaaaaadkaabaaaacaaaaaackaabaaa
aeaaaaaaakaabaaaaeaaaaaadiaaaaahecaabaaaagaaaaaackaabaaaafaaaaaa
abeaaaaaaaaaiadoaaaaaaahccaabaaaagaaaaaabkaabaaaafaaaaaaabeaaaaa
mnmmemdodcaaaaanhcaabaaaahaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
mnmmmmdnmnmmmmdnmnmmmmdnaaaaaaaaegacbaaaadaaaaaadcaaaaanhcaabaaa
aiaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaajkjjjjdojkjjjjdojkjjjjdo
aaaaaaaaegacbaaaadaaaaaadhaaaaajhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaahaaaaaaegacbaaaaiaaaaaadgaaaaafbcaabaaaafaaaaaaakaabaaa
aeaaaaaadhaaaaajhcaabaaaafaaaaaapgapbaaaadaaaaaaegacbaaaagaaaaaa
egacbaaaafaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
abaaaaaadgaaaaafbcaabaaaaeaaaaaaakaabaaaafaaaaaabgaaaaabdgaaaaaf
ccaabaaaaeaaaaaaabeaaaaaaaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaa
aeaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaabkaabaaaafaaaaaaabeaaaaaaaaaiadpdicaaaaiiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakiacaaaaaaaaaaaacaaaaaaanaaaaaddkaabaaa
abaaaaaadgaaaaafhccabaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_OFF" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 94 ALU, 13 TEX, 5 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 25, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, 0.25000000
def c8, 0.12500000, 0.06250000, -0.02000000, 0.02000000
def c9, -100.00000000, 1.50000000, 2.00000000, 3.00000000
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r1.xyz, r1.x, v1
mov r2.xyz, v0
mov_pp r1.w, c6.x
loop aL, i0
break_eq r1.w, c6.y
mul r4.xyz, r2, c3.x
mul r5.xyz, r4, c6.z
mov r2.w, c0.z
mad r3.xyw, c4.x, r2.w, r5.xyzz
frc r4.w, r3.y
add r2.w, r3.y, -r4
mad r3.xy, r2.w, c7, r3.xwzw
mov r2.w, c0.y
mad r4.xyz, c4.x, r2.w, r4
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
mad r3.w, r3.x, r4, r3.y
frc r2.w, r4.y
add r3.x, r4.y, -r2.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r6.xy, r3.xyzz, s0
add r5.w, r6.x, -r6.y
mul r4.xyz, r5, c6.z
mov r4.w, c0.z
mad r5.xyz, c4.x, r4.w, r4
frc r4.w, r5.y
add r3.x, r5.y, -r4.w
mad r3.xy, r3.x, c7, r5.xzzw
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
mad r2.w, r5, r2, r6.y
mad r3.z, r3.w, c7, r2.w
add r2.w, r3.x, -r3.y
mul r4.xyz, r4, c6.z
mov r3.x, c0.w
mad r5.xyz, c4.x, r3.x, r4
mad r3.x, r2.w, r4.w, r3.y
mad r3.w, r3.x, c7, r3.z
frc r2.w, r5.y
add r3.x, r5.y, -r2.w
mov r3.z, c6.y
mad r3.xy, r3.x, c7, r5.xzzw
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
mad r3.x, r3, r2.w, r3.y
mov r4.w, c0
mul r3.z, c4.x, r4.w
mad r4.xyz, r4, c6.z, r3.z
frc r2.w, r4.y
mad r3.w, r3.x, c8.x, r3
add r3.x, r4.y, -r2.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r4.xyz, r3, c6.w
add r3.xyz, v2, -r2
dp3 r3.x, r3, r3
texldl r4.xy, r4.xyzz, s0
add r3.y, r4.x, -r4
mad r3.y, r3, r2.w, r4
rsq r3.x, r3.x
rcp r2.w, r3.x
mad r3.x, r3.y, c8.y, r3.w
add r2.w, r2, -c2.x
add r2.w, r2, -r3.x
add r4.x, r2.w, c8.w
add r2.w, r2, c8.z
mov r3.xyz, r2
mov r3.w, c6.y
cmp r0, r2.w, r0, r3
mad r3.xyz, -r1, r4.x, r2
cmp_pp r1.w, r2, r1, c6.y
cmp r2.xyz, -r1.w, r2, r3
endloop
cmp r0, -r1.w, r0, c9.x
add r0.xyz, -r0, v2
dp3 r0.x, r0, r0
mov r1.x, c2
add r1.x, c7.z, r1
add r0.y, -r1.x, c2.x
rsq r0.x, r0.x
add r0.y, r0, c9
rcp r0.x, r0.x
add r0.x, r0, -r1
rcp r0.y, r0.y
mul_sat r0.x, r0, r0.y
mul r0.y, r0.x, r0.x
mad r0.x, -r0, c9.z, c9.w
cmp r0.w, r0, c6.y, c6.x
mov_pp r1, -r0.w
rcp r0.z, c1.x
mul r0.x, r0.y, r0
mad r0.x, -r0, r0.z, c6
mov r0.yz, c6.y
texldl oC0.xyz, r0.xyzz, s1
texkill r1.xyzw
mov_sat oC0.w, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_OFF" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 91 instructions, 6 temp regs, 0 temp arrays:
// ALU 62 float, 2 int, 0 uint
// TEX 0 (6 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 2 dynamic
"ps_4_0
eefiecedmephngackdjpccmebmgflkhdjgcjgmjdabaaaaaadiamaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefceialaaaaeaaaaaaancacaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajhcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgihcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaabjaaaaaadgaaaaaficaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaacaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaaaaaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaabkaabaaa
afaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaaafaaaaaa
dcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaadpdkaabaaa
adaaaaaadcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaa
bkaabaaaafaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaam
dcaabaaaafaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaa
egaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaa
dcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaa
afaaaaaadcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaiado
dkaabaaaadaaaaaadcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaa
aaaaaaebaaaaaaebaaaaaaebaaaaaaaakgakbaaaabaaaaaabkaaaaaficaabaaa
aeaaaaaabkaabaaaafaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaa
dcaaaaamdcaabaaaafaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaeb
aaaaaaaaaaaaaaaaigaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaa
afaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaa
afaaaaaaegaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaibcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaa
afaaaaaadcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaa
bkaabaaaafaaaaaadcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaa
aaaaaadodkaabaaaadaaaaaadcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaa
aceaaaaaaaaaiaebaaaaiaebaaaaiaebaaaaaaaakgakbaaaabaaaaaabkaaaaaf
icaabaaaaeaaaaaabkaabaaaaeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaa
aeaaaaaadcaaaaamdcaabaaaaeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeec
aaaafaebaaaaaaaaaaaaaaaaigaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaa
egaabaaaaeaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaal
pcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaaaaaaaaaibcaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaa
akaabaaaafaaaaaadcaaaaajbcaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaa
aeaaaaaabkaabaaaafaaaaaadcaaaaajicaabaaaadaaaaaaakaabaaaaeaaaaaa
abeaaaaaaaaaiadndkaabaaaadaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaaa
acaaaaaadkaabaiaebaaaaaaadaaaaaadbaaaaahicaabaaaadaaaaaadkaabaaa
acaaaaaaabeaaaaaaknhkddmbpaaaeaddkaabaaaadaaaaaadgaaaaafhcaabaaa
acaaaaaaegacbaaaadaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaapppppppp
acaaaaabbfaaaaabaaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaa
aknhkddmdcaaaaakhcaabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaa
acaaaaaaegacbaaaadaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaabaaaaaadgaaaaaficaabaaaabaaaaaadkaabaaaadaaaaaadgaaaaai
hcaabaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaab
dhaaaaamhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaa
aaaamimcaaaamimcaaaamimcaaaaaaaaaaaaaaaiicaabaaaaaaaaaaabkiacaaa
aaaaaaaaabaaaaaaabeaaaaaaaaaaadpaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
aacaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajccaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
aaaaeaeadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaaoaaaaai
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaakiacaaaaaaaaaaaabaaaaaaaaaaaaai
bcaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdgaaaaaf
ccaabaaaaaaaaaaaabeaaaaaaaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaa
aaaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaadgcaaaag
iccabaaaaaaaaaaaakiacaaaaaaaaaaaacaaaaaaanaaaaaddkaabaaaabaaaaaa
dgaaaaafhccabaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_HIGH" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_ON" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_ON" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 145 ALU, 19 TEX, 10 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 9, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, 0.25000000
def c8, 0.12500000, -0.15000001, 0.02000000, -100.00000000
def c9, 0.20000000, 2.50000000, 0.40000001, 0.15000001
defi i1, 5, 0, 1, 0
def c10, 3.00000000, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r4.xyz, r0.x, v1
mov r3.xyz, v0
mov_pp r3.w, c6.x
loop aL, i0
break_eq r3.w, c6.y
mul r1.xyz, r3, c3.x
mul r5.xyz, r1, c6.z
mov r1.w, c0.y
mad r1.xyz, c4.x, r1.w, r1
mov r0.x, c0.z
mad r0.xyz, c4.x, r0.x, r5
frc r0.w, r0.y
add r0.y, r0, -r0.w
mad r0.xy, r0.y, c7, r0.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
frc r4.w, r1.y
add r0.z, r1.y, -r4.w
add r0.x, r0, -r0.y
mov r1.w, c6.y
mad r1.xy, r0.z, c7, r1.xzzw
mul r1.xyz, r1.xyww, c6.w
texldl r1.xy, r1.xyzz, s0
mad r1.z, r0.x, r0.w, r0.y
add r0.w, r1.x, -r1.y
mad r1.x, r0.w, r4.w, r1.y
mad r1.w, r1.z, c7.z, r1.x
mul r5.xyz, r5, c6.z
mov r0.x, c0.z
mad r0.xyz, c4.x, r0.x, r5
frc r0.w, r0.y
add r0.y, r0, -r0.w
mad r1.xy, r0.y, c7, r0.xzzw
mov r1.z, c6.y
mul r0.xyz, r1, c6.w
texldl r0.xy, r0.xyzz, s0
add r0.x, r0, -r0.y
mad r0.x, r0, r0.w, r0.y
mov r1.x, c0.w
mul r0.z, c4.x, r1.x
mad r1.xyz, r5, c6.z, r0.z
frc r0.w, r1.y
mad r1.w, r0.x, c7, r1
add r0.x, r1.y, -r0.w
mad r0.xy, r0.x, c7, r1.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
add r1.xyz, v2, -r3
dp3 r0.z, r1, r1
add r1.x, r0, -r0.y
mad r0.y, r1.x, r0.w, r0
rsq r0.x, r0.z
rcp r0.x, r0.x
mad r0.y, r0, c8.x, r1.w
add r0.x, r0, -c2
add r0.x, r0, -r0.y
add r1.x, r0, c8.y
add r1.y, r0.x, c8.z
mov r0.xyz, r3
mov r0.w, c6.y
cmp r2, r1.x, r2, r0
mad r0.xyz, -r4, r1.y, r3
cmp_pp r3.w, r1.x, r3, c6.y
cmp r3.xyz, -r3.w, r3, r0
endloop
cmp r0, -r3.w, r2, c8.w
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mov r2.w, r0
mul r1.xyz, r1.x, v1
mov r2.xyz, r0
mul r3.xyz, r1, c9.x
mov r3.w, c6.y
mov r0.w, c6.y
mov r1.w, c7.z
loop aL, i1
mul r0.xyz, r2, c3.x
mul r4.xyz, r0, c6.z
mov r5.x, c0.y
mad r0.xyz, c4.x, r5.x, r0
frc r5.w, r0.y
add r0.y, r0, -r5.w
mov r1.x, c0.z
mad r1.xyz, c4.x, r1.x, r4
frc r4.w, r1.y
add r1.y, r1, -r4.w
mad r1.xy, r1.y, c7, r1.xzzw
mov r1.z, c6.y
mul r1.xyz, r1, c6.w
texldl r1.xy, r1.xyzz, s0
mad r5.xy, r0.y, c7, r0.xzzw
mov r5.z, c6.y
mul r0.xyz, r5, c6.w
texldl r0.xy, r0.xyzz, s0
add r1.x, r1, -r1.y
mad r0.z, r1.x, r4.w, r1.y
add r4.w, r0.x, -r0.y
mul r1.xyz, r4, c6.z
mov r0.x, c0.z
mad r4.xyz, c4.x, r0.x, r1
mad r0.x, r4.w, r5.w, r0.y
mad r5.x, r0.z, c7.z, r0
frc r4.w, r4.y
add r0.x, r4.y, -r4.w
mad r0.xy, r0.x, c7, r4.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
add r0.x, r0, -r0.y
mad r0.x, r0, r4.w, r0.y
mov r4.x, c0.w
mul r0.z, c4.x, r4.x
mad r1.xyz, r1, c6.z, r0.z
frc r4.x, r1.y
mad r4.y, r0.x, c7.w, r5.x
add r0.x, r1.y, -r4
mad r0.xy, r0.x, c7, r1.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
add r1.xyz, v2, -r2
texldl r0.xy, r0.xyzz, s0
dp3 r0.z, r1, r1
add r1.x, r0, -r0.y
mad r0.y, r1.x, r4.x, r0
rsq r0.x, r0.z
rcp r0.x, r0.x
mad r0.y, r0, c8.x, r4
add r0.x, r0, -c2
add r0.y, r0.x, -r0
add r0.z, -r0.y, c9.w
cmp r0.z, r0, c6.x, c6.y
add r0.x, -r0, c9.y
mul r1.x, r0, r1.w
add r4.y, r0, c8
abs_pp r4.x, r0.z
add r0.xyz, r2, -r3
cmp r0.xyz, -r4.y, r0, r2
mul r4.z, r1.x, c1.x
mul r2.x, r4.z, r4.z
mad r4.z, r2.x, r4, r3.w
mad r1.xyz, -r3, c10.x, r0
cmp r2.xyz, -r4.x, r1, r0
mul r0.x, r1.w, c7.w
add r0.y, r0.w, c9.z
cmp r3.w, -r4.y, r4.z, r3
cmp r1.w, -r4.y, r0.x, r1
cmp r0.w, -r4.y, r0.y, r0
endloop
cmp r0.x, r2.w, c6.y, c6
mov_pp r1, -r0.x
mov_sat r0.w, r0
mov r0.yz, c6.y
mov r0.x, r3.w
texkill r1.xyzw
texldl oC0.xyz, r0.xyzz, s1
mul_sat oC0.w, r0, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_ON" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 138 instructions, 9 temp regs, 0 temp arrays:
// ALU 94 float, 4 int, 0 uint
// TEX 0 (9 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 3 dynamic
"ps_4_0
eefiecedckgpimjfekjcdofcijpfdmpjfimcedjcabaaaaaabebcaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefccebbaaaaeaaaaaaaejaeaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacajaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajhcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgihcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaajaaaaaadgaaaaaficaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaacaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaaaaaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaabkaabaaa
afaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaaafaaaaaa
dcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaadpdkaabaaa
adaaaaaadcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaa
bkaabaaaafaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaam
dcaabaaaafaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaa
egaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaa
dcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaa
afaaaaaadcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaiado
dkaabaaaadaaaaaadcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaaaceaaaaa
aaaaaaebaaaaaaebaaaaaaebaaaaaaaakgakbaaaabaaaaaabkaaaaaficaabaaa
aeaaaaaabkaabaaaaeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaaaeaaaaaa
dcaaaaamdcaabaaaaeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaeb
aaaaaaaaaaaaaaaaigaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaaegaabaaa
aeaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaibcaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaa
afaaaaaadcaaaaajbcaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaaeaaaaaa
bkaabaaaafaaaaaadcaaaaajicaabaaaadaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaaadodkaabaaaadaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
dkaabaiaebaaaaaaadaaaaaadbaaaaahicaabaaaadaaaaaadkaabaaaacaaaaaa
abeaaaaajkjjbjdobpaaaeaddkaabaaaadaaaaaadgaaaaafhcaabaaaacaaaaaa
egacbaaaadaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaappppppppacaaaaab
bfaaaaabaaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaknhkddm
dcaaaaakhcaabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaaacaaaaaa
egacbaaaadaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
abaaaaaadgaaaaaficaabaaaabaaaaaadkaabaaaadaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaam
hcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamimc
aaaamimcaaaamimcaaaaaaaadgaaaaafhcaabaaaadaaaaaaegacbaaaacaaaaaa
dgaaaaafbcaabaaaaeaaaaaaabeaaaaaaaaaaaaadgaaaaaigcaabaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaaaadgaaaaaficaabaaaaaaaaaaa
abeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaafaaaaaaadaaaeaddkaabaaaacaaaaaaaaaaaaaihcaabaaaagaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaacaaaaaa
egacbaaaagaaaaaaegacbaaaagaaaaaaelaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaaaaaaaaajicaabaaaadaaaaaadkaabaaaacaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaagaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaahaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaafecaabaaaaeaaaaaabkaabaaa
ahaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaamdcaabaaa
ahaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaaahaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaahaaaaaaegaabaaa
ahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaadcaaaaaj
ecaabaaaaeaaaaaackaabaaaaeaaaaaadkaabaaaaeaaaaaabkaabaaaahaaaaaa
dcaaaaamhcaabaaaahaaaaaaegacbaaaagaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaabkaabaaa
ahaaaaaaebaaaaaficaabaaaafaaaaaabkaabaaaahaaaaaadcaaaaamdcaabaaa
ahaaaaaapgapbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaaahaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaahaaaaaaegaabaaa
ahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaafaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaadcaaaaaj
icaabaaaaeaaaaaadkaabaaaaeaaaaaadkaabaaaafaaaaaabkaabaaaahaaaaaa
dcaaaaajecaabaaaaeaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaadpckaabaaa
aeaaaaaadcaaaaamhcaabaaaahaaaaaaegacbaaaagaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaa
bkaabaaaahaaaaaaebaaaaaficaabaaaafaaaaaabkaabaaaahaaaaaadcaaaaam
dcaabaaaahaaaaaapgapbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaaahaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaahaaaaaa
egaabaaaahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaiicaabaaaafaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaa
dcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaadkaabaaaafaaaaaabkaabaaa
ahaaaaaadcaaaaajecaabaaaaeaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaiado
ckaabaaaaeaaaaaadcaaaaamhcaabaaaagaaaaaaegacbaaaagaaaaaaaceaaaaa
aaaaaaebaaaaaaebaaaaaaebaaaaaaaakgakbaaaabaaaaaabkaaaaaficaabaaa
aeaaaaaabkaabaaaagaaaaaaebaaaaaficaabaaaafaaaaaabkaabaaaagaaaaaa
dcaaaaamdcaabaaaagaaaaaapgapbaaaafaaaaaaaceaaaaaaaaabeecaaaafaeb
aaaaaaaaaaaaaaaaigaabaaaagaaaaaadiaaaaakdcaabaaaagaaaaaaegaabaaa
agaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaa
agaaaaaaegaabaaaagaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaiicaabaaaafaaaaaabkaabaiaebaaaaaaagaaaaaaakaabaaa
agaaaaaadcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaadkaabaaaafaaaaaa
bkaabaaaagaaaaaadcaaaaajecaabaaaaeaaaaaadkaabaaaaeaaaaaaabeaaaaa
aaaaaadockaabaaaaeaaaaaaaaaaaaaiicaabaaaadaaaaaadkaabaaaadaaaaaa
ckaabaiaebaaaaaaaeaaaaaabnaaaaahicaabaaaadaaaaaaabeaaaaajkjjbjdo
dkaabaaaadaaaaaaaaaaaaajicaabaaaacaaaaaadkaabaiaebaaaaaaacaaaaaa
bkiacaaaaaaaaaaaabaaaaaaaaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaacaeadiaaaaahicaabaaaacaaaaaackaabaaaafaaaaaadkaabaaa
acaaaaaadiaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaaakiacaaaaaaaaaaa
abaaaaaadiaaaaahecaabaaaaeaaaaaadkaabaaaacaaaaaadkaabaaaacaaaaaa
dcaaaaajbcaabaaaagaaaaaadkaabaaaacaaaaaackaabaaaaeaaaaaaakaabaaa
aeaaaaaadiaaaaahecaabaaaagaaaaaackaabaaaafaaaaaaabeaaaaaaaaaiado
aaaaaaahccaabaaaagaaaaaabkaabaaaafaaaaaaabeaaaaamnmmmmdodcaaaaan
hcaabaaaahaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaamnmmemdomnmmemdo
mnmmemdoaaaaaaaaegacbaaaadaaaaaadcaaaaanhcaabaaaaiaaaaaaegacbaia
ebaaaaaaaaaaaaaaaceaaaaajkjjbjdpjkjjbjdpjkjjbjdpaaaaaaaaegacbaaa
adaaaaaadhaaaaajhcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaahaaaaaa
egacbaaaaiaaaaaadgaaaaafbcaabaaaafaaaaaaakaabaaaaeaaaaaadhaaaaaj
hcaabaaaafaaaaaapgapbaaaadaaaaaaegacbaaaagaaaaaaegacbaaaafaaaaaa
boaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaabaaaaaadgaaaaaf
bcaabaaaaeaaaaaaakaabaaaafaaaaaabgaaaaabdgaaaaafccaabaaaaeaaaaaa
abeaaaaaaaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaa
bkaabaaaafaaaaaaabeaaaaaaaaaiadpdicaaaaiiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakiacaaaaaaaaaaaacaaaaaaanaaaaaddkaabaaaabaaaaaadgaaaaaf
hccabaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_OFF" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 83 ALU, 11 TEX, 5 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 9, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, 0.25000000
def c8, 0.12500000, -0.15000001, 0.02000000, -100.00000000
def c9, 1.50000000, 2.00000000, 3.00000000, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r4.xyz, r0.x, v1
mov r3.xyz, v0
mov_pp r3.w, c6.x
loop aL, i0
break_eq r3.w, c6.y
mul r1.xyz, r3, c3.x
mul r5.xyz, r1, c6.z
mov r1.w, c0.y
mad r1.xyz, c4.x, r1.w, r1
mov r0.x, c0.z
mad r0.xyz, c4.x, r0.x, r5
frc r0.w, r0.y
add r0.y, r0, -r0.w
mad r0.xy, r0.y, c7, r0.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
frc r4.w, r1.y
add r0.z, r1.y, -r4.w
add r0.x, r0, -r0.y
mov r1.w, c6.y
mad r1.xy, r0.z, c7, r1.xzzw
mul r1.xyz, r1.xyww, c6.w
texldl r1.xy, r1.xyzz, s0
mad r1.z, r0.x, r0.w, r0.y
add r0.w, r1.x, -r1.y
mad r1.x, r0.w, r4.w, r1.y
mad r1.w, r1.z, c7.z, r1.x
mul r5.xyz, r5, c6.z
mov r0.x, c0.z
mad r0.xyz, c4.x, r0.x, r5
frc r0.w, r0.y
add r0.y, r0, -r0.w
mad r1.xy, r0.y, c7, r0.xzzw
mov r1.z, c6.y
mul r0.xyz, r1, c6.w
texldl r0.xy, r0.xyzz, s0
add r0.x, r0, -r0.y
mad r0.x, r0, r0.w, r0.y
mov r1.x, c0.w
mul r0.z, c4.x, r1.x
mad r1.xyz, r5, c6.z, r0.z
frc r0.w, r1.y
mad r1.w, r0.x, c7, r1
add r0.x, r1.y, -r0.w
mad r0.xy, r0.x, c7, r1.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
add r1.xyz, v2, -r3
dp3 r0.z, r1, r1
add r1.x, r0, -r0.y
mad r0.y, r1.x, r0.w, r0
rsq r0.x, r0.z
rcp r0.x, r0.x
mad r0.y, r0, c8.x, r1.w
add r0.x, r0, -c2
add r0.x, r0, -r0.y
add r1.x, r0, c8.y
add r1.y, r0.x, c8.z
mov r0.xyz, r3
mov r0.w, c6.y
cmp r2, r1.x, r2, r0
mad r0.xyz, -r4, r1.y, r3
cmp_pp r3.w, r1.x, r3, c6.y
cmp r3.xyz, -r3.w, r3, r0
endloop
cmp r0, -r3.w, r2, c8.w
add r0.xyz, -r0, v2
dp3 r0.x, r0, r0
mov r1.x, c2
add r1.x, c7.z, r1
add r0.y, -r1.x, c2.x
rsq r0.x, r0.x
add r0.y, r0, c9.x
rcp r0.x, r0.x
add r0.x, r0, -r1
rcp r0.y, r0.y
mul_sat r0.x, r0, r0.y
mul r0.y, r0.x, r0.x
mad r0.x, -r0, c9.y, c9.z
cmp r0.w, r0, c6.y, c6.x
mov_pp r1, -r0.w
rcp r0.z, c1.x
mul r0.x, r0.y, r0
mad r0.x, -r0, r0.z, c6
mov r0.yz, c6.y
texldl oC0.xyz, r0.xyzz, s1
texkill r1.xyzw
mov_sat oC0.w, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_OFF" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 82 instructions, 6 temp regs, 0 temp arrays:
// ALU 54 float, 2 int, 0 uint
// TEX 0 (5 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 2 dynamic
"ps_4_0
eefiecedgpllpdeikcemooajpigmndnbnnjpjfeiabaaaaaapeakaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcaeakaaaaeaaaaaaaibacaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajhcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgihcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaajaaaaaadgaaaaaficaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaacaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaaaaaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaabkaabaaa
afaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaaafaaaaaa
dcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaadpdkaabaaa
adaaaaaadcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaa
bkaabaaaafaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaam
dcaabaaaafaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaa
egaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaa
dcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaa
afaaaaaadcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaiado
dkaabaaaadaaaaaadcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaaaceaaaaa
aaaaaaebaaaaaaebaaaaaaebaaaaaaaakgakbaaaabaaaaaabkaaaaaficaabaaa
aeaaaaaabkaabaaaaeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaaaeaaaaaa
dcaaaaamdcaabaaaaeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaeb
aaaaaaaaaaaaaaaaigaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaaegaabaaa
aeaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaibcaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaa
afaaaaaadcaaaaajbcaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaaeaaaaaa
bkaabaaaafaaaaaadcaaaaajicaabaaaadaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaaadodkaabaaaadaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
dkaabaiaebaaaaaaadaaaaaadbaaaaahicaabaaaadaaaaaadkaabaaaacaaaaaa
abeaaaaajkjjbjdobpaaaeaddkaabaaaadaaaaaadgaaaaafhcaabaaaacaaaaaa
egacbaaaadaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaappppppppacaaaaab
bfaaaaabaaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaknhkddm
dcaaaaakhcaabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaaacaaaaaa
egacbaaaadaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
abaaaaaadgaaaaaficaabaaaabaaaaaadkaabaaaadaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaam
hcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamimc
aaaamimcaaaamimcaaaaaaaaaaaaaaaiicaabaaaaaaaaaaabkiacaaaaaaaaaaa
abaaaaaaabeaaaaaaaaaaadpaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaiaebaaaaaaadaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaaaacaaaai
bcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ccaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaaaaaaeaea
diaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaaoaaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaaakiacaaaaaaaaaaaabaaaaaaaaaaaaaibcaabaaa
aaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdgaaaaafccaabaaa
aaaaaaaaabeaaaaaaaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaabaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaadgcaaaagiccabaaa
aaaaaaaaakiacaaaaaaaaaaaacaaaaaaanaaaaaddkaabaaaabaaaaaadgaaaaaf
hccabaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_ON" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_ON" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 78 ALU, 7 TEX, 10 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 37.00000000, 13.00000000
defi i0, 9, 0, 1, 0
def c7, 0.01562500, -0.15000001, 0.02000000, -100.00000000
def c8, 0.50000000, 0.20000000, 2.50000000, 0.25000000
defi i1, 5, 0, 1, 0
def c9, 0.40000001, 0.15000001, 3.00000000, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r2.xyz, r1.x, v1
mov r3.xyz, v0
mov_pp r2.w, c6.x
loop aL, i0
break_eq r2.w, c6.y
add r4.xyz, v2, -r3
mov r1.x, c0.y
mul r1.x, c4, r1
mad r1.xyz, r3, c3.x, r1.x
frc r1.w, r1.y
add r1.y, r1, -r1.w
mad r1.xy, r1.y, c6.zwzw, r1.xzzw
mov r1.z, c6.y
mul r1.xyz, r1, c7.x
texldl r1.xy, r1.xyzz, s0
dp3 r3.w, r4, r4
rsq r1.z, r3.w
add r3.w, r1.x, -r1.y
mad r1.y, r3.w, r1.w, r1
rcp r1.x, r1.z
add r1.x, r1, -c2
add r1.x, r1, -r1.y
add r3.w, r1.x, c7.y
add r4.x, r1, c7.z
mov r1.xyz, r3
mov r1.w, c6.y
cmp r0, r3.w, r0, r1
mad r1.xyz, -r2, r4.x, r3
cmp_pp r2.w, r3, r2, c6.y
cmp r3.xyz, -r2.w, r3, r1
endloop
cmp r1, -r2.w, r0, c7.w
dp3 r2.x, v1, v1
rsq r0.x, r2.x
mov r0.w, r1
mul r0.xyz, r0.x, v1
mul r0.xyz, r0, c8.y
mov r1.w, c6.y
mov r2.w, c6.y
mov r3.w, c8.x
loop aL, i1
add r3.xyz, v2, -r1
mov r2.x, c0.y
mul r2.x, c4, r2
mad r2.xyz, r1, c3.x, r2.x
frc r4.x, r2.y
add r2.y, r2, -r4.x
mad r2.xy, r2.y, c6.zwzw, r2.xzzw
mov r2.z, c6.y
mul r2.xyz, r2, c7.x
dp3 r3.x, r3, r3
texldl r2.xy, r2.xyzz, s0
rsq r2.z, r3.x
add r3.x, r2, -r2.y
rcp r2.x, r2.z
mad r2.y, r3.x, r4.x, r2
add r3.z, r2.x, -c2.x
add r3.x, r3.z, -r2.y
add r4.x, -r3, c9.y
add r3.z, -r3, c8
cmp r4.x, r4, c6, c6.y
add r3.y, r3.x, c7
mul r3.z, r3, r3.w
add r2.xyz, r1, -r0
cmp r1.xyz, -r3.y, r2, r1
mul r3.x, r3.z, c1
mul r3.z, r3.x, r3.x
mad r3.x, r3.z, r3, r1.w
mad r2.xyz, -r0, c9.z, r1
abs_pp r4.x, r4
cmp r1.xyz, -r4.x, r2, r1
mul r2.x, r3.w, c8.w
add r2.y, r2.w, c9.x
cmp r1.w, -r3.y, r3.x, r1
cmp r3.w, -r3.y, r2.x, r3
cmp r2.w, -r3.y, r2.y, r2
endloop
cmp r0.x, r0.w, c6.y, c6
mov_pp r0, -r0.x
texkill r0.xyzw
mov_sat r0.w, r2
mov r0.yz, c6.y
mov r0.x, r1.w
texldl oC0.xyz, r0.xyzz, s1
mul_sat oC0.w, r0, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_ON" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 81 instructions, 8 temp regs, 0 temp arrays:
// ALU 44 float, 4 int, 0 uint
// TEX 0 (3 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 3 dynamic
"ps_4_0
eefiecedclfhclpaoemcmnlfjakhacfnmfdhppgbabaaaaaaciakaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcdiajaaaaeaaaaaaaeoacaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacaiaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajicaabaaaaaaaaaaa
dkiacaaaaaaaaaaaabaaaaaabkiacaaaabaaaaaaaaaaaaaadgaaaaafhcaabaaa
acaaaaaaegbcbaaaabaaaaaadgaaaaaipcaabaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaaaaa
daaaaaabcbaaaaahbcaabaaaadaaaaaadkaabaaaabaaaaaaabeaaaaaajaaaaaa
dgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaaaaaadaaaeadakaabaaaadaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaacaaaaaaegbcbaiaebaaaaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaaakaabaaa
adaaaaaabkiacaiaebaaaaaaaaaaaaaaabaaaaaadcaaaaakocaabaaaadaaaaaa
agajbaaaacaaaaaakgikcaaaaaaaaaaaabaaaaaapgapbaaaaaaaaaaabkaaaaaf
bcaabaaaaeaaaaaackaabaaaadaaaaaaebaaaaafecaabaaaadaaaaaackaabaaa
adaaaaaadcaaaaamgcaabaaaadaaaaaakgakbaaaadaaaaaaaceaaaaaaaaaaaaa
aaaabeecaaaafaebaaaaaaaafgahbaaaadaaaaaadiaaaaakgcaabaaaadaaaaaa
fgagbaaaadaaaaaaaceaaaaaaaaaaaaaaaaaiadmaaaaiadmaaaaaaaaeiaaaaal
pcaabaaaafaaaaaajgafbaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaaaaaaaaaiccaabaaaadaaaaaabkaabaiaebaaaaaaafaaaaaa
akaabaaaafaaaaaadcaaaaajccaabaaaadaaaaaaakaabaaaaeaaaaaabkaabaaa
adaaaaaabkaabaaaafaaaaaaaaaaaaaibcaabaaaadaaaaaabkaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaadbaaaaahccaabaaaadaaaaaaakaabaaaadaaaaaa
abeaaaaajkjjbjdobpaaaeadbkaabaaaadaaaaaadgaaaaafhcaabaaaabaaaaaa
egacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaappppppppacaaaaab
bfaaaaabaaaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaknhkddm
dcaaaaakhcaabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaagaabaaaadaaaaaa
egacbaaaacaaaaaaboaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
abaaaaaadgaaaaaficaabaaaacaaaaaabkaabaaaadaaaaaadgaaaaaihcaabaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaam
hcaabaaaabaaaaaapgapbaaaacaaaaaaegacbaaaabaaaaaaaceaaaaaaaaamimc
aaaamimcaaaamimcaaaaaaaadgaaaaafhcaabaaaacaaaaaaegacbaaaabaaaaaa
dgaaaaafbcaabaaaadaaaaaaabeaaaaaaaaaaaaadgaaaaaigcaabaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaaaadgaaaaaficaabaaaabaaaaaa
abeaaaaaaaaaaaaadaaaaaabcbaaaaahecaabaaaadaaaaaadkaabaaaabaaaaaa
abeaaaaaafaaaaaaadaaaeadckaabaaaadaaaaaaaaaaaaaihcaabaaaafaaaaaa
egacbaaaacaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahecaabaaaadaaaaaa
egacbaaaafaaaaaaegacbaaaafaaaaaaelaaaaafecaabaaaadaaaaaackaabaaa
adaaaaaaaaaaaaajicaabaaaadaaaaaackaabaaaadaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaacaaaaaakgikcaaa
aaaaaaaaabaaaaaapgapbaaaaaaaaaaabkaaaaaficaabaaaaeaaaaaabkaabaaa
afaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaaafaaaaaa
aaaaaaaiicaabaaaadaaaaaadkaabaaaadaaaaaadkaabaiaebaaaaaaaeaaaaaa
bnaaaaahicaabaaaadaaaaaaabeaaaaajkjjbjdodkaabaaaadaaaaaaaaaaaaaj
ecaabaaaadaaaaaackaabaiaebaaaaaaadaaaaaabkiacaaaaaaaaaaaabaaaaaa
aaaaaaahecaabaaaadaaaaaackaabaaaadaaaaaaabeaaaaaaaaacaeadiaaaaah
ecaabaaaadaaaaaackaabaaaaeaaaaaackaabaaaadaaaaaadiaaaaaiecaabaaa
adaaaaaackaabaaaadaaaaaaakiacaaaaaaaaaaaabaaaaaadiaaaaahicaabaaa
aeaaaaaackaabaaaadaaaaaackaabaaaadaaaaaadcaaaaajbcaabaaaafaaaaaa
ckaabaaaadaaaaaadkaabaaaaeaaaaaaakaabaaaadaaaaaadiaaaaahecaabaaa
afaaaaaackaabaaaaeaaaaaaabeaaaaaaaaaiadoaaaaaaahccaabaaaafaaaaaa
bkaabaaaaeaaaaaaabeaaaaamnmmmmdodcaaaaanhcaabaaaagaaaaaaegacbaia
ebaaaaaaaaaaaaaaaceaaaaamnmmemdomnmmemdomnmmemdoaaaaaaaaegacbaaa
acaaaaaadcaaaaanhcaabaaaahaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
jkjjbjdpjkjjbjdpjkjjbjdpaaaaaaaaegacbaaaacaaaaaadhaaaaajhcaabaaa
acaaaaaapgapbaaaadaaaaaaegacbaaaagaaaaaaegacbaaaahaaaaaadgaaaaaf
bcaabaaaaeaaaaaaakaabaaaadaaaaaadhaaaaajhcaabaaaaeaaaaaapgapbaaa
adaaaaaaegacbaaaafaaaaaaegacbaaaaeaaaaaaboaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaabaaaaaadgaaaaafbcaabaaaadaaaaaaakaabaaa
aeaaaaaabgaaaaabdgaaaaafccaabaaaadaaaaaaabeaaaaaaaaaaaaaeiaaaaal
pcaabaaaaaaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaa
abeaaaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaabkaabaaaaeaaaaaaabeaaaaa
aaaaiadpdicaaaaiiccabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaaaaaaaaaaa
acaaaaaaanaaaaaddkaabaaaacaaaaaadgaaaaafhccabaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_OFF" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 50 ALU, 5 TEX, 5 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 37.00000000, 13.00000000
defi i0, 9, 0, 1, 0
def c7, 0.01562500, -0.15000001, 0.02000000, -100.00000000
def c8, 0.50000000, 1.50000000, 2.00000000, 3.00000000
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r2.xyz, r1.x, v1
mov r3.xyz, v0
mov_pp r2.w, c6.x
loop aL, i0
break_eq r2.w, c6.y
add r4.xyz, v2, -r3
mov r1.x, c0.y
mul r1.x, c4, r1
mad r1.xyz, r3, c3.x, r1.x
frc r1.w, r1.y
add r1.y, r1, -r1.w
mad r1.xy, r1.y, c6.zwzw, r1.xzzw
mov r1.z, c6.y
mul r1.xyz, r1, c7.x
texldl r1.xy, r1.xyzz, s0
dp3 r3.w, r4, r4
rsq r1.z, r3.w
add r3.w, r1.x, -r1.y
mad r1.y, r3.w, r1.w, r1
rcp r1.x, r1.z
add r1.x, r1, -c2
add r1.x, r1, -r1.y
add r3.w, r1.x, c7.y
add r4.x, r1, c7.z
mov r1.xyz, r3
mov r1.w, c6.y
cmp r0, r3.w, r0, r1
mad r1.xyz, -r2, r4.x, r3
cmp_pp r2.w, r3, r2, c6.y
cmp r3.xyz, -r2.w, r3, r1
endloop
cmp r0, -r2.w, r0, c7.w
add r0.xyz, -r0, v2
dp3 r0.x, r0, r0
mov r1.x, c2
add r1.x, c8, r1
add r0.y, -r1.x, c2.x
rsq r0.x, r0.x
add r0.y, r0, c8
rcp r0.x, r0.x
add r0.x, r0, -r1
rcp r0.y, r0.y
mul_sat r0.x, r0, r0.y
mul r0.y, r0.x, r0.x
mad r0.x, -r0, c8.z, c8.w
cmp r0.w, r0, c6.y, c6.x
mov_pp r1, -r0.w
rcp r0.z, c1.x
mul r0.x, r0.y, r0
mad r0.x, -r0, r0.z, c6
mov r0.yz, c6.y
texldl oC0.xyz, r0.xyzz, s1
texkill r1.xyzw
mov_sat oC0.w, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_OFF" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 53 instructions, 6 temp regs, 0 temp arrays:
// ALU 29 float, 2 int, 0 uint
// TEX 0 (2 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 2 dynamic
"ps_4_0
eefieceddfbdgiafcibmfhabmbkljnhheljoccghabaaaaaapeagaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcaeagaaaaeaaaaaaaibabaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajicaabaaaaaaaaaaa
dkiacaaaaaaaaaaaabaaaaaabkiacaaaabaaaaaaaaaaaaaadgaaaaafhcaabaaa
acaaaaaaegbcbaaaabaaaaaadgaaaaaipcaabaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaaaaa
daaaaaabcbaaaaahbcaabaaaadaaaaaadkaabaaaabaaaaaaabeaaaaaajaaaaaa
dgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaaaaaadaaaeadakaabaaaadaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaacaaaaaaegbcbaiaebaaaaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaaakaabaaa
adaaaaaabkiacaiaebaaaaaaaaaaaaaaabaaaaaadcaaaaakocaabaaaadaaaaaa
agajbaaaacaaaaaakgikcaaaaaaaaaaaabaaaaaapgapbaaaaaaaaaaabkaaaaaf
bcaabaaaaeaaaaaackaabaaaadaaaaaaebaaaaafecaabaaaadaaaaaackaabaaa
adaaaaaadcaaaaamgcaabaaaadaaaaaakgakbaaaadaaaaaaaceaaaaaaaaaaaaa
aaaabeecaaaafaebaaaaaaaafgahbaaaadaaaaaadiaaaaakgcaabaaaadaaaaaa
fgagbaaaadaaaaaaaceaaaaaaaaaaaaaaaaaiadmaaaaiadmaaaaaaaaeiaaaaal
pcaabaaaafaaaaaajgafbaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaaaaaaaaaiccaabaaaadaaaaaabkaabaiaebaaaaaaafaaaaaa
akaabaaaafaaaaaadcaaaaajccaabaaaadaaaaaaakaabaaaaeaaaaaabkaabaaa
adaaaaaabkaabaaaafaaaaaaaaaaaaaibcaabaaaadaaaaaabkaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaadbaaaaahccaabaaaadaaaaaaakaabaaaadaaaaaa
abeaaaaajkjjbjdobpaaaeadbkaabaaaadaaaaaadgaaaaafhcaabaaaabaaaaaa
egacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaappppppppacaaaaab
bfaaaaabaaaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaknhkddm
dcaaaaakhcaabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaagaabaaaadaaaaaa
egacbaaaacaaaaaaboaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
abaaaaaadgaaaaaficaabaaaacaaaaaabkaabaaaadaaaaaadgaaaaaihcaabaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaam
hcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaabaaaaaaaceaaaaaaaaamimc
aaaamimcaaaamimcaaaaaaaaaaaaaaaiicaabaaaaaaaaaaabkiacaaaaaaaaaaa
abaaaaaaabeaaaaaaaaaaadpaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaiaebaaaaaaadaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaaaacaaaai
bcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ccaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaaaaaaeaea
diaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaaoaaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaaakiacaaaaaaaaaaaabaaaaaaaaaaaaaibcaabaaa
aaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdgaaaaafccaabaaa
aaaaaaaaabeaaaaaaaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaabaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaadgcaaaagiccabaaa
aaaaaaaaakiacaaaaaaaaaaaacaaaaaaanaaaaaddkaabaaaacaaaaaadgaaaaaf
hccabaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_ON" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_ON" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 101 ALU, 11 TEX, 10 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 9, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, -0.15000001
def c8, 0.02000000, -100.00000000, 0.20000000, 2.50000000
defi i1, 5, 0, 1, 0
def c9, 0.25000000, 0.40000001, 0.15000001, 3.00000000
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r2.xyz, r0.x, v1
mov r0.xyz, v0
mov_pp r0.w, c6.x
loop aL, i0
break_eq r0.w, c6.y
mov r2.w, c0.z
mul r3.xyz, r0, c3.x
mul r2.w, c4.x, r2
mad r4.xyz, r3, c6.z, r2.w
frc r3.w, r4.y
add r2.w, r4.y, -r3
mad r4.xy, r2.w, c7, r4.xzzw
mov r2.w, c0.y
mad r3.xyz, c4.x, r2.w, r3
frc r2.w, r3.y
mov r4.w, c6.y
mul r4.xyz, r4.xyww, c6.w
texldl r4.xy, r4.xyzz, s0
add r4.x, r4, -r4.y
mad r3.w, r4.x, r3, r4.y
add r3.y, r3, -r2.w
mad r4.xy, r3.y, c7, r3.xzzw
add r3.xyz, v2, -r0
dp3 r3.y, r3, r3
mov r4.z, c6.y
mul r4.xyz, r4, c6.w
texldl r4.xy, r4.xyzz, s0
add r3.x, r4, -r4.y
mad r2.w, r3.x, r2, r4.y
mad r2.w, r3, c7.z, r2
rsq r3.y, r3.y
rcp r3.x, r3.y
add r3.x, r3, -c2
add r3.x, r3, -r2.w
add r4.x, r3, c7.w
add r2.w, r3.x, c8.x
mov r3.xyz, r0
mov r3.w, c6.y
cmp r1, r4.x, r1, r3
mad r3.xyz, -r2, r2.w, r0
cmp_pp r0.w, r4.x, r0, c6.y
cmp r0.xyz, -r0.w, r0, r3
endloop
cmp r0, -r0.w, r1, c8.y
dp3 r2.x, v1, v1
rsq r1.x, r2.x
mul r2.xyz, r1.x, v1
mov r1.w, r0
mov r1.xyz, r0
mul r0.xyz, r2, c8.z
mov r0.w, c6.y
mov r3.x, c6.y
mov r2.w, c7.z
loop aL, i1
mov r2.x, c0.z
mul r3.y, c4.x, r2.x
mul r2.xyz, r1, c3.x
mad r4.xyz, r2, c6.z, r3.y
frc r4.w, r4.y
add r3.y, r4, -r4.w
mad r3.yz, r3.y, c7.xxyw, r4.xxzw
mov r3.w, c6.y
mul r4.xyz, r3.yzww, c6.w
texldl r4.xy, r4.xyzz, s0
mov r3.y, c0
mad r2.xyz, c4.x, r3.y, r2
frc r3.y, r2
add r3.z, r4.x, -r4.y
mad r3.z, r3, r4.w, r4.y
add r2.y, r2, -r3
mad r4.xy, r2.y, c7, r2.xzzw
add r2.xyz, v2, -r1
dp3 r2.y, r2, r2
mov r4.z, c6.y
mul r4.xyz, r4, c6.w
texldl r4.xy, r4.xyzz, s0
add r2.x, r4, -r4.y
mad r2.x, r2, r3.y, r4.y
rsq r2.y, r2.y
rcp r2.y, r2.y
add r2.z, r2.y, -c2.x
mad r2.x, r3.z, c7.z, r2
add r2.y, r2.z, -r2.x
add r2.x, -r2.y, c9.z
cmp r2.x, r2, c6, c6.y
abs_pp r3.y, r2.x
add r2.x, -r2.z, c8.w
mul r3.w, r2.x, r2
add r3.z, r2.y, c7.w
add r2.xyz, r1, -r0
cmp r2.xyz, -r3.z, r2, r1
mad r1.xyz, -r0, c9.w, r2
cmp r1.xyz, -r3.y, r1, r2
mul r3.w, r3, c1.x
mul r4.x, r3.w, r3.w
mad r3.w, r4.x, r3, r0
mul r2.y, r2.w, c9.x
add r2.x, r3, c9.y
cmp r0.w, -r3.z, r3, r0
cmp r2.w, -r3.z, r2.y, r2
cmp r3.x, -r3.z, r2, r3
endloop
cmp r0.x, r1.w, c6.y, c6
mov_pp r1, -r0.x
texkill r1.xyzw
mov_sat r0.x, r3
mov r1.yz, c6.y
mov r1.x, r0.w
texldl oC0.xyz, r1.xyzz, s1
mul_sat oC0.w, r0.x, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_ON" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 102 instructions, 9 temp regs, 0 temp arrays:
// ALU 62 float, 4 int, 0 uint
// TEX 0 (5 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 3 dynamic
"ps_4_0
eefiecedhicmkkilfbcpiklecmblhohmjpagjgdkabaaaaaaaeanaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcbeamaaaaeaaaaaaaafadaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacajaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajdcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgifcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaaabeaaaaaajaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaabaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaaaaaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaacaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaadaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaadaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaadaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaadaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
aeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaaaeaaaaaadcaaaaamdcaabaaa
aeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaaegaabaaaaeaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaaeaaaaaaegaabaaa
aeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaaeaaaaaabkaabaiaebaaaaaaaeaaaaaaakaabaaaaeaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaaakaabaaaaeaaaaaabkaabaaaaeaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaaadpdkaabaaa
acaaaaaaaaaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaa
acaaaaaadbaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaajkjjbjdo
bpaaaeaddkaabaaaacaaaaaadgaaaaafhcaabaaaacaaaaaaegacbaaaadaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaappppppppacaaaaabbfaaaaabaaaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaknhkddmdcaaaaakhcaabaaa
adaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaadaaaaaa
boaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaabaaaaaadgaaaaaf
ecaabaaaabaaaaaadkaabaaaacaaaaaadgaaaaaihcaabaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaamhcaabaaaacaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamimcaaaamimcaaaamimc
aaaaaaaadgaaaaafhcaabaaaadaaaaaaegacbaaaacaaaaaadgaaaaafbcaabaaa
aeaaaaaaabeaaaaaaaaaaaaadgaaaaaigcaabaaaafaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaadpaaaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
daaaaaabcbaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaaabeaaaaaafaaaaaa
adaaaeaddkaabaaaabaaaaaaaaaaaaaihcaabaaaagaaaaaaegacbaaaadaaaaaa
egbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaagaaaaaa
egacbaaaagaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaj
icaabaaaacaaaaaadkaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaaabaaaaaa
diaaaaaihcaabaaaagaaaaaaegacbaaaadaaaaaakgikcaaaaaaaaaaaabaaaaaa
dcaaaaakhcaabaaaahaaaaaaegacbaaaadaaaaaakgikcaaaaaaaaaaaabaaaaaa
agaabaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaaahaaaaaaebaaaaaf
ecaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaammcaabaaaaeaaaaaakgakbaaa
aeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaabeecaaaafaebagaibaaaahaaaaaa
diaaaaakmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadmaaaaiadmeiaaaaalpcaabaaaahaaaaaaogakbaaaaeaaaaaaeghobaaa
aaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaiecaabaaaaeaaaaaa
bkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaadcaaaaajicaabaaaadaaaaaa
dkaabaaaadaaaaaackaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaamhcaabaaa
agaaaaaaegacbaaaagaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaaa
fgafbaaaabaaaaaabkaaaaafecaabaaaaeaaaaaabkaabaaaagaaaaaaebaaaaaf
icaabaaaaeaaaaaabkaabaaaagaaaaaadcaaaaamdcaabaaaagaaaaaapgapbaaa
aeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaaigaabaaaagaaaaaa
diaaaaakdcaabaaaagaaaaaaegaabaaaagaaaaaaaceaaaaaaaaaiadmaaaaiadm
aaaaaaaaaaaaaaaaeiaaaaalpcaabaaaagaaaaaaegaabaaaagaaaaaaeghobaaa
aaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaiicaabaaaaeaaaaaa
bkaabaiaebaaaaaaagaaaaaaakaabaaaagaaaaaadcaaaaajecaabaaaaeaaaaaa
ckaabaaaaeaaaaaadkaabaaaaeaaaaaabkaabaaaagaaaaaadcaaaaajicaabaaa
adaaaaaackaabaaaaeaaaaaaabeaaaaaaaaaaadpdkaabaaaadaaaaaaaaaaaaai
icaabaaaacaaaaaadkaabaaaacaaaaaadkaabaiaebaaaaaaadaaaaaabnaaaaah
icaabaaaacaaaaaaabeaaaaajkjjbjdodkaabaaaacaaaaaaaaaaaaajicaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaabkiacaaaaaaaaaaaabaaaaaaaaaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaacaeadiaaaaahicaabaaa
abaaaaaackaabaaaafaaaaaadkaabaaaabaaaaaadiaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaaakiacaaaaaaaaaaaabaaaaaadiaaaaahicaabaaaadaaaaaa
dkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaagaaaaaadkaabaaa
abaaaaaadkaabaaaadaaaaaaakaabaaaaeaaaaaadiaaaaahecaabaaaagaaaaaa
ckaabaaaafaaaaaaabeaaaaaaaaaiadoaaaaaaahccaabaaaagaaaaaabkaabaaa
afaaaaaaabeaaaaamnmmmmdodcaaaaanhcaabaaaahaaaaaaegacbaiaebaaaaaa
aaaaaaaaaceaaaaamnmmemdomnmmemdomnmmemdoaaaaaaaaegacbaaaadaaaaaa
dcaaaaanhcaabaaaaiaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaajkjjbjdp
jkjjbjdpjkjjbjdpaaaaaaaaegacbaaaadaaaaaadhaaaaajhcaabaaaadaaaaaa
pgapbaaaacaaaaaaegacbaaaahaaaaaaegacbaaaaiaaaaaadgaaaaafbcaabaaa
afaaaaaaakaabaaaaeaaaaaadhaaaaajhcaabaaaafaaaaaapgapbaaaacaaaaaa
egacbaaaagaaaaaaegacbaaaafaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaabaaaaaadgaaaaafbcaabaaaaeaaaaaaakaabaaaafaaaaaa
bgaaaaabdgaaaaafccaabaaaaeaaaaaaabeaaaaaaaaaaaaaeiaaaaalpcaabaaa
aaaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaabeaaaaa
aaaaaaaaddaaaaahicaabaaaaaaaaaaabkaabaaaafaaaaaaabeaaaaaaaaaiadp
dicaaaaiiccabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaaaaaaaaaaaacaaaaaa
anaaaaadckaabaaaabaaaaaadgaaaaafhccabaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_OFF" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 61 ALU, 7 TEX, 5 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 9, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, -0.15000001
def c8, 0.02000000, -100.00000000, 1.50000000, 0
def c9, 2.00000000, 3.00000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r2.xyz, r0.x, v1
mov r0.xyz, v0
mov_pp r0.w, c6.x
loop aL, i0
break_eq r0.w, c6.y
mov r2.w, c0.z
mul r3.xyz, r0, c3.x
mul r2.w, c4.x, r2
mad r4.xyz, r3, c6.z, r2.w
frc r3.w, r4.y
add r2.w, r4.y, -r3
mad r4.xy, r2.w, c7, r4.xzzw
mov r2.w, c0.y
mad r3.xyz, c4.x, r2.w, r3
frc r2.w, r3.y
mov r4.w, c6.y
mul r4.xyz, r4.xyww, c6.w
texldl r4.xy, r4.xyzz, s0
add r4.x, r4, -r4.y
mad r3.w, r4.x, r3, r4.y
add r3.y, r3, -r2.w
mad r4.xy, r3.y, c7, r3.xzzw
add r3.xyz, v2, -r0
dp3 r3.y, r3, r3
mov r4.z, c6.y
mul r4.xyz, r4, c6.w
texldl r4.xy, r4.xyzz, s0
add r3.x, r4, -r4.y
mad r2.w, r3.x, r2, r4.y
mad r2.w, r3, c7.z, r2
rsq r3.y, r3.y
rcp r3.x, r3.y
add r3.x, r3, -c2
add r3.x, r3, -r2.w
add r4.x, r3, c7.w
add r2.w, r3.x, c8.x
mov r3.xyz, r0
mov r3.w, c6.y
cmp r1, r4.x, r1, r3
mad r3.xyz, -r2, r2.w, r0
cmp_pp r0.w, r4.x, r0, c6.y
cmp r0.xyz, -r0.w, r0, r3
endloop
cmp r0, -r0.w, r1, c8.y
add r2.xyz, -r0, v2
mov r1.x, c2
add r0.y, c7.z, r1.x
add r0.x, -r0.y, c2
dp3 r0.z, r2, r2
rsq r0.z, r0.z
rcp r0.z, r0.z
add r0.x, r0, c8.z
add r0.y, r0.z, -r0
rcp r0.x, r0.x
mul_sat r0.x, r0.y, r0
mul r0.z, r0.x, r0.x
mad r0.y, -r0.x, c9.x, c9
rcp r0.x, c1.x
mul r0.y, r0.z, r0
mad r1.x, -r0.y, r0, c6
cmp r0.x, r0.w, c6.y, c6
mov r1.yz, c6.y
mov_pp r0, -r0.x
texldl oC0.xyz, r1.xyzz, s1
texkill r0.xyzw
mov_sat oC0.w, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_OFF" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 64 instructions, 6 temp regs, 0 temp arrays:
// ALU 38 float, 2 int, 0 uint
// TEX 0 (3 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 2 dynamic
"ps_4_0
eefiecedcfmohcfpgdgakdomapmidfhblcmodcknabaaaaaagmaiaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefchmahaaaaeaaaaaaanpabaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajdcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgifcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaaabeaaaaaajaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaabaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaaaaaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaacaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaadaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaadaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaadaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaadaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
aeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaaaeaaaaaadcaaaaamdcaabaaa
aeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaaegaabaaaaeaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaaeaaaaaaegaabaaa
aeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaaeaaaaaabkaabaiaebaaaaaaaeaaaaaaakaabaaaaeaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaaakaabaaaaeaaaaaabkaabaaaaeaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaaadpdkaabaaa
acaaaaaaaaaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaa
acaaaaaadbaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaajkjjbjdo
bpaaaeaddkaabaaaacaaaaaadgaaaaafhcaabaaaacaaaaaaegacbaaaadaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaappppppppacaaaaabbfaaaaabaaaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaknhkddmdcaaaaakhcaabaaa
adaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaadaaaaaa
boaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaabaaaaaadgaaaaaf
ecaabaaaabaaaaaadkaabaaaacaaaaaadgaaaaaihcaabaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaamhcaabaaaaaaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamimcaaaamimcaaaamimc
aaaaaaaaaaaaaaaiicaabaaaaaaaaaaabkiacaaaaaaaaaaaabaaaaaaabeaaaaa
aaaaaadpaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaiaebaaaaaa
adaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaaaacaaaaibcaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajccaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaaaaaaeaeadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaaaoaaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaaakiacaaaaaaaaaaaabaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdgaaaaafccaabaaaaaaaaaaaabeaaaaa
aaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaaaaaaaaaabeaaaaaaaaaaaaadgcaaaagiccabaaaaaaaaaaaakiacaaa
aaaaaaaaacaaaaaaanaaaaadckaabaaaabaaaaaadgaaaaafhccabaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_ON" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_ON" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 122 ALU, 15 TEX, 10 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 9, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, 0.25000000
def c8, -0.15000001, 0.02000000, -100.00000000, 0.20000000
defi i1, 5, 0, 1, 0
def c9, 2.50000000, 0.40000001, 0.15000001, 3.00000000
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r1.xyz, r1.x, v1
mov r2.xyz, v0
mov_pp r1.w, c6.x
loop aL, i0
break_eq r1.w, c6.y
mul r4.xyz, r2, c3.x
mul r5.xyz, r4, c6.z
mov r2.w, c0.z
mad r3.xyw, c4.x, r2.w, r5.xyzz
frc r2.w, r3.y
add r3.y, r3, -r2.w
mad r3.xy, r3.y, c7, r3.xwzw
mov r3.w, c0.y
mad r4.xyz, c4.x, r3.w, r4
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
frc r3.w, r4.y
mad r2.w, r3.x, r2, r3.y
add r3.x, r4.y, -r3.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
mad r3.x, r3, r3.w, r3.y
mov r4.x, c0.z
mul r3.z, c4.x, r4.x
mad r4.xyz, r5, c6.z, r3.z
frc r3.w, r4.y
mad r2.w, r2, c7.z, r3.x
add r3.x, r4.y, -r3.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r4.xyz, r3, c6.w
add r3.xyz, v2, -r2
dp3 r3.x, r3, r3
texldl r4.xy, r4.xyzz, s0
add r3.y, r4.x, -r4
mad r3.y, r3, r3.w, r4
rsq r3.x, r3.x
mad r3.y, r3, c7.w, r2.w
rcp r3.x, r3.x
add r2.w, r3.x, -c2.x
add r2.w, r2, -r3.y
add r4.x, r2.w, c8.y
add r2.w, r2, c8.x
mov r3.xyz, r2
mov r3.w, c6.y
cmp r0, r2.w, r0, r3
mad r3.xyz, -r1, r4.x, r2
cmp_pp r1.w, r2, r1, c6.y
cmp r2.xyz, -r1.w, r2, r3
endloop
cmp r0, -r1.w, r0, c8.z
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r1.xyz, r1.x, v1
mov r2.xyz, r0
mul r1.xyz, r1, c8.w
mov r1.w, c6.y
mov r2.w, c6.y
mov r3.w, c7.z
loop aL, i1
mul r3.xyz, r2, c3.x
mul r4.xyz, r3, c6.z
mov r0.x, c0.z
mad r5.xyz, c4.x, r0.x, r4
frc r4.w, r5.y
add r0.x, r5.y, -r4.w
mad r0.xy, r0.x, c7, r5.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r5.xy, r0.xyzz, s0
mov r5.z, c0.y
mad r0.xyz, c4.x, r5.z, r3
add r3.x, r5, -r5.y
frc r5.x, r0.y
mad r4.w, r3.x, r4, r5.y
add r0.y, r0, -r5.x
mad r3.xy, r0.y, c7, r0.xzzw
mov r3.z, c6.y
mul r0.xyz, r3, c6.w
texldl r0.xy, r0.xyzz, s0
add r0.x, r0, -r0.y
mov r3.x, c0.z
mul r0.z, c4.x, r3.x
mad r3.xyz, r4, c6.z, r0.z
mad r0.x, r0, r5, r0.y
frc r4.x, r3.y
mad r4.y, r4.w, c7.z, r0.x
add r0.x, r3.y, -r4
mad r0.xy, r0.x, c7, r3.xzzw
mov r0.z, c6.y
mul r3.xyz, r0, c6.w
add r0.xyz, v2, -r2
dp3 r0.x, r0, r0
texldl r3.xy, r3.xyzz, s0
add r0.y, r3.x, -r3
mad r0.y, r0, r4.x, r3
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, r0, -c2
mad r0.y, r0, c7.w, r4
add r0.y, r0.x, -r0
add r0.z, -r0.y, c9
cmp r0.z, r0, c6.x, c6.y
add r0.x, -r0, c9
mul r3.z, r0.x, r3.w
mul r3.z, r3, c1.x
mul r4.x, r3.z, r3.z
add r3.y, r0, c8.x
abs_pp r3.x, r0.z
add r0.xyz, r2, -r1
cmp r0.xyz, -r3.y, r0, r2
mad r2.xyz, -r1, c9.w, r0
cmp r2.xyz, -r3.x, r2, r0
mad r3.z, r4.x, r3, r1.w
mul r0.x, r3.w, c7.w
add r0.y, r2.w, c9
cmp r1.w, -r3.y, r3.z, r1
cmp r3.w, -r3.y, r0.x, r3
cmp r2.w, -r3.y, r0.y, r2
endloop
cmp r0.x, r0.w, c6.y, c6
mov_pp r0, -r0.x
texkill r0.xyzw
mov_sat r0.w, r2
mov r0.yz, c6.y
mov r0.x, r1.w
texldl oC0.xyz, r0.xyzz, s1
mul_sat oC0.w, r0, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_ON" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 120 instructions, 9 temp regs, 0 temp arrays:
// ALU 78 float, 4 int, 0 uint
// TEX 0 (7 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 3 dynamic
"ps_4_0
eefiecedehfhaodjmcakgdbhdballoojgfknhlepabaaaaaaimapaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcjmaoaaaaeaaaaaaakhadaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacajaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajdcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgifcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaaabeaaaaaajaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaabaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaaaaaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaacaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaadaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaadaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaadaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaadaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaabkaabaaaafaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaaadpdkaabaaa
acaaaaaadcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaadaaaaaa
bkaabaaaaeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaaaeaaaaaadcaaaaam
dcaabaaaaeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaaegaabaaaaeaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaaeaaaaaabkaabaiaebaaaaaaaeaaaaaaakaabaaaaeaaaaaa
dcaaaaajicaabaaaadaaaaaadkaabaaaadaaaaaaakaabaaaaeaaaaaabkaabaaa
aeaaaaaadcaaaaajicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaiado
dkaabaaaacaaaaaaaaaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaacaaaaaadbaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaa
jkjjbjdobpaaaeaddkaabaaaacaaaaaadgaaaaafhcaabaaaacaaaaaaegacbaaa
adaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaappppppppacaaaaabbfaaaaab
aaaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaknhkddmdcaaaaak
hcaabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaaabaaaaaaegacbaaa
adaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaabaaaaaa
dgaaaaafecaabaaaabaaaaaadkaabaaaacaaaaaadgaaaaaihcaabaaaacaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaamhcaabaaa
acaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamimcaaaamimc
aaaamimcaaaaaaaadgaaaaafhcaabaaaadaaaaaaegacbaaaacaaaaaadgaaaaaf
bcaabaaaaeaaaaaaabeaaaaaaaaaaaaadgaaaaaigcaabaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaadpaaaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaa
aaaaaaaadaaaaaabcbaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaaabeaaaaa
afaaaaaaadaaaeaddkaabaaaabaaaaaaaaaaaaaihcaabaaaagaaaaaaegacbaaa
adaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
agaaaaaaegacbaaaagaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
aaaaaaajicaabaaaacaaaaaadkaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
abaaaaaadiaaaaaihcaabaaaagaaaaaaegacbaaaadaaaaaakgikcaaaaaaaaaaa
abaaaaaadcaaaaakhcaabaaaahaaaaaaegacbaaaadaaaaaakgikcaaaaaaaaaaa
abaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaaahaaaaaa
ebaaaaafecaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaammcaabaaaaeaaaaaa
kgakbaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaabeecaaaafaebagaibaaa
ahaaaaaadiaaaaakmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaiadmaaaaiadmeiaaaaalpcaabaaaahaaaaaaogakbaaaaeaaaaaa
eghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaiecaabaaa
aeaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaadcaaaaajicaabaaa
adaaaaaadkaabaaaadaaaaaackaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaam
hcaabaaaahaaaaaaegacbaaaagaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaaafgafbaaaabaaaaaabkaaaaafecaabaaaaeaaaaaabkaabaaaahaaaaaa
ebaaaaaficaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaamdcaabaaaahaaaaaa
pgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaaigaabaaa
ahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaaahaaaaaaaceaaaaaaaaaiadm
aaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaahaaaaaaegaabaaaahaaaaaa
eghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaiicaabaaa
aeaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaadcaaaaajecaabaaa
aeaaaaaackaabaaaaeaaaaaadkaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaaj
icaabaaaadaaaaaackaabaaaaeaaaaaaabeaaaaaaaaaaadpdkaabaaaadaaaaaa
dcaaaaamhcaabaaaagaaaaaaegacbaaaagaaaaaaaceaaaaaaaaaiaeaaaaaiaea
aaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaafecaabaaaaeaaaaaabkaabaaa
agaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaagaaaaaadcaaaaamdcaabaaa
agaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaagaaaaaadiaaaaakdcaabaaaagaaaaaaegaabaaaagaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaagaaaaaaegaabaaa
agaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaagaaaaaaakaabaaaagaaaaaadcaaaaaj
ecaabaaaaeaaaaaackaabaaaaeaaaaaadkaabaaaaeaaaaaabkaabaaaagaaaaaa
dcaaaaajicaabaaaadaaaaaackaabaaaaeaaaaaaabeaaaaaaaaaiadodkaabaaa
adaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaiaebaaaaaa
adaaaaaabnaaaaahicaabaaaacaaaaaaabeaaaaajkjjbjdodkaabaaaacaaaaaa
aaaaaaajicaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaabkiacaaaaaaaaaaa
abaaaaaaaaaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaacaea
diaaaaahicaabaaaabaaaaaackaabaaaafaaaaaadkaabaaaabaaaaaadiaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaaakiacaaaaaaaaaaaabaaaaaadiaaaaah
icaabaaaadaaaaaadkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaa
agaaaaaadkaabaaaabaaaaaadkaabaaaadaaaaaaakaabaaaaeaaaaaadiaaaaah
ecaabaaaagaaaaaackaabaaaafaaaaaaabeaaaaaaaaaiadoaaaaaaahccaabaaa
agaaaaaabkaabaaaafaaaaaaabeaaaaamnmmmmdodcaaaaanhcaabaaaahaaaaaa
egacbaiaebaaaaaaaaaaaaaaaceaaaaamnmmemdomnmmemdomnmmemdoaaaaaaaa
egacbaaaadaaaaaadcaaaaanhcaabaaaaiaaaaaaegacbaiaebaaaaaaaaaaaaaa
aceaaaaajkjjbjdpjkjjbjdpjkjjbjdpaaaaaaaaegacbaaaadaaaaaadhaaaaaj
hcaabaaaadaaaaaapgapbaaaacaaaaaaegacbaaaahaaaaaaegacbaaaaiaaaaaa
dgaaaaafbcaabaaaafaaaaaaakaabaaaaeaaaaaadhaaaaajhcaabaaaafaaaaaa
pgapbaaaacaaaaaaegacbaaaagaaaaaaegacbaaaafaaaaaaboaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaabaaaaaadgaaaaafbcaabaaaaeaaaaaa
akaabaaaafaaaaaabgaaaaabdgaaaaafccaabaaaaeaaaaaaabeaaaaaaaaaaaaa
eiaaaaalpcaabaaaaaaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
aaaaaaaaabeaaaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaabkaabaaaafaaaaaa
abeaaaaaaaaaiadpdicaaaaiiccabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaaa
aaaaaaaaacaaaaaaanaaaaadckaabaaaabaaaaaadgaaaaafhccabaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_OFF" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 72 ALU, 9 TEX, 5 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 9, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, 0.25000000
def c8, -0.15000001, 0.02000000, -100.00000000, 1.50000000
def c9, 2.00000000, 3.00000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r1.xyz, r1.x, v1
mov r2.xyz, v0
mov_pp r1.w, c6.x
loop aL, i0
break_eq r1.w, c6.y
mul r4.xyz, r2, c3.x
mul r5.xyz, r4, c6.z
mov r2.w, c0.z
mad r3.xyw, c4.x, r2.w, r5.xyzz
frc r2.w, r3.y
add r3.y, r3, -r2.w
mad r3.xy, r3.y, c7, r3.xwzw
mov r3.w, c0.y
mad r4.xyz, c4.x, r3.w, r4
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
frc r3.w, r4.y
mad r2.w, r3.x, r2, r3.y
add r3.x, r4.y, -r3.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
mad r3.x, r3, r3.w, r3.y
mov r4.x, c0.z
mul r3.z, c4.x, r4.x
mad r4.xyz, r5, c6.z, r3.z
frc r3.w, r4.y
mad r2.w, r2, c7.z, r3.x
add r3.x, r4.y, -r3.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r4.xyz, r3, c6.w
add r3.xyz, v2, -r2
dp3 r3.x, r3, r3
texldl r4.xy, r4.xyzz, s0
add r3.y, r4.x, -r4
mad r3.y, r3, r3.w, r4
rsq r3.x, r3.x
mad r3.y, r3, c7.w, r2.w
rcp r3.x, r3.x
add r2.w, r3.x, -c2.x
add r2.w, r2, -r3.y
add r4.x, r2.w, c8.y
add r2.w, r2, c8.x
mov r3.xyz, r2
mov r3.w, c6.y
cmp r0, r2.w, r0, r3
mad r3.xyz, -r1, r4.x, r2
cmp_pp r1.w, r2, r1, c6.y
cmp r2.xyz, -r1.w, r2, r3
endloop
cmp r0, -r1.w, r0, c8.z
add r0.xyz, -r0, v2
dp3 r0.x, r0, r0
mov r1.x, c2
add r1.x, c7.z, r1
add r0.y, -r1.x, c2.x
rsq r0.x, r0.x
add r0.y, r0, c8.w
rcp r0.x, r0.x
add r0.x, r0, -r1
rcp r0.y, r0.y
mul_sat r0.x, r0, r0.y
mul r0.y, r0.x, r0.x
mad r0.x, -r0, c9, c9.y
cmp r0.w, r0, c6.y, c6.x
mov_pp r1, -r0.w
rcp r0.z, c1.x
mul r0.x, r0.y, r0
mad r0.x, -r0, r0.z, c6
mov r0.yz, c6.y
texldl oC0.xyz, r0.xyzz, s1
texkill r1.xyzw
mov_sat oC0.w, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_OFF" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 73 instructions, 6 temp regs, 0 temp arrays:
// ALU 46 float, 2 int, 0 uint
// TEX 0 (4 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 2 dynamic
"ps_4_0
eefiecedjhhhehfgogpbbmmfpbmhnjjfbppffnaaabaaaaaalaajaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcmaaiaaaaeaaaaaaadaacaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajdcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgifcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaaabeaaaaaajaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaabaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaaaaaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaacaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaadaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaadaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaadaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaadaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaabkaabaaaafaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaaadpdkaabaaa
acaaaaaadcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaadaaaaaa
bkaabaaaaeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaaaeaaaaaadcaaaaam
dcaabaaaaeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaaegaabaaaaeaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaaeaaaaaabkaabaiaebaaaaaaaeaaaaaaakaabaaaaeaaaaaa
dcaaaaajicaabaaaadaaaaaadkaabaaaadaaaaaaakaabaaaaeaaaaaabkaabaaa
aeaaaaaadcaaaaajicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaiado
dkaabaaaacaaaaaaaaaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaacaaaaaadbaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaa
jkjjbjdobpaaaeaddkaabaaaacaaaaaadgaaaaafhcaabaaaacaaaaaaegacbaaa
adaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaappppppppacaaaaabbfaaaaab
aaaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaknhkddmdcaaaaak
hcaabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaaabaaaaaaegacbaaa
adaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaabaaaaaa
dgaaaaafecaabaaaabaaaaaadkaabaaaacaaaaaadgaaaaaihcaabaaaacaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaamhcaabaaa
aaaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamimcaaaamimc
aaaamimcaaaaaaaaaaaaaaaiicaabaaaaaaaaaaabkiacaaaaaaaaaaaabaaaaaa
abeaaaaaaaaaaadpaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaia
ebaaaaaaadaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaaaacaaaaibcaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajccaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaaaaaaeaeadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaaoaaaaaibcaabaaaaaaaaaaa
akaabaaaaaaaaaaaakiacaaaaaaaaaaaabaaaaaaaaaaaaaibcaabaaaaaaaaaaa
akaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdgaaaaafccaabaaaaaaaaaaa
abeaaaaaaaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaa
abaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaadgcaaaagiccabaaaaaaaaaaa
akiacaaaaaaaaaaaacaaaaaaanaaaaadckaabaaaabaaaaaadgaaaaafhccabaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_ON" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_ON" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 166 ALU, 23 TEX, 10 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 9, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, 0.25000000
def c8, 0.12500000, 0.06250000, -0.15000001, 0.02000000
def c9, -100.00000000, 0.20000000, 2.50000000, 0.40000001
defi i1, 5, 0, 1, 0
def c10, 0.15000001, 3.00000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r1.xyz, r1.x, v1
mov r2.xyz, v0
mov_pp r1.w, c6.x
loop aL, i0
break_eq r1.w, c6.y
mul r4.xyz, r2, c3.x
mul r5.xyz, r4, c6.z
mov r2.w, c0.z
mad r3.xyw, c4.x, r2.w, r5.xyzz
frc r4.w, r3.y
add r2.w, r3.y, -r4
mad r3.xy, r2.w, c7, r3.xwzw
mov r2.w, c0.y
mad r4.xyz, c4.x, r2.w, r4
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
mad r3.w, r3.x, r4, r3.y
frc r2.w, r4.y
add r3.x, r4.y, -r2.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r6.xy, r3.xyzz, s0
add r5.w, r6.x, -r6.y
mul r4.xyz, r5, c6.z
mov r4.w, c0.z
mad r5.xyz, c4.x, r4.w, r4
frc r4.w, r5.y
add r3.x, r5.y, -r4.w
mad r3.xy, r3.x, c7, r5.xzzw
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
mad r2.w, r5, r2, r6.y
mad r3.z, r3.w, c7, r2.w
add r2.w, r3.x, -r3.y
mul r4.xyz, r4, c6.z
mov r3.x, c0.w
mad r5.xyz, c4.x, r3.x, r4
mad r3.x, r2.w, r4.w, r3.y
mad r3.w, r3.x, c7, r3.z
frc r2.w, r5.y
add r3.x, r5.y, -r2.w
mov r3.z, c6.y
mad r3.xy, r3.x, c7, r5.xzzw
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
mad r3.x, r3, r2.w, r3.y
mov r4.w, c0
mul r3.z, c4.x, r4.w
mad r4.xyz, r4, c6.z, r3.z
frc r2.w, r4.y
mad r3.w, r3.x, c8.x, r3
add r3.x, r4.y, -r2.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r4.xyz, r3, c6.w
add r3.xyz, v2, -r2
dp3 r3.x, r3, r3
texldl r4.xy, r4.xyzz, s0
add r3.y, r4.x, -r4
mad r3.y, r3, r2.w, r4
rsq r3.x, r3.x
rcp r2.w, r3.x
mad r3.x, r3.y, c8.y, r3.w
add r2.w, r2, -c2.x
add r2.w, r2, -r3.x
add r4.x, r2.w, c8.w
add r2.w, r2, c8.z
mov r3.xyz, r2
mov r3.w, c6.y
cmp r0, r2.w, r0, r3
mad r3.xyz, -r1, r4.x, r2
cmp_pp r1.w, r2, r1, c6.y
cmp r2.xyz, -r1.w, r2, r3
endloop
cmp r0, -r1.w, r0, c9.x
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r1.xyz, r1.x, v1
mov r2.xyz, r0
mul r1.xyz, r1, c9.y
mov r1.w, c6.y
mov r2.w, c6.y
mov r3.w, c7.z
loop aL, i1
mul r3.xyz, r2, c3.x
mul r4.xyz, r3, c6.z
mov r0.x, c0.z
mad r5.xyz, c4.x, r0.x, r4
frc r5.w, r5.y
add r0.x, r5.y, -r5.w
mov r4.w, c0.y
mad r3.xyz, c4.x, r4.w, r3
mad r0.xy, r0.x, c7, r5.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
add r0.x, r0, -r0.y
frc r4.w, r3.y
mad r5.z, r0.x, r5.w, r0.y
add r0.x, r3.y, -r4.w
mad r0.xy, r0.x, c7, r3.xzzw
mul r3.xyz, r4, c6.z
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r5.xy, r0.xyzz, s0
mov r4.x, c0.z
mad r4.xyz, c4.x, r4.x, r3
frc r5.w, r4.y
add r0.x, r4.y, -r5.w
mad r0.xy, r0.x, c7, r4.xzzw
add r5.x, r5, -r5.y
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
mad r4.x, r5, r4.w, r5.y
add r4.w, r0.x, -r0.y
mad r0.z, r5, c7, r4.x
mul r3.xyz, r3, c6.z
mov r0.x, c0.w
mad r4.xyz, c4.x, r0.x, r3
mad r0.x, r4.w, r5.w, r0.y
mad r5.x, r0, c7.w, r0.z
frc r4.w, r4.y
add r0.x, r4.y, -r4.w
mad r0.xy, r0.x, c7, r4.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
add r0.x, r0, -r0.y
mad r0.x, r0, r4.w, r0.y
mov r4.x, c0.w
mul r0.z, c4.x, r4.x
mad r3.xyz, r3, c6.z, r0.z
frc r4.x, r3.y
mad r4.y, r0.x, c8.x, r5.x
add r0.x, r3.y, -r4
mad r0.xy, r0.x, c7, r3.xzzw
mov r0.z, c6.y
mul r3.xyz, r0, c6.w
add r0.xyz, v2, -r2
dp3 r0.x, r0, r0
texldl r3.xy, r3.xyzz, s0
add r0.y, r3.x, -r3
mad r0.y, r0, r4.x, r3
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, r0, -c2
mad r0.y, r0, c8, r4
add r0.y, r0.x, -r0
add r0.z, -r0.y, c10.x
cmp r0.z, r0, c6.x, c6.y
add r0.x, -r0, c9.z
mul r3.z, r0.x, r3.w
mul r3.z, r3, c1.x
mul r4.x, r3.z, r3.z
add r3.y, r0, c8.z
abs_pp r3.x, r0.z
add r0.xyz, r2, -r1
cmp r0.xyz, -r3.y, r0, r2
mad r2.xyz, -r1, c10.y, r0
cmp r2.xyz, -r3.x, r2, r0
mad r3.z, r4.x, r3, r1.w
mul r0.x, r3.w, c7.w
add r0.y, r2.w, c9.w
cmp r1.w, -r3.y, r3.z, r1
cmp r3.w, -r3.y, r0.x, r3
cmp r2.w, -r3.y, r0.y, r2
endloop
cmp r0.x, r0.w, c6.y, c6
mov_pp r0, -r0.x
texkill r0.xyzw
mov_sat r0.w, r2
mov r0.yz, c6.y
mov r0.x, r1.w
texldl oC0.xyz, r0.xyzz, s1
mul_sat oC0.w, r0, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_ON" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 156 instructions, 9 temp regs, 0 temp arrays:
// ALU 110 float, 4 int, 0 uint
// TEX 0 (11 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 3 dynamic
"ps_4_0
eefiecedhbbmhngkgecgkibhhonccmkoohlajabdabaaaaaajmbeaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefckmbdaaaaeaaaaaaaolaeaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacajaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajhcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgihcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaajaaaaaadgaaaaaficaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaacaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaaaaaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaabkaabaaa
afaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaaafaaaaaa
dcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaadpdkaabaaa
adaaaaaadcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaa
bkaabaaaafaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaam
dcaabaaaafaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaa
egaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaa
dcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaa
afaaaaaadcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaiado
dkaabaaaadaaaaaadcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaa
aaaaaaebaaaaaaebaaaaaaebaaaaaaaakgakbaaaabaaaaaabkaaaaaficaabaaa
aeaaaaaabkaabaaaafaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaa
dcaaaaamdcaabaaaafaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaeb
aaaaaaaaaaaaaaaaigaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaa
afaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaa
afaaaaaaegaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaibcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaa
afaaaaaadcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaa
bkaabaaaafaaaaaadcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaa
aaaaaadodkaabaaaadaaaaaadcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaa
aceaaaaaaaaaiaebaaaaiaebaaaaiaebaaaaaaaakgakbaaaabaaaaaabkaaaaaf
icaabaaaaeaaaaaabkaabaaaaeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaa
aeaaaaaadcaaaaamdcaabaaaaeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeec
aaaafaebaaaaaaaaaaaaaaaaigaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaa
egaabaaaaeaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaal
pcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaaaaaaaaaibcaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaa
akaabaaaafaaaaaadcaaaaajbcaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaa
aeaaaaaabkaabaaaafaaaaaadcaaaaajicaabaaaadaaaaaaakaabaaaaeaaaaaa
abeaaaaaaaaaiadndkaabaaaadaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaaa
acaaaaaadkaabaiaebaaaaaaadaaaaaadbaaaaahicaabaaaadaaaaaadkaabaaa
acaaaaaaabeaaaaajkjjbjdobpaaaeaddkaabaaaadaaaaaadgaaaaafhcaabaaa
acaaaaaaegacbaaaadaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaapppppppp
acaaaaabbfaaaaabaaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaa
aknhkddmdcaaaaakhcaabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaa
acaaaaaaegacbaaaadaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaabaaaaaadgaaaaaficaabaaaabaaaaaadkaabaaaadaaaaaadgaaaaai
hcaabaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaab
dhaaaaamhcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaa
aaaamimcaaaamimcaaaamimcaaaaaaaadgaaaaafhcaabaaaadaaaaaaegacbaaa
acaaaaaadgaaaaafbcaabaaaaeaaaaaaabeaaaaaaaaaaaaadgaaaaaigcaabaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaaaadgaaaaaficaabaaa
aaaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaafaaaaaaadaaaeaddkaabaaaacaaaaaaaaaaaaaihcaabaaa
agaaaaaaegacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaa
acaaaaaaegacbaaaagaaaaaaegacbaaaagaaaaaaelaaaaaficaabaaaacaaaaaa
dkaabaaaacaaaaaaaaaaaaajicaabaaaadaaaaaadkaabaaaacaaaaaabkiacaia
ebaaaaaaaaaaaaaaabaaaaaadiaaaaaihcaabaaaagaaaaaaegacbaaaadaaaaaa
kgikcaaaaaaaaaaaabaaaaaadcaaaaakhcaabaaaahaaaaaaegacbaaaadaaaaaa
kgikcaaaaaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaafecaabaaaaeaaaaaa
bkaabaaaahaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaam
dcaabaaaahaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaaahaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaahaaaaaa
egaabaaaahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaiicaabaaaaeaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaa
dcaaaaajecaabaaaaeaaaaaackaabaaaaeaaaaaadkaabaaaaeaaaaaabkaabaaa
ahaaaaaadcaaaaamhcaabaaaahaaaaaaegacbaaaagaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaa
bkaabaaaahaaaaaaebaaaaaficaabaaaafaaaaaabkaabaaaahaaaaaadcaaaaam
dcaabaaaahaaaaaapgapbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaaahaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaahaaaaaa
egaabaaaahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaiicaabaaaafaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaa
dcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaadkaabaaaafaaaaaabkaabaaa
ahaaaaaadcaaaaajecaabaaaaeaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaadp
ckaabaaaaeaaaaaadcaaaaamhcaabaaaahaaaaaaegacbaaaagaaaaaaaceaaaaa
aaaaiaeaaaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaa
aeaaaaaabkaabaaaahaaaaaaebaaaaaficaabaaaafaaaaaabkaabaaaahaaaaaa
dcaaaaamdcaabaaaahaaaaaapgapbaaaafaaaaaaaceaaaaaaaaabeecaaaafaeb
aaaaaaaaaaaaaaaaigaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaa
ahaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaa
ahaaaaaaegaabaaaahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaiicaabaaaafaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaa
ahaaaaaadcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaadkaabaaaafaaaaaa
bkaabaaaahaaaaaadcaaaaajecaabaaaaeaaaaaadkaabaaaaeaaaaaaabeaaaaa
aaaaiadockaabaaaaeaaaaaadcaaaaamhcaabaaaahaaaaaaegacbaaaagaaaaaa
aceaaaaaaaaaaaebaaaaaaebaaaaaaebaaaaaaaakgakbaaaabaaaaaabkaaaaaf
icaabaaaaeaaaaaabkaabaaaahaaaaaaebaaaaaficaabaaaafaaaaaabkaabaaa
ahaaaaaadcaaaaamdcaabaaaahaaaaaapgapbaaaafaaaaaaaceaaaaaaaaabeec
aaaafaebaaaaaaaaaaaaaaaaigaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaa
egaabaaaahaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaal
pcaabaaaahaaaaaaegaabaaaahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaaaaaaaaaiicaabaaaafaaaaaabkaabaiaebaaaaaaahaaaaaa
akaabaaaahaaaaaadcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaadkaabaaa
afaaaaaabkaabaaaahaaaaaadcaaaaajecaabaaaaeaaaaaadkaabaaaaeaaaaaa
abeaaaaaaaaaaadockaabaaaaeaaaaaadcaaaaamhcaabaaaagaaaaaaegacbaaa
agaaaaaaaceaaaaaaaaaiaebaaaaiaebaaaaiaebaaaaaaaakgakbaaaabaaaaaa
bkaaaaaficaabaaaaeaaaaaabkaabaaaagaaaaaaebaaaaaficaabaaaafaaaaaa
bkaabaaaagaaaaaadcaaaaamdcaabaaaagaaaaaapgapbaaaafaaaaaaaceaaaaa
aaaabeecaaaafaebaaaaaaaaaaaaaaaaigaabaaaagaaaaaadiaaaaakdcaabaaa
agaaaaaaegaabaaaagaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaa
eiaaaaalpcaabaaaagaaaaaaegaabaaaagaaaaaaeghobaaaaaaaaaaaaagabaaa
abaaaaaaabeaaaaaaaaaaaaaaaaaaaaiicaabaaaafaaaaaabkaabaiaebaaaaaa
agaaaaaaakaabaaaagaaaaaadcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaa
dkaabaaaafaaaaaabkaabaaaagaaaaaadcaaaaajecaabaaaaeaaaaaadkaabaaa
aeaaaaaaabeaaaaaaaaaiadnckaabaaaaeaaaaaaaaaaaaaiicaabaaaadaaaaaa
dkaabaaaadaaaaaackaabaiaebaaaaaaaeaaaaaabnaaaaahicaabaaaadaaaaaa
abeaaaaajkjjbjdodkaabaaaadaaaaaaaaaaaaajicaabaaaacaaaaaadkaabaia
ebaaaaaaacaaaaaabkiacaaaaaaaaaaaabaaaaaaaaaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaacaeadiaaaaahicaabaaaacaaaaaackaabaaa
afaaaaaadkaabaaaacaaaaaadiaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
akiacaaaaaaaaaaaabaaaaaadiaaaaahecaabaaaaeaaaaaadkaabaaaacaaaaaa
dkaabaaaacaaaaaadcaaaaajbcaabaaaagaaaaaadkaabaaaacaaaaaackaabaaa
aeaaaaaaakaabaaaaeaaaaaadiaaaaahecaabaaaagaaaaaackaabaaaafaaaaaa
abeaaaaaaaaaiadoaaaaaaahccaabaaaagaaaaaabkaabaaaafaaaaaaabeaaaaa
mnmmmmdodcaaaaanhcaabaaaahaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
mnmmemdomnmmemdomnmmemdoaaaaaaaaegacbaaaadaaaaaadcaaaaanhcaabaaa
aiaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaajkjjbjdpjkjjbjdpjkjjbjdp
aaaaaaaaegacbaaaadaaaaaadhaaaaajhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaahaaaaaaegacbaaaaiaaaaaadgaaaaafbcaabaaaafaaaaaaakaabaaa
aeaaaaaadhaaaaajhcaabaaaafaaaaaapgapbaaaadaaaaaaegacbaaaagaaaaaa
egacbaaaafaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
abaaaaaadgaaaaafbcaabaaaaeaaaaaaakaabaaaafaaaaaabgaaaaabdgaaaaaf
ccaabaaaaeaaaaaaabeaaaaaaaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaa
aeaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaabkaabaaaafaaaaaaabeaaaaaaaaaiadpdicaaaaiiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakiacaaaaaaaaaaaacaaaaaaanaaaaaddkaabaaa
abaaaaaadgaaaaafhccabaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_OFF" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 94 ALU, 13 TEX, 5 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 9, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, 0.25000000
def c8, 0.12500000, 0.06250000, -0.15000001, 0.02000000
def c9, -100.00000000, 1.50000000, 2.00000000, 3.00000000
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r1.xyz, r1.x, v1
mov r2.xyz, v0
mov_pp r1.w, c6.x
loop aL, i0
break_eq r1.w, c6.y
mul r4.xyz, r2, c3.x
mul r5.xyz, r4, c6.z
mov r2.w, c0.z
mad r3.xyw, c4.x, r2.w, r5.xyzz
frc r4.w, r3.y
add r2.w, r3.y, -r4
mad r3.xy, r2.w, c7, r3.xwzw
mov r2.w, c0.y
mad r4.xyz, c4.x, r2.w, r4
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
mad r3.w, r3.x, r4, r3.y
frc r2.w, r4.y
add r3.x, r4.y, -r2.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r6.xy, r3.xyzz, s0
add r5.w, r6.x, -r6.y
mul r4.xyz, r5, c6.z
mov r4.w, c0.z
mad r5.xyz, c4.x, r4.w, r4
frc r4.w, r5.y
add r3.x, r5.y, -r4.w
mad r3.xy, r3.x, c7, r5.xzzw
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
mad r2.w, r5, r2, r6.y
mad r3.z, r3.w, c7, r2.w
add r2.w, r3.x, -r3.y
mul r4.xyz, r4, c6.z
mov r3.x, c0.w
mad r5.xyz, c4.x, r3.x, r4
mad r3.x, r2.w, r4.w, r3.y
mad r3.w, r3.x, c7, r3.z
frc r2.w, r5.y
add r3.x, r5.y, -r2.w
mov r3.z, c6.y
mad r3.xy, r3.x, c7, r5.xzzw
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
mad r3.x, r3, r2.w, r3.y
mov r4.w, c0
mul r3.z, c4.x, r4.w
mad r4.xyz, r4, c6.z, r3.z
frc r2.w, r4.y
mad r3.w, r3.x, c8.x, r3
add r3.x, r4.y, -r2.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r4.xyz, r3, c6.w
add r3.xyz, v2, -r2
dp3 r3.x, r3, r3
texldl r4.xy, r4.xyzz, s0
add r3.y, r4.x, -r4
mad r3.y, r3, r2.w, r4
rsq r3.x, r3.x
rcp r2.w, r3.x
mad r3.x, r3.y, c8.y, r3.w
add r2.w, r2, -c2.x
add r2.w, r2, -r3.x
add r4.x, r2.w, c8.w
add r2.w, r2, c8.z
mov r3.xyz, r2
mov r3.w, c6.y
cmp r0, r2.w, r0, r3
mad r3.xyz, -r1, r4.x, r2
cmp_pp r1.w, r2, r1, c6.y
cmp r2.xyz, -r1.w, r2, r3
endloop
cmp r0, -r1.w, r0, c9.x
add r0.xyz, -r0, v2
dp3 r0.x, r0, r0
mov r1.x, c2
add r1.x, c7.z, r1
add r0.y, -r1.x, c2.x
rsq r0.x, r0.x
add r0.y, r0, c9
rcp r0.x, r0.x
add r0.x, r0, -r1
rcp r0.y, r0.y
mul_sat r0.x, r0, r0.y
mul r0.y, r0.x, r0.x
mad r0.x, -r0, c9.z, c9.w
cmp r0.w, r0, c6.y, c6.x
mov_pp r1, -r0.w
rcp r0.z, c1.x
mul r0.x, r0.y, r0
mad r0.x, -r0, r0.z, c6
mov r0.yz, c6.y
texldl oC0.xyz, r0.xyzz, s1
texkill r1.xyzw
mov_sat oC0.w, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_OFF" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 91 instructions, 6 temp regs, 0 temp arrays:
// ALU 62 float, 2 int, 0 uint
// TEX 0 (6 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 2 dynamic
"ps_4_0
eefiecedhiilimnmllpcikiomndcbhgnajnglgdbabaaaaaadiamaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefceialaaaaeaaaaaaancacaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajhcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgihcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaajaaaaaadgaaaaaficaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaacaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaaaaaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaabkaabaaa
afaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaaafaaaaaa
dcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaadpdkaabaaa
adaaaaaadcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaa
bkaabaaaafaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaam
dcaabaaaafaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaa
egaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaa
dcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaa
afaaaaaadcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaiado
dkaabaaaadaaaaaadcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaa
aaaaaaebaaaaaaebaaaaaaebaaaaaaaakgakbaaaabaaaaaabkaaaaaficaabaaa
aeaaaaaabkaabaaaafaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaa
dcaaaaamdcaabaaaafaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaeb
aaaaaaaaaaaaaaaaigaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaa
afaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaa
afaaaaaaegaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaibcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaa
afaaaaaadcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaa
bkaabaaaafaaaaaadcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaa
aaaaaadodkaabaaaadaaaaaadcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaa
aceaaaaaaaaaiaebaaaaiaebaaaaiaebaaaaaaaakgakbaaaabaaaaaabkaaaaaf
icaabaaaaeaaaaaabkaabaaaaeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaa
aeaaaaaadcaaaaamdcaabaaaaeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeec
aaaafaebaaaaaaaaaaaaaaaaigaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaa
egaabaaaaeaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaal
pcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaaaaaaaaaibcaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaa
akaabaaaafaaaaaadcaaaaajbcaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaa
aeaaaaaabkaabaaaafaaaaaadcaaaaajicaabaaaadaaaaaaakaabaaaaeaaaaaa
abeaaaaaaaaaiadndkaabaaaadaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaaa
acaaaaaadkaabaiaebaaaaaaadaaaaaadbaaaaahicaabaaaadaaaaaadkaabaaa
acaaaaaaabeaaaaajkjjbjdobpaaaeaddkaabaaaadaaaaaadgaaaaafhcaabaaa
acaaaaaaegacbaaaadaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaapppppppp
acaaaaabbfaaaaabaaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaa
aknhkddmdcaaaaakhcaabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaa
acaaaaaaegacbaaaadaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaabaaaaaadgaaaaaficaabaaaabaaaaaadkaabaaaadaaaaaadgaaaaai
hcaabaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaab
dhaaaaamhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaa
aaaamimcaaaamimcaaaamimcaaaaaaaaaaaaaaaiicaabaaaaaaaaaaabkiacaaa
aaaaaaaaabaaaaaaabeaaaaaaaaaaadpaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
aacaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajccaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
aaaaeaeadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaaoaaaaai
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaakiacaaaaaaaaaaaabaaaaaaaaaaaaai
bcaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdgaaaaaf
ccaabaaaaaaaaaaaabeaaaaaaaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaa
aaaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaadgcaaaag
iccabaaaaaaaaaaaakiacaaaaaaaaaaaacaaaaaaanaaaaaddkaabaaaabaaaaaa
dgaaaaafhccabaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_LOW" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_ON" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_ON" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 145 ALU, 19 TEX, 10 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 15, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, 0.25000000
def c8, 0.12500000, -0.05000000, 0.02000000, -100.00000000
def c9, 0.15000001, 2.50000000, 0.30000001, 0.05000000
defi i1, 8, 0, 1, 0
def c10, 3.00000000, 0, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r4.xyz, r0.x, v1
mov r3.xyz, v0
mov_pp r3.w, c6.x
loop aL, i0
break_eq r3.w, c6.y
mul r1.xyz, r3, c3.x
mul r5.xyz, r1, c6.z
mov r1.w, c0.y
mad r1.xyz, c4.x, r1.w, r1
mov r0.x, c0.z
mad r0.xyz, c4.x, r0.x, r5
frc r0.w, r0.y
add r0.y, r0, -r0.w
mad r0.xy, r0.y, c7, r0.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
frc r4.w, r1.y
add r0.z, r1.y, -r4.w
add r0.x, r0, -r0.y
mov r1.w, c6.y
mad r1.xy, r0.z, c7, r1.xzzw
mul r1.xyz, r1.xyww, c6.w
texldl r1.xy, r1.xyzz, s0
mad r1.z, r0.x, r0.w, r0.y
add r0.w, r1.x, -r1.y
mad r1.x, r0.w, r4.w, r1.y
mad r1.w, r1.z, c7.z, r1.x
mul r5.xyz, r5, c6.z
mov r0.x, c0.z
mad r0.xyz, c4.x, r0.x, r5
frc r0.w, r0.y
add r0.y, r0, -r0.w
mad r1.xy, r0.y, c7, r0.xzzw
mov r1.z, c6.y
mul r0.xyz, r1, c6.w
texldl r0.xy, r0.xyzz, s0
add r0.x, r0, -r0.y
mad r0.x, r0, r0.w, r0.y
mov r1.x, c0.w
mul r0.z, c4.x, r1.x
mad r1.xyz, r5, c6.z, r0.z
frc r0.w, r1.y
mad r1.w, r0.x, c7, r1
add r0.x, r1.y, -r0.w
mad r0.xy, r0.x, c7, r1.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
add r1.xyz, v2, -r3
dp3 r0.z, r1, r1
add r1.x, r0, -r0.y
mad r0.y, r1.x, r0.w, r0
rsq r0.x, r0.z
rcp r0.x, r0.x
mad r0.y, r0, c8.x, r1.w
add r0.x, r0, -c2
add r0.x, r0, -r0.y
add r1.x, r0, c8.y
add r1.y, r0.x, c8.z
mov r0.xyz, r3
mov r0.w, c6.y
cmp r2, r1.x, r2, r0
mad r0.xyz, -r4, r1.y, r3
cmp_pp r3.w, r1.x, r3, c6.y
cmp r3.xyz, -r3.w, r3, r0
endloop
cmp r0, -r3.w, r2, c8.w
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mov r2.w, r0
mul r1.xyz, r1.x, v1
mov r2.xyz, r0
mul r3.xyz, r1, c9.x
mov r3.w, c6.y
mov r0.w, c6.y
mov r1.w, c7.z
loop aL, i1
mul r0.xyz, r2, c3.x
mul r4.xyz, r0, c6.z
mov r5.x, c0.y
mad r0.xyz, c4.x, r5.x, r0
frc r5.w, r0.y
add r0.y, r0, -r5.w
mov r1.x, c0.z
mad r1.xyz, c4.x, r1.x, r4
frc r4.w, r1.y
add r1.y, r1, -r4.w
mad r1.xy, r1.y, c7, r1.xzzw
mov r1.z, c6.y
mul r1.xyz, r1, c6.w
texldl r1.xy, r1.xyzz, s0
mad r5.xy, r0.y, c7, r0.xzzw
mov r5.z, c6.y
mul r0.xyz, r5, c6.w
texldl r0.xy, r0.xyzz, s0
add r1.x, r1, -r1.y
mad r0.z, r1.x, r4.w, r1.y
add r4.w, r0.x, -r0.y
mul r1.xyz, r4, c6.z
mov r0.x, c0.z
mad r4.xyz, c4.x, r0.x, r1
mad r0.x, r4.w, r5.w, r0.y
mad r5.x, r0.z, c7.z, r0
frc r4.w, r4.y
add r0.x, r4.y, -r4.w
mad r0.xy, r0.x, c7, r4.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
add r0.x, r0, -r0.y
mad r0.x, r0, r4.w, r0.y
mov r4.x, c0.w
mul r0.z, c4.x, r4.x
mad r1.xyz, r1, c6.z, r0.z
frc r4.x, r1.y
mad r4.y, r0.x, c7.w, r5.x
add r0.x, r1.y, -r4
mad r0.xy, r0.x, c7, r1.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
add r1.xyz, v2, -r2
texldl r0.xy, r0.xyzz, s0
dp3 r0.z, r1, r1
add r1.x, r0, -r0.y
mad r0.y, r1.x, r4.x, r0
rsq r0.x, r0.z
rcp r0.x, r0.x
mad r0.y, r0, c8.x, r4
add r0.x, r0, -c2
add r0.y, r0.x, -r0
add r0.z, -r0.y, c9.w
cmp r0.z, r0, c6.x, c6.y
add r0.x, -r0, c9.y
mul r1.x, r0, r1.w
add r4.y, r0, c8
abs_pp r4.x, r0.z
add r0.xyz, r2, -r3
cmp r0.xyz, -r4.y, r0, r2
mul r4.z, r1.x, c1.x
mul r2.x, r4.z, r4.z
mad r4.z, r2.x, r4, r3.w
mad r1.xyz, -r3, c10.x, r0
cmp r2.xyz, -r4.x, r1, r0
mul r0.x, r1.w, c7.w
add r0.y, r0.w, c9.z
cmp r3.w, -r4.y, r4.z, r3
cmp r1.w, -r4.y, r0.x, r1
cmp r0.w, -r4.y, r0.y, r0
endloop
cmp r0.x, r2.w, c6.y, c6
mov_pp r1, -r0.x
mov_sat r0.w, r0
mov r0.yz, c6.y
mov r0.x, r3.w
texkill r1.xyzw
texldl oC0.xyz, r0.xyzz, s1
mul_sat oC0.w, r0, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_ON" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 138 instructions, 9 temp regs, 0 temp arrays:
// ALU 94 float, 4 int, 0 uint
// TEX 0 (9 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 3 dynamic
"ps_4_0
eefiecedeeopjjkhacgmjdolkcbnmgibnjihddldabaaaaaabebcaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefccebbaaaaeaaaaaaaejaeaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacajaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajhcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgihcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaapaaaaaadgaaaaaficaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaacaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaaaaaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaabkaabaaa
afaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaaafaaaaaa
dcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaadpdkaabaaa
adaaaaaadcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaa
bkaabaaaafaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaam
dcaabaaaafaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaa
egaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaa
dcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaa
afaaaaaadcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaiado
dkaabaaaadaaaaaadcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaaaceaaaaa
aaaaaaebaaaaaaebaaaaaaebaaaaaaaakgakbaaaabaaaaaabkaaaaaficaabaaa
aeaaaaaabkaabaaaaeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaaaeaaaaaa
dcaaaaamdcaabaaaaeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaeb
aaaaaaaaaaaaaaaaigaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaaegaabaaa
aeaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaibcaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaa
afaaaaaadcaaaaajbcaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaaeaaaaaa
bkaabaaaafaaaaaadcaaaaajicaabaaaadaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaaadodkaabaaaadaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
dkaabaiaebaaaaaaadaaaaaadbaaaaahicaabaaaadaaaaaadkaabaaaacaaaaaa
abeaaaaamnmmemdnbpaaaeaddkaabaaaadaaaaaadgaaaaafhcaabaaaacaaaaaa
egacbaaaadaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaappppppppacaaaaab
bfaaaaabaaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaknhkddm
dcaaaaakhcaabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaaacaaaaaa
egacbaaaadaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
abaaaaaadgaaaaaficaabaaaabaaaaaadkaabaaaadaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaam
hcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamimc
aaaamimcaaaamimcaaaaaaaadgaaaaafhcaabaaaadaaaaaaegacbaaaacaaaaaa
dgaaaaafbcaabaaaaeaaaaaaabeaaaaaaaaaaaaadgaaaaaigcaabaaaafaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaaaadgaaaaaficaabaaaaaaaaaaa
abeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaaacaaaaaadkaabaaaaaaaaaaa
abeaaaaaaiaaaaaaadaaaeaddkaabaaaacaaaaaaaaaaaaaihcaabaaaagaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaacaaaaaa
egacbaaaagaaaaaaegacbaaaagaaaaaaelaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaaaaaaaaajicaabaaaadaaaaaadkaabaaaacaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaagaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaahaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaafecaabaaaaeaaaaaabkaabaaa
ahaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaamdcaabaaa
ahaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaaahaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaahaaaaaaegaabaaa
ahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaadcaaaaaj
ecaabaaaaeaaaaaackaabaaaaeaaaaaadkaabaaaaeaaaaaabkaabaaaahaaaaaa
dcaaaaamhcaabaaaahaaaaaaegacbaaaagaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaabkaabaaa
ahaaaaaaebaaaaaficaabaaaafaaaaaabkaabaaaahaaaaaadcaaaaamdcaabaaa
ahaaaaaapgapbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaaahaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaahaaaaaaegaabaaa
ahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaafaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaadcaaaaaj
icaabaaaaeaaaaaadkaabaaaaeaaaaaadkaabaaaafaaaaaabkaabaaaahaaaaaa
dcaaaaajecaabaaaaeaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaadpckaabaaa
aeaaaaaadcaaaaamhcaabaaaahaaaaaaegacbaaaagaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaa
bkaabaaaahaaaaaaebaaaaaficaabaaaafaaaaaabkaabaaaahaaaaaadcaaaaam
dcaabaaaahaaaaaapgapbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaaahaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaahaaaaaa
egaabaaaahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaiicaabaaaafaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaa
dcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaadkaabaaaafaaaaaabkaabaaa
ahaaaaaadcaaaaajecaabaaaaeaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaiado
ckaabaaaaeaaaaaadcaaaaamhcaabaaaagaaaaaaegacbaaaagaaaaaaaceaaaaa
aaaaaaebaaaaaaebaaaaaaebaaaaaaaakgakbaaaabaaaaaabkaaaaaficaabaaa
aeaaaaaabkaabaaaagaaaaaaebaaaaaficaabaaaafaaaaaabkaabaaaagaaaaaa
dcaaaaamdcaabaaaagaaaaaapgapbaaaafaaaaaaaceaaaaaaaaabeecaaaafaeb
aaaaaaaaaaaaaaaaigaabaaaagaaaaaadiaaaaakdcaabaaaagaaaaaaegaabaaa
agaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaa
agaaaaaaegaabaaaagaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaiicaabaaaafaaaaaabkaabaiaebaaaaaaagaaaaaaakaabaaa
agaaaaaadcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaadkaabaaaafaaaaaa
bkaabaaaagaaaaaadcaaaaajecaabaaaaeaaaaaadkaabaaaaeaaaaaaabeaaaaa
aaaaaadockaabaaaaeaaaaaaaaaaaaaiicaabaaaadaaaaaadkaabaaaadaaaaaa
ckaabaiaebaaaaaaaeaaaaaabnaaaaahicaabaaaadaaaaaaabeaaaaamnmmemdn
dkaabaaaadaaaaaaaaaaaaajicaabaaaacaaaaaadkaabaiaebaaaaaaacaaaaaa
bkiacaaaaaaaaaaaabaaaaaaaaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaa
abeaaaaaaaaacaeadiaaaaahicaabaaaacaaaaaackaabaaaafaaaaaadkaabaaa
acaaaaaadiaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaaakiacaaaaaaaaaaa
abaaaaaadiaaaaahecaabaaaaeaaaaaadkaabaaaacaaaaaadkaabaaaacaaaaaa
dcaaaaajbcaabaaaagaaaaaadkaabaaaacaaaaaackaabaaaaeaaaaaaakaabaaa
aeaaaaaadiaaaaahecaabaaaagaaaaaackaabaaaafaaaaaaabeaaaaaaaaaiado
aaaaaaahccaabaaaagaaaaaabkaabaaaafaaaaaaabeaaaaajkjjjjdodcaaaaan
hcaabaaaahaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaajkjjbjdojkjjbjdo
jkjjbjdoaaaaaaaaegacbaaaadaaaaaadcaaaaanhcaabaaaaiaaaaaaegacbaia
ebaaaaaaaaaaaaaaaceaaaaaghggogdoghggogdoghggogdoaaaaaaaaegacbaaa
adaaaaaadhaaaaajhcaabaaaadaaaaaapgapbaaaadaaaaaaegacbaaaahaaaaaa
egacbaaaaiaaaaaadgaaaaafbcaabaaaafaaaaaaakaabaaaaeaaaaaadhaaaaaj
hcaabaaaafaaaaaapgapbaaaadaaaaaaegacbaaaagaaaaaaegacbaaaafaaaaaa
boaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaabaaaaaadgaaaaaf
bcaabaaaaeaaaaaaakaabaaaafaaaaaabgaaaaabdgaaaaafccaabaaaaeaaaaaa
abeaaaaaaaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaaaeaaaaaaeghobaaa
abaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaa
bkaabaaaafaaaaaaabeaaaaaaaaaiadpdicaaaaiiccabaaaaaaaaaaadkaabaaa
aaaaaaaaakiacaaaaaaaaaaaacaaaaaaanaaaaaddkaabaaaabaaaaaadgaaaaaf
hccabaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_OFF" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 83 ALU, 11 TEX, 5 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 15, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, 0.25000000
def c8, 0.12500000, -0.05000000, 0.02000000, -100.00000000
def c9, 1.50000000, 2.00000000, 3.00000000, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r4.xyz, r0.x, v1
mov r3.xyz, v0
mov_pp r3.w, c6.x
loop aL, i0
break_eq r3.w, c6.y
mul r1.xyz, r3, c3.x
mul r5.xyz, r1, c6.z
mov r1.w, c0.y
mad r1.xyz, c4.x, r1.w, r1
mov r0.x, c0.z
mad r0.xyz, c4.x, r0.x, r5
frc r0.w, r0.y
add r0.y, r0, -r0.w
mad r0.xy, r0.y, c7, r0.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
frc r4.w, r1.y
add r0.z, r1.y, -r4.w
add r0.x, r0, -r0.y
mov r1.w, c6.y
mad r1.xy, r0.z, c7, r1.xzzw
mul r1.xyz, r1.xyww, c6.w
texldl r1.xy, r1.xyzz, s0
mad r1.z, r0.x, r0.w, r0.y
add r0.w, r1.x, -r1.y
mad r1.x, r0.w, r4.w, r1.y
mad r1.w, r1.z, c7.z, r1.x
mul r5.xyz, r5, c6.z
mov r0.x, c0.z
mad r0.xyz, c4.x, r0.x, r5
frc r0.w, r0.y
add r0.y, r0, -r0.w
mad r1.xy, r0.y, c7, r0.xzzw
mov r1.z, c6.y
mul r0.xyz, r1, c6.w
texldl r0.xy, r0.xyzz, s0
add r0.x, r0, -r0.y
mad r0.x, r0, r0.w, r0.y
mov r1.x, c0.w
mul r0.z, c4.x, r1.x
mad r1.xyz, r5, c6.z, r0.z
frc r0.w, r1.y
mad r1.w, r0.x, c7, r1
add r0.x, r1.y, -r0.w
mad r0.xy, r0.x, c7, r1.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
add r1.xyz, v2, -r3
dp3 r0.z, r1, r1
add r1.x, r0, -r0.y
mad r0.y, r1.x, r0.w, r0
rsq r0.x, r0.z
rcp r0.x, r0.x
mad r0.y, r0, c8.x, r1.w
add r0.x, r0, -c2
add r0.x, r0, -r0.y
add r1.x, r0, c8.y
add r1.y, r0.x, c8.z
mov r0.xyz, r3
mov r0.w, c6.y
cmp r2, r1.x, r2, r0
mad r0.xyz, -r4, r1.y, r3
cmp_pp r3.w, r1.x, r3, c6.y
cmp r3.xyz, -r3.w, r3, r0
endloop
cmp r0, -r3.w, r2, c8.w
add r0.xyz, -r0, v2
dp3 r0.x, r0, r0
mov r1.x, c2
add r1.x, c7.z, r1
add r0.y, -r1.x, c2.x
rsq r0.x, r0.x
add r0.y, r0, c9.x
rcp r0.x, r0.x
add r0.x, r0, -r1
rcp r0.y, r0.y
mul_sat r0.x, r0, r0.y
mul r0.y, r0.x, r0.x
mad r0.x, -r0, c9.y, c9.z
cmp r0.w, r0, c6.y, c6.x
mov_pp r1, -r0.w
rcp r0.z, c1.x
mul r0.x, r0.y, r0
mad r0.x, -r0, r0.z, c6
mov r0.yz, c6.y
texldl oC0.xyz, r0.xyzz, s1
texkill r1.xyzw
mov_sat oC0.w, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_OFF" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 82 instructions, 6 temp regs, 0 temp arrays:
// ALU 54 float, 2 int, 0 uint
// TEX 0 (5 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 2 dynamic
"ps_4_0
eefiecedbleeebhgaemmamcbbjlacpllaodmjjaiabaaaaaapeakaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcaeakaaaaeaaaaaaaibacaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajhcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgihcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaapaaaaaadgaaaaaficaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaacaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaaaaaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaabkaabaaa
afaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaaafaaaaaa
dcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaadpdkaabaaa
adaaaaaadcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaa
bkaabaaaafaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaam
dcaabaaaafaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaa
egaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaa
dcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaa
afaaaaaadcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaiado
dkaabaaaadaaaaaadcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaaaceaaaaa
aaaaaaebaaaaaaebaaaaaaebaaaaaaaakgakbaaaabaaaaaabkaaaaaficaabaaa
aeaaaaaabkaabaaaaeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaaaeaaaaaa
dcaaaaamdcaabaaaaeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaeb
aaaaaaaaaaaaaaaaigaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaaegaabaaa
aeaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaa
afaaaaaaegaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaibcaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaa
afaaaaaadcaaaaajbcaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaaeaaaaaa
bkaabaaaafaaaaaadcaaaaajicaabaaaadaaaaaaakaabaaaaeaaaaaaabeaaaaa
aaaaaadodkaabaaaadaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
dkaabaiaebaaaaaaadaaaaaadbaaaaahicaabaaaadaaaaaadkaabaaaacaaaaaa
abeaaaaamnmmemdnbpaaaeaddkaabaaaadaaaaaadgaaaaafhcaabaaaacaaaaaa
egacbaaaadaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaappppppppacaaaaab
bfaaaaabaaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaaaknhkddm
dcaaaaakhcaabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaaacaaaaaa
egacbaaaadaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
abaaaaaadgaaaaaficaabaaaabaaaaaadkaabaaaadaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaam
hcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamimc
aaaamimcaaaamimcaaaaaaaaaaaaaaaiicaabaaaaaaaaaaabkiacaaaaaaaaaaa
abaaaaaaabeaaaaaaaaaaadpaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaiaebaaaaaaadaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaaaacaaaai
bcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ccaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaaaaaaeaea
diaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaaoaaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaaakiacaaaaaaaaaaaabaaaaaaaaaaaaaibcaabaaa
aaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdgaaaaafccaabaaa
aaaaaaaaabeaaaaaaaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaabaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaadgcaaaagiccabaaa
aaaaaaaaakiacaaaaaaaaaaaacaaaaaaanaaaaaddkaabaaaabaaaaaadgaaaaaf
hccabaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_4" "SCATTERING_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_ON" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_ON" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 78 ALU, 7 TEX, 10 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 37.00000000, 13.00000000
defi i0, 15, 0, 1, 0
def c7, 0.01562500, -0.05000000, 0.02000000, -100.00000000
def c8, 0.50000000, 0.15000001, 2.50000000, 0.25000000
defi i1, 8, 0, 1, 0
def c9, 0.30000001, 0.05000000, 3.00000000, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r2.xyz, r1.x, v1
mov r3.xyz, v0
mov_pp r2.w, c6.x
loop aL, i0
break_eq r2.w, c6.y
add r4.xyz, v2, -r3
mov r1.x, c0.y
mul r1.x, c4, r1
mad r1.xyz, r3, c3.x, r1.x
frc r1.w, r1.y
add r1.y, r1, -r1.w
mad r1.xy, r1.y, c6.zwzw, r1.xzzw
mov r1.z, c6.y
mul r1.xyz, r1, c7.x
texldl r1.xy, r1.xyzz, s0
dp3 r3.w, r4, r4
rsq r1.z, r3.w
add r3.w, r1.x, -r1.y
mad r1.y, r3.w, r1.w, r1
rcp r1.x, r1.z
add r1.x, r1, -c2
add r1.x, r1, -r1.y
add r3.w, r1.x, c7.y
add r4.x, r1, c7.z
mov r1.xyz, r3
mov r1.w, c6.y
cmp r0, r3.w, r0, r1
mad r1.xyz, -r2, r4.x, r3
cmp_pp r2.w, r3, r2, c6.y
cmp r3.xyz, -r2.w, r3, r1
endloop
cmp r1, -r2.w, r0, c7.w
dp3 r2.x, v1, v1
rsq r0.x, r2.x
mov r0.w, r1
mul r0.xyz, r0.x, v1
mul r0.xyz, r0, c8.y
mov r1.w, c6.y
mov r2.w, c6.y
mov r3.w, c8.x
loop aL, i1
add r3.xyz, v2, -r1
mov r2.x, c0.y
mul r2.x, c4, r2
mad r2.xyz, r1, c3.x, r2.x
frc r4.x, r2.y
add r2.y, r2, -r4.x
mad r2.xy, r2.y, c6.zwzw, r2.xzzw
mov r2.z, c6.y
mul r2.xyz, r2, c7.x
dp3 r3.x, r3, r3
texldl r2.xy, r2.xyzz, s0
rsq r2.z, r3.x
add r3.x, r2, -r2.y
rcp r2.x, r2.z
mad r2.y, r3.x, r4.x, r2
add r3.z, r2.x, -c2.x
add r3.x, r3.z, -r2.y
add r4.x, -r3, c9.y
add r3.z, -r3, c8
cmp r4.x, r4, c6, c6.y
add r3.y, r3.x, c7
mul r3.z, r3, r3.w
add r2.xyz, r1, -r0
cmp r1.xyz, -r3.y, r2, r1
mul r3.x, r3.z, c1
mul r3.z, r3.x, r3.x
mad r3.x, r3.z, r3, r1.w
mad r2.xyz, -r0, c9.z, r1
abs_pp r4.x, r4
cmp r1.xyz, -r4.x, r2, r1
mul r2.x, r3.w, c8.w
add r2.y, r2.w, c9.x
cmp r1.w, -r3.y, r3.x, r1
cmp r3.w, -r3.y, r2.x, r3
cmp r2.w, -r3.y, r2.y, r2
endloop
cmp r0.x, r0.w, c6.y, c6
mov_pp r0, -r0.x
texkill r0.xyzw
mov_sat r0.w, r2
mov r0.yz, c6.y
mov r0.x, r1.w
texldl oC0.xyz, r0.xyzz, s1
mul_sat oC0.w, r0, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_ON" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 81 instructions, 8 temp regs, 0 temp arrays:
// ALU 44 float, 4 int, 0 uint
// TEX 0 (3 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 3 dynamic
"ps_4_0
eefiecedhdeakpmaakjfephagdlkobagacagiceeabaaaaaaciakaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcdiajaaaaeaaaaaaaeoacaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacaiaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajicaabaaaaaaaaaaa
dkiacaaaaaaaaaaaabaaaaaabkiacaaaabaaaaaaaaaaaaaadgaaaaafhcaabaaa
acaaaaaaegbcbaaaabaaaaaadgaaaaaipcaabaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaaaaa
daaaaaabcbaaaaahbcaabaaaadaaaaaadkaabaaaabaaaaaaabeaaaaaapaaaaaa
dgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaaaaaadaaaeadakaabaaaadaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaacaaaaaaegbcbaiaebaaaaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaaakaabaaa
adaaaaaabkiacaiaebaaaaaaaaaaaaaaabaaaaaadcaaaaakocaabaaaadaaaaaa
agajbaaaacaaaaaakgikcaaaaaaaaaaaabaaaaaapgapbaaaaaaaaaaabkaaaaaf
bcaabaaaaeaaaaaackaabaaaadaaaaaaebaaaaafecaabaaaadaaaaaackaabaaa
adaaaaaadcaaaaamgcaabaaaadaaaaaakgakbaaaadaaaaaaaceaaaaaaaaaaaaa
aaaabeecaaaafaebaaaaaaaafgahbaaaadaaaaaadiaaaaakgcaabaaaadaaaaaa
fgagbaaaadaaaaaaaceaaaaaaaaaaaaaaaaaiadmaaaaiadmaaaaaaaaeiaaaaal
pcaabaaaafaaaaaajgafbaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaaaaaaaaaiccaabaaaadaaaaaabkaabaiaebaaaaaaafaaaaaa
akaabaaaafaaaaaadcaaaaajccaabaaaadaaaaaaakaabaaaaeaaaaaabkaabaaa
adaaaaaabkaabaaaafaaaaaaaaaaaaaibcaabaaaadaaaaaabkaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaadbaaaaahccaabaaaadaaaaaaakaabaaaadaaaaaa
abeaaaaamnmmemdnbpaaaeadbkaabaaaadaaaaaadgaaaaafhcaabaaaabaaaaaa
egacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaappppppppacaaaaab
bfaaaaabaaaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaknhkddm
dcaaaaakhcaabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaagaabaaaadaaaaaa
egacbaaaacaaaaaaboaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
abaaaaaadgaaaaaficaabaaaacaaaaaabkaabaaaadaaaaaadgaaaaaihcaabaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaam
hcaabaaaabaaaaaapgapbaaaacaaaaaaegacbaaaabaaaaaaaceaaaaaaaaamimc
aaaamimcaaaamimcaaaaaaaadgaaaaafhcaabaaaacaaaaaaegacbaaaabaaaaaa
dgaaaaafbcaabaaaadaaaaaaabeaaaaaaaaaaaaadgaaaaaigcaabaaaaeaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaaaadgaaaaaficaabaaaabaaaaaa
abeaaaaaaaaaaaaadaaaaaabcbaaaaahecaabaaaadaaaaaadkaabaaaabaaaaaa
abeaaaaaaiaaaaaaadaaaeadckaabaaaadaaaaaaaaaaaaaihcaabaaaafaaaaaa
egacbaaaacaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahecaabaaaadaaaaaa
egacbaaaafaaaaaaegacbaaaafaaaaaaelaaaaafecaabaaaadaaaaaackaabaaa
adaaaaaaaaaaaaajicaabaaaadaaaaaackaabaaaadaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaacaaaaaakgikcaaa
aaaaaaaaabaaaaaapgapbaaaaaaaaaaabkaaaaaficaabaaaaeaaaaaabkaabaaa
afaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaaafaaaaaa
aaaaaaaiicaabaaaadaaaaaadkaabaaaadaaaaaadkaabaiaebaaaaaaaeaaaaaa
bnaaaaahicaabaaaadaaaaaaabeaaaaamnmmemdndkaabaaaadaaaaaaaaaaaaaj
ecaabaaaadaaaaaackaabaiaebaaaaaaadaaaaaabkiacaaaaaaaaaaaabaaaaaa
aaaaaaahecaabaaaadaaaaaackaabaaaadaaaaaaabeaaaaaaaaacaeadiaaaaah
ecaabaaaadaaaaaackaabaaaaeaaaaaackaabaaaadaaaaaadiaaaaaiecaabaaa
adaaaaaackaabaaaadaaaaaaakiacaaaaaaaaaaaabaaaaaadiaaaaahicaabaaa
aeaaaaaackaabaaaadaaaaaackaabaaaadaaaaaadcaaaaajbcaabaaaafaaaaaa
ckaabaaaadaaaaaadkaabaaaaeaaaaaaakaabaaaadaaaaaadiaaaaahecaabaaa
afaaaaaackaabaaaaeaaaaaaabeaaaaaaaaaiadoaaaaaaahccaabaaaafaaaaaa
bkaabaaaaeaaaaaaabeaaaaajkjjjjdodcaaaaanhcaabaaaagaaaaaaegacbaia
ebaaaaaaaaaaaaaaaceaaaaajkjjbjdojkjjbjdojkjjbjdoaaaaaaaaegacbaaa
acaaaaaadcaaaaanhcaabaaaahaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
ghggogdoghggogdoghggogdoaaaaaaaaegacbaaaacaaaaaadhaaaaajhcaabaaa
acaaaaaapgapbaaaadaaaaaaegacbaaaagaaaaaaegacbaaaahaaaaaadgaaaaaf
bcaabaaaaeaaaaaaakaabaaaadaaaaaadhaaaaajhcaabaaaaeaaaaaapgapbaaa
adaaaaaaegacbaaaafaaaaaaegacbaaaaeaaaaaaboaaaaahicaabaaaabaaaaaa
dkaabaaaabaaaaaaabeaaaaaabaaaaaadgaaaaafbcaabaaaadaaaaaaakaabaaa
aeaaaaaabgaaaaabdgaaaaafccaabaaaadaaaaaaabeaaaaaaaaaaaaaeiaaaaal
pcaabaaaaaaaaaaaegaabaaaadaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaa
abeaaaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaabkaabaaaaeaaaaaaabeaaaaa
aaaaiadpdicaaaaiiccabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaaaaaaaaaaa
acaaaaaaanaaaaaddkaabaaaacaaaaaadgaaaaafhccabaaaaaaaaaaaegacbaaa
aaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_OFF" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 50 ALU, 5 TEX, 5 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 37.00000000, 13.00000000
defi i0, 15, 0, 1, 0
def c7, 0.01562500, -0.05000000, 0.02000000, -100.00000000
def c8, 0.50000000, 1.50000000, 2.00000000, 3.00000000
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r2.xyz, r1.x, v1
mov r3.xyz, v0
mov_pp r2.w, c6.x
loop aL, i0
break_eq r2.w, c6.y
add r4.xyz, v2, -r3
mov r1.x, c0.y
mul r1.x, c4, r1
mad r1.xyz, r3, c3.x, r1.x
frc r1.w, r1.y
add r1.y, r1, -r1.w
mad r1.xy, r1.y, c6.zwzw, r1.xzzw
mov r1.z, c6.y
mul r1.xyz, r1, c7.x
texldl r1.xy, r1.xyzz, s0
dp3 r3.w, r4, r4
rsq r1.z, r3.w
add r3.w, r1.x, -r1.y
mad r1.y, r3.w, r1.w, r1
rcp r1.x, r1.z
add r1.x, r1, -c2
add r1.x, r1, -r1.y
add r3.w, r1.x, c7.y
add r4.x, r1, c7.z
mov r1.xyz, r3
mov r1.w, c6.y
cmp r0, r3.w, r0, r1
mad r1.xyz, -r2, r4.x, r3
cmp_pp r2.w, r3, r2, c6.y
cmp r3.xyz, -r2.w, r3, r1
endloop
cmp r0, -r2.w, r0, c7.w
add r0.xyz, -r0, v2
dp3 r0.x, r0, r0
mov r1.x, c2
add r1.x, c8, r1
add r0.y, -r1.x, c2.x
rsq r0.x, r0.x
add r0.y, r0, c8
rcp r0.x, r0.x
add r0.x, r0, -r1
rcp r0.y, r0.y
mul_sat r0.x, r0, r0.y
mul r0.y, r0.x, r0.x
mad r0.x, -r0, c8.z, c8.w
cmp r0.w, r0, c6.y, c6.x
mov_pp r1, -r0.w
rcp r0.z, c1.x
mul r0.x, r0.y, r0
mad r0.x, -r0, r0.z, c6
mov r0.yz, c6.y
texldl oC0.xyz, r0.xyzz, s1
texkill r1.xyzw
mov_sat oC0.w, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_OFF" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 53 instructions, 6 temp regs, 0 temp arrays:
// ALU 29 float, 2 int, 0 uint
// TEX 0 (2 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 2 dynamic
"ps_4_0
eefiecedfiaoklhaoagjphgpdkloicalkbckbapnabaaaaaapeagaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcaeagaaaaeaaaaaaaibabaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajicaabaaaaaaaaaaa
dkiacaaaaaaaaaaaabaaaaaabkiacaaaabaaaaaaaaaaaaaadgaaaaafhcaabaaa
acaaaaaaegbcbaaaabaaaaaadgaaaaaipcaabaaaabaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaaaaa
daaaaaabcbaaaaahbcaabaaaadaaaaaadkaabaaaabaaaaaaabeaaaaaapaaaaaa
dgaaaaaficaabaaaacaaaaaaabeaaaaaaaaaaaaaadaaaeadakaabaaaadaaaaaa
aaaaaaaihcaabaaaadaaaaaaegacbaaaacaaaaaaegbcbaiaebaaaaaaadaaaaaa
baaaaaahbcaabaaaadaaaaaaegacbaaaadaaaaaaegacbaaaadaaaaaaelaaaaaf
bcaabaaaadaaaaaaakaabaaaadaaaaaaaaaaaaajbcaabaaaadaaaaaaakaabaaa
adaaaaaabkiacaiaebaaaaaaaaaaaaaaabaaaaaadcaaaaakocaabaaaadaaaaaa
agajbaaaacaaaaaakgikcaaaaaaaaaaaabaaaaaapgapbaaaaaaaaaaabkaaaaaf
bcaabaaaaeaaaaaackaabaaaadaaaaaaebaaaaafecaabaaaadaaaaaackaabaaa
adaaaaaadcaaaaamgcaabaaaadaaaaaakgakbaaaadaaaaaaaceaaaaaaaaaaaaa
aaaabeecaaaafaebaaaaaaaafgahbaaaadaaaaaadiaaaaakgcaabaaaadaaaaaa
fgagbaaaadaaaaaaaceaaaaaaaaaaaaaaaaaiadmaaaaiadmaaaaaaaaeiaaaaal
pcaabaaaafaaaaaajgafbaaaadaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaaaaaaaaaiccaabaaaadaaaaaabkaabaiaebaaaaaaafaaaaaa
akaabaaaafaaaaaadcaaaaajccaabaaaadaaaaaaakaabaaaaeaaaaaabkaabaaa
adaaaaaabkaabaaaafaaaaaaaaaaaaaibcaabaaaadaaaaaabkaabaiaebaaaaaa
adaaaaaaakaabaaaadaaaaaadbaaaaahccaabaaaadaaaaaaakaabaaaadaaaaaa
abeaaaaamnmmemdnbpaaaeadbkaabaaaadaaaaaadgaaaaafhcaabaaaabaaaaaa
egacbaaaacaaaaaadgaaaaaficaabaaaacaaaaaaabeaaaaappppppppacaaaaab
bfaaaaabaaaaaaahbcaabaaaadaaaaaaakaabaaaadaaaaaaabeaaaaaaknhkddm
dcaaaaakhcaabaaaacaaaaaaegacbaiaebaaaaaaaaaaaaaaagaabaaaadaaaaaa
egacbaaaacaaaaaaboaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaa
abaaaaaadgaaaaaficaabaaaacaaaaaabkaabaaaadaaaaaadgaaaaaihcaabaaa
abaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaam
hcaabaaaaaaaaaaapgapbaaaacaaaaaaegacbaaaabaaaaaaaceaaaaaaaaamimc
aaaamimcaaaamimcaaaaaaaaaaaaaaaiicaabaaaaaaaaaaabkiacaaaaaaaaaaa
abaaaaaaabeaaaaaaaaaaadpaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egbcbaiaebaaaaaaadaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaa
egacbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaaaacaaaai
bcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaaj
ccaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaaaaaaeaea
diaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaaoaaaaaibcaabaaa
aaaaaaaaakaabaaaaaaaaaaaakiacaaaaaaaaaaaabaaaaaaaaaaaaaibcaabaaa
aaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdgaaaaafccaabaaa
aaaaaaaaabeaaaaaaaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaaaaaaaaaa
eghobaaaabaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaadgcaaaagiccabaaa
aaaaaaaaakiacaaaaaaaaaaaacaaaaaaanaaaaaddkaabaaaacaaaaaadgaaaaaf
hccabaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_1" "SCATTERING_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_ON" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_ON" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 101 ALU, 11 TEX, 10 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 15, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, -0.05000000
def c8, 0.02000000, -100.00000000, 0.15000001, 2.50000000
defi i1, 8, 0, 1, 0
def c9, 0.25000000, 0.30000001, 0.05000000, 3.00000000
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r2.xyz, r0.x, v1
mov r0.xyz, v0
mov_pp r0.w, c6.x
loop aL, i0
break_eq r0.w, c6.y
mov r2.w, c0.z
mul r3.xyz, r0, c3.x
mul r2.w, c4.x, r2
mad r4.xyz, r3, c6.z, r2.w
frc r3.w, r4.y
add r2.w, r4.y, -r3
mad r4.xy, r2.w, c7, r4.xzzw
mov r2.w, c0.y
mad r3.xyz, c4.x, r2.w, r3
frc r2.w, r3.y
mov r4.w, c6.y
mul r4.xyz, r4.xyww, c6.w
texldl r4.xy, r4.xyzz, s0
add r4.x, r4, -r4.y
mad r3.w, r4.x, r3, r4.y
add r3.y, r3, -r2.w
mad r4.xy, r3.y, c7, r3.xzzw
add r3.xyz, v2, -r0
dp3 r3.y, r3, r3
mov r4.z, c6.y
mul r4.xyz, r4, c6.w
texldl r4.xy, r4.xyzz, s0
add r3.x, r4, -r4.y
mad r2.w, r3.x, r2, r4.y
mad r2.w, r3, c7.z, r2
rsq r3.y, r3.y
rcp r3.x, r3.y
add r3.x, r3, -c2
add r3.x, r3, -r2.w
add r4.x, r3, c7.w
add r2.w, r3.x, c8.x
mov r3.xyz, r0
mov r3.w, c6.y
cmp r1, r4.x, r1, r3
mad r3.xyz, -r2, r2.w, r0
cmp_pp r0.w, r4.x, r0, c6.y
cmp r0.xyz, -r0.w, r0, r3
endloop
cmp r0, -r0.w, r1, c8.y
dp3 r2.x, v1, v1
rsq r1.x, r2.x
mul r2.xyz, r1.x, v1
mov r1.w, r0
mov r1.xyz, r0
mul r0.xyz, r2, c8.z
mov r0.w, c6.y
mov r3.x, c6.y
mov r2.w, c7.z
loop aL, i1
mov r2.x, c0.z
mul r3.y, c4.x, r2.x
mul r2.xyz, r1, c3.x
mad r4.xyz, r2, c6.z, r3.y
frc r4.w, r4.y
add r3.y, r4, -r4.w
mad r3.yz, r3.y, c7.xxyw, r4.xxzw
mov r3.w, c6.y
mul r4.xyz, r3.yzww, c6.w
texldl r4.xy, r4.xyzz, s0
mov r3.y, c0
mad r2.xyz, c4.x, r3.y, r2
frc r3.y, r2
add r3.z, r4.x, -r4.y
mad r3.z, r3, r4.w, r4.y
add r2.y, r2, -r3
mad r4.xy, r2.y, c7, r2.xzzw
add r2.xyz, v2, -r1
dp3 r2.y, r2, r2
mov r4.z, c6.y
mul r4.xyz, r4, c6.w
texldl r4.xy, r4.xyzz, s0
add r2.x, r4, -r4.y
mad r2.x, r2, r3.y, r4.y
rsq r2.y, r2.y
rcp r2.y, r2.y
add r2.z, r2.y, -c2.x
mad r2.x, r3.z, c7.z, r2
add r2.y, r2.z, -r2.x
add r2.x, -r2.y, c9.z
cmp r2.x, r2, c6, c6.y
abs_pp r3.y, r2.x
add r2.x, -r2.z, c8.w
mul r3.w, r2.x, r2
add r3.z, r2.y, c7.w
add r2.xyz, r1, -r0
cmp r2.xyz, -r3.z, r2, r1
mad r1.xyz, -r0, c9.w, r2
cmp r1.xyz, -r3.y, r1, r2
mul r3.w, r3, c1.x
mul r4.x, r3.w, r3.w
mad r3.w, r4.x, r3, r0
mul r2.y, r2.w, c9.x
add r2.x, r3, c9.y
cmp r0.w, -r3.z, r3, r0
cmp r2.w, -r3.z, r2.y, r2
cmp r3.x, -r3.z, r2, r3
endloop
cmp r0.x, r1.w, c6.y, c6
mov_pp r1, -r0.x
texkill r1.xyzw
mov_sat r0.x, r3
mov r1.yz, c6.y
mov r1.x, r0.w
texldl oC0.xyz, r1.xyzz, s1
mul_sat oC0.w, r0.x, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_ON" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 102 instructions, 9 temp regs, 0 temp arrays:
// ALU 62 float, 4 int, 0 uint
// TEX 0 (5 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 3 dynamic
"ps_4_0
eefiecedeiebmbcocbkombcoccadonjlghbicodgabaaaaaaaeanaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcbeamaaaaeaaaaaaaafadaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacajaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajdcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgifcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaaabeaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaabaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaaaaaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaacaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaadaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaadaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaadaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaadaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
aeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaaaeaaaaaadcaaaaamdcaabaaa
aeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaaegaabaaaaeaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaaeaaaaaaegaabaaa
aeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaaeaaaaaabkaabaiaebaaaaaaaeaaaaaaakaabaaaaeaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaaakaabaaaaeaaaaaabkaabaaaaeaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaaadpdkaabaaa
acaaaaaaaaaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaa
acaaaaaadbaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaamnmmemdn
bpaaaeaddkaabaaaacaaaaaadgaaaaafhcaabaaaacaaaaaaegacbaaaadaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaappppppppacaaaaabbfaaaaabaaaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaknhkddmdcaaaaakhcaabaaa
adaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaadaaaaaa
boaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaabaaaaaadgaaaaaf
ecaabaaaabaaaaaadkaabaaaacaaaaaadgaaaaaihcaabaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaamhcaabaaaacaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamimcaaaamimcaaaamimc
aaaaaaaadgaaaaafhcaabaaaadaaaaaaegacbaaaacaaaaaadgaaaaafbcaabaaa
aeaaaaaaabeaaaaaaaaaaaaadgaaaaaigcaabaaaafaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaaadpaaaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
daaaaaabcbaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaaabeaaaaaaiaaaaaa
adaaaeaddkaabaaaabaaaaaaaaaaaaaihcaabaaaagaaaaaaegacbaaaadaaaaaa
egbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaaagaaaaaa
egacbaaaagaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaaaaaaaaaj
icaabaaaacaaaaaadkaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaaabaaaaaa
diaaaaaihcaabaaaagaaaaaaegacbaaaadaaaaaakgikcaaaaaaaaaaaabaaaaaa
dcaaaaakhcaabaaaahaaaaaaegacbaaaadaaaaaakgikcaaaaaaaaaaaabaaaaaa
agaabaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaaahaaaaaaebaaaaaf
ecaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaammcaabaaaaeaaaaaakgakbaaa
aeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaabeecaaaafaebagaibaaaahaaaaaa
diaaaaakmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaa
aaaaiadmaaaaiadmeiaaaaalpcaabaaaahaaaaaaogakbaaaaeaaaaaaeghobaaa
aaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaiecaabaaaaeaaaaaa
bkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaadcaaaaajicaabaaaadaaaaaa
dkaabaaaadaaaaaackaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaamhcaabaaa
agaaaaaaegacbaaaagaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaeaaaaaaaaa
fgafbaaaabaaaaaabkaaaaafecaabaaaaeaaaaaabkaabaaaagaaaaaaebaaaaaf
icaabaaaaeaaaaaabkaabaaaagaaaaaadcaaaaamdcaabaaaagaaaaaapgapbaaa
aeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaaigaabaaaagaaaaaa
diaaaaakdcaabaaaagaaaaaaegaabaaaagaaaaaaaceaaaaaaaaaiadmaaaaiadm
aaaaaaaaaaaaaaaaeiaaaaalpcaabaaaagaaaaaaegaabaaaagaaaaaaeghobaaa
aaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaiicaabaaaaeaaaaaa
bkaabaiaebaaaaaaagaaaaaaakaabaaaagaaaaaadcaaaaajecaabaaaaeaaaaaa
ckaabaaaaeaaaaaadkaabaaaaeaaaaaabkaabaaaagaaaaaadcaaaaajicaabaaa
adaaaaaackaabaaaaeaaaaaaabeaaaaaaaaaaadpdkaabaaaadaaaaaaaaaaaaai
icaabaaaacaaaaaadkaabaaaacaaaaaadkaabaiaebaaaaaaadaaaaaabnaaaaah
icaabaaaacaaaaaaabeaaaaamnmmemdndkaabaaaacaaaaaaaaaaaaajicaabaaa
abaaaaaadkaabaiaebaaaaaaabaaaaaabkiacaaaaaaaaaaaabaaaaaaaaaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaacaeadiaaaaahicaabaaa
abaaaaaackaabaaaafaaaaaadkaabaaaabaaaaaadiaaaaaiicaabaaaabaaaaaa
dkaabaaaabaaaaaaakiacaaaaaaaaaaaabaaaaaadiaaaaahicaabaaaadaaaaaa
dkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaaagaaaaaadkaabaaa
abaaaaaadkaabaaaadaaaaaaakaabaaaaeaaaaaadiaaaaahecaabaaaagaaaaaa
ckaabaaaafaaaaaaabeaaaaaaaaaiadoaaaaaaahccaabaaaagaaaaaabkaabaaa
afaaaaaaabeaaaaajkjjjjdodcaaaaanhcaabaaaahaaaaaaegacbaiaebaaaaaa
aaaaaaaaaceaaaaajkjjbjdojkjjbjdojkjjbjdoaaaaaaaaegacbaaaadaaaaaa
dcaaaaanhcaabaaaaiaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaghggogdo
ghggogdoghggogdoaaaaaaaaegacbaaaadaaaaaadhaaaaajhcaabaaaadaaaaaa
pgapbaaaacaaaaaaegacbaaaahaaaaaaegacbaaaaiaaaaaadgaaaaafbcaabaaa
afaaaaaaakaabaaaaeaaaaaadhaaaaajhcaabaaaafaaaaaapgapbaaaacaaaaaa
egacbaaaagaaaaaaegacbaaaafaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaa
aaaaaaaaabeaaaaaabaaaaaadgaaaaafbcaabaaaaeaaaaaaakaabaaaafaaaaaa
bgaaaaabdgaaaaafccaabaaaaeaaaaaaabeaaaaaaaaaaaaaeiaaaaalpcaabaaa
aaaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaabeaaaaa
aaaaaaaaddaaaaahicaabaaaaaaaaaaabkaabaaaafaaaaaaabeaaaaaaaaaiadp
dicaaaaiiccabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaaaaaaaaaaaacaaaaaa
anaaaaadckaabaaaabaaaaaadgaaaaafhccabaaaaaaaaaaaegacbaaaaaaaaaaa
doaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_OFF" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 61 ALU, 7 TEX, 5 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 15, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, -0.05000000
def c8, 0.02000000, -100.00000000, 1.50000000, 0
def c9, 2.00000000, 3.00000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul r2.xyz, r0.x, v1
mov r0.xyz, v0
mov_pp r0.w, c6.x
loop aL, i0
break_eq r0.w, c6.y
mov r2.w, c0.z
mul r3.xyz, r0, c3.x
mul r2.w, c4.x, r2
mad r4.xyz, r3, c6.z, r2.w
frc r3.w, r4.y
add r2.w, r4.y, -r3
mad r4.xy, r2.w, c7, r4.xzzw
mov r2.w, c0.y
mad r3.xyz, c4.x, r2.w, r3
frc r2.w, r3.y
mov r4.w, c6.y
mul r4.xyz, r4.xyww, c6.w
texldl r4.xy, r4.xyzz, s0
add r4.x, r4, -r4.y
mad r3.w, r4.x, r3, r4.y
add r3.y, r3, -r2.w
mad r4.xy, r3.y, c7, r3.xzzw
add r3.xyz, v2, -r0
dp3 r3.y, r3, r3
mov r4.z, c6.y
mul r4.xyz, r4, c6.w
texldl r4.xy, r4.xyzz, s0
add r3.x, r4, -r4.y
mad r2.w, r3.x, r2, r4.y
mad r2.w, r3, c7.z, r2
rsq r3.y, r3.y
rcp r3.x, r3.y
add r3.x, r3, -c2
add r3.x, r3, -r2.w
add r4.x, r3, c7.w
add r2.w, r3.x, c8.x
mov r3.xyz, r0
mov r3.w, c6.y
cmp r1, r4.x, r1, r3
mad r3.xyz, -r2, r2.w, r0
cmp_pp r0.w, r4.x, r0, c6.y
cmp r0.xyz, -r0.w, r0, r3
endloop
cmp r0, -r0.w, r1, c8.y
add r2.xyz, -r0, v2
mov r1.x, c2
add r0.y, c7.z, r1.x
add r0.x, -r0.y, c2
dp3 r0.z, r2, r2
rsq r0.z, r0.z
rcp r0.z, r0.z
add r0.x, r0, c8.z
add r0.y, r0.z, -r0
rcp r0.x, r0.x
mul_sat r0.x, r0.y, r0
mul r0.z, r0.x, r0.x
mad r0.y, -r0.x, c9.x, c9
rcp r0.x, c1.x
mul r0.y, r0.z, r0
mad r1.x, -r0.y, r0, c6
cmp r0.x, r0.w, c6.y, c6
mov r1.yz, c6.y
mov_pp r0, -r0.x
texldl oC0.xyz, r1.xyzz, s1
texkill r0.xyzw
mov_sat oC0.w, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_OFF" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 64 instructions, 6 temp regs, 0 temp arrays:
// ALU 38 float, 2 int, 0 uint
// TEX 0 (3 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 2 dynamic
"ps_4_0
eefiecedafnifefflbcfengcjfaggpieihbhliakabaaaaaagmaiaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefchmahaaaaeaaaaaaanpabaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajdcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgifcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaaabeaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaabaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaaaaaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaacaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaadaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaadaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaadaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaadaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
aeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaaaeaaaaaadcaaaaamdcaabaaa
aeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaaegaabaaaaeaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaaeaaaaaaegaabaaa
aeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaaeaaaaaabkaabaiaebaaaaaaaeaaaaaaakaabaaaaeaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaaakaabaaaaeaaaaaabkaabaaaaeaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaaadpdkaabaaa
acaaaaaaaaaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaiaebaaaaaa
acaaaaaadbaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaamnmmemdn
bpaaaeaddkaabaaaacaaaaaadgaaaaafhcaabaaaacaaaaaaegacbaaaadaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaappppppppacaaaaabbfaaaaabaaaaaaah
icaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaknhkddmdcaaaaakhcaabaaa
adaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaadaaaaaa
boaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaabaaaaaadgaaaaaf
ecaabaaaabaaaaaadkaabaaaacaaaaaadgaaaaaihcaabaaaacaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaamhcaabaaaaaaaaaaa
kgakbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamimcaaaamimcaaaamimc
aaaaaaaaaaaaaaaiicaabaaaaaaaaaaabkiacaaaaaaaaaaaabaaaaaaabeaaaaa
aaaaaadpaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaiaebaaaaaa
adaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaaaaaaaaaa
elaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaaaacaaaaibcaabaaaaaaaaaaa
dkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajccaabaaaaaaaaaaa
akaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaaaaaaeaeadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaaaaaaaaaa
akaabaaaaaaaaaaabkaabaaaaaaaaaaaaoaaaaaibcaabaaaaaaaaaaaakaabaaa
aaaaaaaaakiacaaaaaaaaaaaabaaaaaaaaaaaaaibcaabaaaaaaaaaaaakaabaia
ebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdgaaaaafccaabaaaaaaaaaaaabeaaaaa
aaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaaabaaaaaa
aagabaaaaaaaaaaaabeaaaaaaaaaaaaadgcaaaagiccabaaaaaaaaaaaakiacaaa
aaaaaaaaacaaaaaaanaaaaadckaabaaaabaaaaaadgaaaaafhccabaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_2" "SCATTERING_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_ON" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_ON" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 122 ALU, 15 TEX, 10 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 15, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, 0.25000000
def c8, -0.05000000, 0.02000000, -100.00000000, 0.15000001
defi i1, 8, 0, 1, 0
def c9, 2.50000000, 0.30000001, 0.05000000, 3.00000000
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r1.xyz, r1.x, v1
mov r2.xyz, v0
mov_pp r1.w, c6.x
loop aL, i0
break_eq r1.w, c6.y
mul r4.xyz, r2, c3.x
mul r5.xyz, r4, c6.z
mov r2.w, c0.z
mad r3.xyw, c4.x, r2.w, r5.xyzz
frc r2.w, r3.y
add r3.y, r3, -r2.w
mad r3.xy, r3.y, c7, r3.xwzw
mov r3.w, c0.y
mad r4.xyz, c4.x, r3.w, r4
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
frc r3.w, r4.y
mad r2.w, r3.x, r2, r3.y
add r3.x, r4.y, -r3.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
mad r3.x, r3, r3.w, r3.y
mov r4.x, c0.z
mul r3.z, c4.x, r4.x
mad r4.xyz, r5, c6.z, r3.z
frc r3.w, r4.y
mad r2.w, r2, c7.z, r3.x
add r3.x, r4.y, -r3.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r4.xyz, r3, c6.w
add r3.xyz, v2, -r2
dp3 r3.x, r3, r3
texldl r4.xy, r4.xyzz, s0
add r3.y, r4.x, -r4
mad r3.y, r3, r3.w, r4
rsq r3.x, r3.x
mad r3.y, r3, c7.w, r2.w
rcp r3.x, r3.x
add r2.w, r3.x, -c2.x
add r2.w, r2, -r3.y
add r4.x, r2.w, c8.y
add r2.w, r2, c8.x
mov r3.xyz, r2
mov r3.w, c6.y
cmp r0, r2.w, r0, r3
mad r3.xyz, -r1, r4.x, r2
cmp_pp r1.w, r2, r1, c6.y
cmp r2.xyz, -r1.w, r2, r3
endloop
cmp r0, -r1.w, r0, c8.z
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r1.xyz, r1.x, v1
mov r2.xyz, r0
mul r1.xyz, r1, c8.w
mov r1.w, c6.y
mov r2.w, c6.y
mov r3.w, c7.z
loop aL, i1
mul r3.xyz, r2, c3.x
mul r4.xyz, r3, c6.z
mov r0.x, c0.z
mad r5.xyz, c4.x, r0.x, r4
frc r4.w, r5.y
add r0.x, r5.y, -r4.w
mad r0.xy, r0.x, c7, r5.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r5.xy, r0.xyzz, s0
mov r5.z, c0.y
mad r0.xyz, c4.x, r5.z, r3
add r3.x, r5, -r5.y
frc r5.x, r0.y
mad r4.w, r3.x, r4, r5.y
add r0.y, r0, -r5.x
mad r3.xy, r0.y, c7, r0.xzzw
mov r3.z, c6.y
mul r0.xyz, r3, c6.w
texldl r0.xy, r0.xyzz, s0
add r0.x, r0, -r0.y
mov r3.x, c0.z
mul r0.z, c4.x, r3.x
mad r3.xyz, r4, c6.z, r0.z
mad r0.x, r0, r5, r0.y
frc r4.x, r3.y
mad r4.y, r4.w, c7.z, r0.x
add r0.x, r3.y, -r4
mad r0.xy, r0.x, c7, r3.xzzw
mov r0.z, c6.y
mul r3.xyz, r0, c6.w
add r0.xyz, v2, -r2
dp3 r0.x, r0, r0
texldl r3.xy, r3.xyzz, s0
add r0.y, r3.x, -r3
mad r0.y, r0, r4.x, r3
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, r0, -c2
mad r0.y, r0, c7.w, r4
add r0.y, r0.x, -r0
add r0.z, -r0.y, c9
cmp r0.z, r0, c6.x, c6.y
add r0.x, -r0, c9
mul r3.z, r0.x, r3.w
mul r3.z, r3, c1.x
mul r4.x, r3.z, r3.z
add r3.y, r0, c8.x
abs_pp r3.x, r0.z
add r0.xyz, r2, -r1
cmp r0.xyz, -r3.y, r0, r2
mad r2.xyz, -r1, c9.w, r0
cmp r2.xyz, -r3.x, r2, r0
mad r3.z, r4.x, r3, r1.w
mul r0.x, r3.w, c7.w
add r0.y, r2.w, c9
cmp r1.w, -r3.y, r3.z, r1
cmp r3.w, -r3.y, r0.x, r3
cmp r2.w, -r3.y, r0.y, r2
endloop
cmp r0.x, r0.w, c6.y, c6
mov_pp r0, -r0.x
texkill r0.xyzw
mov_sat r0.w, r2
mov r0.yz, c6.y
mov r0.x, r1.w
texldl oC0.xyz, r0.xyzz, s1
mul_sat oC0.w, r0, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_ON" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 120 instructions, 9 temp regs, 0 temp arrays:
// ALU 78 float, 4 int, 0 uint
// TEX 0 (7 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 3 dynamic
"ps_4_0
eefiecedlcpecohahgnbkbnehapcnfpadcidneplabaaaaaaimapaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcjmaoaaaaeaaaaaaakhadaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacajaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajdcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgifcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaaabeaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaabaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaaaaaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaacaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaadaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaadaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaadaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaadaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaabkaabaaaafaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaaadpdkaabaaa
acaaaaaadcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaadaaaaaa
bkaabaaaaeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaaaeaaaaaadcaaaaam
dcaabaaaaeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaaegaabaaaaeaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaaeaaaaaabkaabaiaebaaaaaaaeaaaaaaakaabaaaaeaaaaaa
dcaaaaajicaabaaaadaaaaaadkaabaaaadaaaaaaakaabaaaaeaaaaaabkaabaaa
aeaaaaaadcaaaaajicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaiado
dkaabaaaacaaaaaaaaaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaacaaaaaadbaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaa
mnmmemdnbpaaaeaddkaabaaaacaaaaaadgaaaaafhcaabaaaacaaaaaaegacbaaa
adaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaappppppppacaaaaabbfaaaaab
aaaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaknhkddmdcaaaaak
hcaabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaaabaaaaaaegacbaaa
adaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaabaaaaaa
dgaaaaafecaabaaaabaaaaaadkaabaaaacaaaaaadgaaaaaihcaabaaaacaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaamhcaabaaa
acaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamimcaaaamimc
aaaamimcaaaaaaaadgaaaaafhcaabaaaadaaaaaaegacbaaaacaaaaaadgaaaaaf
bcaabaaaaeaaaaaaabeaaaaaaaaaaaaadgaaaaaigcaabaaaafaaaaaaaceaaaaa
aaaaaaaaaaaaaaaaaaaaaadpaaaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaa
aaaaaaaadaaaaaabcbaaaaahicaabaaaabaaaaaadkaabaaaaaaaaaaaabeaaaaa
aiaaaaaaadaaaeaddkaabaaaabaaaaaaaaaaaaaihcaabaaaagaaaaaaegacbaaa
adaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaabaaaaaaegacbaaa
agaaaaaaegacbaaaagaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaaabaaaaaa
aaaaaaajicaabaaaacaaaaaadkaabaaaabaaaaaabkiacaiaebaaaaaaaaaaaaaa
abaaaaaadiaaaaaihcaabaaaagaaaaaaegacbaaaadaaaaaakgikcaaaaaaaaaaa
abaaaaaadcaaaaakhcaabaaaahaaaaaaegacbaaaadaaaaaakgikcaaaaaaaaaaa
abaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaaahaaaaaa
ebaaaaafecaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaammcaabaaaaeaaaaaa
kgakbaaaaeaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaabeecaaaafaebagaibaaa
ahaaaaaadiaaaaakmcaabaaaaeaaaaaakgaobaaaaeaaaaaaaceaaaaaaaaaaaaa
aaaaaaaaaaaaiadmaaaaiadmeiaaaaalpcaabaaaahaaaaaaogakbaaaaeaaaaaa
eghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaiecaabaaa
aeaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaadcaaaaajicaabaaa
adaaaaaadkaabaaaadaaaaaackaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaam
hcaabaaaahaaaaaaegacbaaaagaaaaaaaceaaaaaaaaaaaeaaaaaaaeaaaaaaaea
aaaaaaaafgafbaaaabaaaaaabkaaaaafecaabaaaaeaaaaaabkaabaaaahaaaaaa
ebaaaaaficaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaamdcaabaaaahaaaaaa
pgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaaigaabaaa
ahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaaahaaaaaaaceaaaaaaaaaiadm
aaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaahaaaaaaegaabaaaahaaaaaa
eghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaaiicaabaaa
aeaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaadcaaaaajecaabaaa
aeaaaaaackaabaaaaeaaaaaadkaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaaj
icaabaaaadaaaaaackaabaaaaeaaaaaaabeaaaaaaaaaaadpdkaabaaaadaaaaaa
dcaaaaamhcaabaaaagaaaaaaegacbaaaagaaaaaaaceaaaaaaaaaiaeaaaaaiaea
aaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaafecaabaaaaeaaaaaabkaabaaa
agaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaagaaaaaadcaaaaamdcaabaaa
agaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaagaaaaaadiaaaaakdcaabaaaagaaaaaaegaabaaaagaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaagaaaaaaegaabaaa
agaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaagaaaaaaakaabaaaagaaaaaadcaaaaaj
ecaabaaaaeaaaaaackaabaaaaeaaaaaadkaabaaaaeaaaaaabkaabaaaagaaaaaa
dcaaaaajicaabaaaadaaaaaackaabaaaaeaaaaaaabeaaaaaaaaaiadodkaabaaa
adaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaadkaabaiaebaaaaaa
adaaaaaabnaaaaahicaabaaaacaaaaaaabeaaaaamnmmemdndkaabaaaacaaaaaa
aaaaaaajicaabaaaabaaaaaadkaabaiaebaaaaaaabaaaaaabkiacaaaaaaaaaaa
abaaaaaaaaaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaaaacaea
diaaaaahicaabaaaabaaaaaackaabaaaafaaaaaadkaabaaaabaaaaaadiaaaaai
icaabaaaabaaaaaadkaabaaaabaaaaaaakiacaaaaaaaaaaaabaaaaaadiaaaaah
icaabaaaadaaaaaadkaabaaaabaaaaaadkaabaaaabaaaaaadcaaaaajbcaabaaa
agaaaaaadkaabaaaabaaaaaadkaabaaaadaaaaaaakaabaaaaeaaaaaadiaaaaah
ecaabaaaagaaaaaackaabaaaafaaaaaaabeaaaaaaaaaiadoaaaaaaahccaabaaa
agaaaaaabkaabaaaafaaaaaaabeaaaaajkjjjjdodcaaaaanhcaabaaaahaaaaaa
egacbaiaebaaaaaaaaaaaaaaaceaaaaajkjjbjdojkjjbjdojkjjbjdoaaaaaaaa
egacbaaaadaaaaaadcaaaaanhcaabaaaaiaaaaaaegacbaiaebaaaaaaaaaaaaaa
aceaaaaaghggogdoghggogdoghggogdoaaaaaaaaegacbaaaadaaaaaadhaaaaaj
hcaabaaaadaaaaaapgapbaaaacaaaaaaegacbaaaahaaaaaaegacbaaaaiaaaaaa
dgaaaaafbcaabaaaafaaaaaaakaabaaaaeaaaaaadhaaaaajhcaabaaaafaaaaaa
pgapbaaaacaaaaaaegacbaaaagaaaaaaegacbaaaafaaaaaaboaaaaahicaabaaa
aaaaaaaadkaabaaaaaaaaaaaabeaaaaaabaaaaaadgaaaaafbcaabaaaaeaaaaaa
akaabaaaafaaaaaabgaaaaabdgaaaaafccaabaaaaeaaaaaaabeaaaaaaaaaaaaa
eiaaaaalpcaabaaaaaaaaaaaegaabaaaaeaaaaaaeghobaaaabaaaaaaaagabaaa
aaaaaaaaabeaaaaaaaaaaaaaddaaaaahicaabaaaaaaaaaaabkaabaaaafaaaaaa
abeaaaaaaaaaiadpdicaaaaiiccabaaaaaaaaaaadkaabaaaaaaaaaaaakiacaaa
aaaaaaaaacaaaaaaanaaaaadckaabaaaabaaaaaadgaaaaafhccabaaaaaaaaaaa
egacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_OFF" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 72 ALU, 9 TEX, 5 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 15, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, 0.25000000
def c8, -0.05000000, 0.02000000, -100.00000000, 1.50000000
def c9, 2.00000000, 3.00000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r1.xyz, r1.x, v1
mov r2.xyz, v0
mov_pp r1.w, c6.x
loop aL, i0
break_eq r1.w, c6.y
mul r4.xyz, r2, c3.x
mul r5.xyz, r4, c6.z
mov r2.w, c0.z
mad r3.xyw, c4.x, r2.w, r5.xyzz
frc r2.w, r3.y
add r3.y, r3, -r2.w
mad r3.xy, r3.y, c7, r3.xwzw
mov r3.w, c0.y
mad r4.xyz, c4.x, r3.w, r4
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
frc r3.w, r4.y
mad r2.w, r3.x, r2, r3.y
add r3.x, r4.y, -r3.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
mad r3.x, r3, r3.w, r3.y
mov r4.x, c0.z
mul r3.z, c4.x, r4.x
mad r4.xyz, r5, c6.z, r3.z
frc r3.w, r4.y
mad r2.w, r2, c7.z, r3.x
add r3.x, r4.y, -r3.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r4.xyz, r3, c6.w
add r3.xyz, v2, -r2
dp3 r3.x, r3, r3
texldl r4.xy, r4.xyzz, s0
add r3.y, r4.x, -r4
mad r3.y, r3, r3.w, r4
rsq r3.x, r3.x
mad r3.y, r3, c7.w, r2.w
rcp r3.x, r3.x
add r2.w, r3.x, -c2.x
add r2.w, r2, -r3.y
add r4.x, r2.w, c8.y
add r2.w, r2, c8.x
mov r3.xyz, r2
mov r3.w, c6.y
cmp r0, r2.w, r0, r3
mad r3.xyz, -r1, r4.x, r2
cmp_pp r1.w, r2, r1, c6.y
cmp r2.xyz, -r1.w, r2, r3
endloop
cmp r0, -r1.w, r0, c8.z
add r0.xyz, -r0, v2
dp3 r0.x, r0, r0
mov r1.x, c2
add r1.x, c7.z, r1
add r0.y, -r1.x, c2.x
rsq r0.x, r0.x
add r0.y, r0, c8.w
rcp r0.x, r0.x
add r0.x, r0, -r1
rcp r0.y, r0.y
mul_sat r0.x, r0, r0.y
mul r0.y, r0.x, r0.x
mad r0.x, -r0, c9, c9.y
cmp r0.w, r0, c6.y, c6.x
mov_pp r1, -r0.w
rcp r0.z, c1.x
mul r0.x, r0.y, r0
mad r0.x, -r0, r0.z, c6
mov r0.yz, c6.y
texldl oC0.xyz, r0.xyzz, s1
texkill r1.xyzw
mov_sat oC0.w, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_OFF" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 73 instructions, 6 temp regs, 0 temp arrays:
// ALU 46 float, 2 int, 0 uint
// TEX 0 (4 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 2 dynamic
"ps_4_0
eefiecedlklacjbinhlnffhicojeelhmnodblfemabaaaaaalaajaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefcmaaiaaaaeaaaaaaadaacaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajdcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgifcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaafecaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
abaaaaaadkaabaaaaaaaaaaaabeaaaaaapaaaaaadgaaaaafecaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaabaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaabaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaabaaaaaadkaabaaa
abaaaaaaaaaaaaajicaabaaaabaaaaaadkaabaaaabaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaacaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaadaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaadaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaadaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaacaaaaaadkaabaaaacaaaaaadkaabaaaadaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaabkaabaaaafaaaaaa
dcaaaaajicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaaadpdkaabaaa
acaaaaaadcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaadaaaaaa
bkaabaaaaeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaaaeaaaaaadcaaaaam
dcaabaaaaeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaaegaabaaaaeaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaaeaaaaaa
egaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaaeaaaaaabkaabaiaebaaaaaaaeaaaaaaakaabaaaaeaaaaaa
dcaaaaajicaabaaaadaaaaaadkaabaaaadaaaaaaakaabaaaaeaaaaaabkaabaaa
aeaaaaaadcaaaaajicaabaaaacaaaaaadkaabaaaadaaaaaaabeaaaaaaaaaiado
dkaabaaaacaaaaaaaaaaaaaiicaabaaaabaaaaaadkaabaaaabaaaaaadkaabaia
ebaaaaaaacaaaaaadbaaaaahicaabaaaacaaaaaadkaabaaaabaaaaaaabeaaaaa
mnmmemdnbpaaaeaddkaabaaaacaaaaaadgaaaaafhcaabaaaacaaaaaaegacbaaa
adaaaaaadgaaaaafecaabaaaabaaaaaaabeaaaaappppppppacaaaaabbfaaaaab
aaaaaaahicaabaaaabaaaaaadkaabaaaabaaaaaaabeaaaaaaknhkddmdcaaaaak
hcaabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaaabaaaaaaegacbaaa
adaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaaabaaaaaa
dgaaaaafecaabaaaabaaaaaadkaabaaaacaaaaaadgaaaaaihcaabaaaacaaaaaa
aceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaabdhaaaaamhcaabaaa
aaaaaaaakgakbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaaaaaamimcaaaamimc
aaaamimcaaaaaaaaaaaaaaaiicaabaaaaaaaaaaabkiacaaaaaaaaaaaabaaaaaa
abeaaaaaaaaaaadpaaaaaaaihcaabaaaaaaaaaaaegacbaaaaaaaaaaaegbcbaia
ebaaaaaaadaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaaaaaaaaaaegacbaaa
aaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaaaacaaaaibcaabaaa
aaaaaaaadkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaadcaaaaajccaabaaa
aaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaaaaaaeaeadiaaaaah
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahbcaabaaa
aaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaaoaaaaaibcaabaaaaaaaaaaa
akaabaaaaaaaaaaaakiacaaaaaaaaaaaabaaaaaaaaaaaaaibcaabaaaaaaaaaaa
akaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdgaaaaafccaabaaaaaaaaaaa
abeaaaaaaaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaaaaaaaaaaeghobaaa
abaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaadgcaaaagiccabaaaaaaaaaaa
akiacaaaaaaaaaaaacaaaaaaanaaaaadckaabaaaabaaaaaadgaaaaafhccabaaa
aaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_3" "SCATTERING_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_ON" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_ON" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 166 ALU, 23 TEX, 10 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 15, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, 0.25000000
def c8, 0.12500000, 0.06250000, -0.05000000, 0.02000000
def c9, -100.00000000, 0.15000001, 2.50000000, 0.30000001
defi i1, 8, 0, 1, 0
def c10, 0.05000000, 3.00000000, 0, 0
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r1.xyz, r1.x, v1
mov r2.xyz, v0
mov_pp r1.w, c6.x
loop aL, i0
break_eq r1.w, c6.y
mul r4.xyz, r2, c3.x
mul r5.xyz, r4, c6.z
mov r2.w, c0.z
mad r3.xyw, c4.x, r2.w, r5.xyzz
frc r4.w, r3.y
add r2.w, r3.y, -r4
mad r3.xy, r2.w, c7, r3.xwzw
mov r2.w, c0.y
mad r4.xyz, c4.x, r2.w, r4
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
mad r3.w, r3.x, r4, r3.y
frc r2.w, r4.y
add r3.x, r4.y, -r2.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r6.xy, r3.xyzz, s0
add r5.w, r6.x, -r6.y
mul r4.xyz, r5, c6.z
mov r4.w, c0.z
mad r5.xyz, c4.x, r4.w, r4
frc r4.w, r5.y
add r3.x, r5.y, -r4.w
mad r3.xy, r3.x, c7, r5.xzzw
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
mad r2.w, r5, r2, r6.y
mad r3.z, r3.w, c7, r2.w
add r2.w, r3.x, -r3.y
mul r4.xyz, r4, c6.z
mov r3.x, c0.w
mad r5.xyz, c4.x, r3.x, r4
mad r3.x, r2.w, r4.w, r3.y
mad r3.w, r3.x, c7, r3.z
frc r2.w, r5.y
add r3.x, r5.y, -r2.w
mov r3.z, c6.y
mad r3.xy, r3.x, c7, r5.xzzw
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
mad r3.x, r3, r2.w, r3.y
mov r4.w, c0
mul r3.z, c4.x, r4.w
mad r4.xyz, r4, c6.z, r3.z
frc r2.w, r4.y
mad r3.w, r3.x, c8.x, r3
add r3.x, r4.y, -r2.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r4.xyz, r3, c6.w
add r3.xyz, v2, -r2
dp3 r3.x, r3, r3
texldl r4.xy, r4.xyzz, s0
add r3.y, r4.x, -r4
mad r3.y, r3, r2.w, r4
rsq r3.x, r3.x
rcp r2.w, r3.x
mad r3.x, r3.y, c8.y, r3.w
add r2.w, r2, -c2.x
add r2.w, r2, -r3.x
add r4.x, r2.w, c8.w
add r2.w, r2, c8.z
mov r3.xyz, r2
mov r3.w, c6.y
cmp r0, r2.w, r0, r3
mad r3.xyz, -r1, r4.x, r2
cmp_pp r1.w, r2, r1, c6.y
cmp r2.xyz, -r1.w, r2, r3
endloop
cmp r0, -r1.w, r0, c9.x
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r1.xyz, r1.x, v1
mov r2.xyz, r0
mul r1.xyz, r1, c9.y
mov r1.w, c6.y
mov r2.w, c6.y
mov r3.w, c7.z
loop aL, i1
mul r3.xyz, r2, c3.x
mul r4.xyz, r3, c6.z
mov r0.x, c0.z
mad r5.xyz, c4.x, r0.x, r4
frc r5.w, r5.y
add r0.x, r5.y, -r5.w
mov r4.w, c0.y
mad r3.xyz, c4.x, r4.w, r3
mad r0.xy, r0.x, c7, r5.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
add r0.x, r0, -r0.y
frc r4.w, r3.y
mad r5.z, r0.x, r5.w, r0.y
add r0.x, r3.y, -r4.w
mad r0.xy, r0.x, c7, r3.xzzw
mul r3.xyz, r4, c6.z
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r5.xy, r0.xyzz, s0
mov r4.x, c0.z
mad r4.xyz, c4.x, r4.x, r3
frc r5.w, r4.y
add r0.x, r4.y, -r5.w
mad r0.xy, r0.x, c7, r4.xzzw
add r5.x, r5, -r5.y
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
mad r4.x, r5, r4.w, r5.y
add r4.w, r0.x, -r0.y
mad r0.z, r5, c7, r4.x
mul r3.xyz, r3, c6.z
mov r0.x, c0.w
mad r4.xyz, c4.x, r0.x, r3
mad r0.x, r4.w, r5.w, r0.y
mad r5.x, r0, c7.w, r0.z
frc r4.w, r4.y
add r0.x, r4.y, -r4.w
mad r0.xy, r0.x, c7, r4.xzzw
mov r0.z, c6.y
mul r0.xyz, r0, c6.w
texldl r0.xy, r0.xyzz, s0
add r0.x, r0, -r0.y
mad r0.x, r0, r4.w, r0.y
mov r4.x, c0.w
mul r0.z, c4.x, r4.x
mad r3.xyz, r3, c6.z, r0.z
frc r4.x, r3.y
mad r4.y, r0.x, c8.x, r5.x
add r0.x, r3.y, -r4
mad r0.xy, r0.x, c7, r3.xzzw
mov r0.z, c6.y
mul r3.xyz, r0, c6.w
add r0.xyz, v2, -r2
dp3 r0.x, r0, r0
texldl r3.xy, r3.xyzz, s0
add r0.y, r3.x, -r3
mad r0.y, r0, r4.x, r3
rsq r0.x, r0.x
rcp r0.x, r0.x
add r0.x, r0, -c2
mad r0.y, r0, c8, r4
add r0.y, r0.x, -r0
add r0.z, -r0.y, c10.x
cmp r0.z, r0, c6.x, c6.y
add r0.x, -r0, c9.z
mul r3.z, r0.x, r3.w
mul r3.z, r3, c1.x
mul r4.x, r3.z, r3.z
add r3.y, r0, c8.z
abs_pp r3.x, r0.z
add r0.xyz, r2, -r1
cmp r0.xyz, -r3.y, r0, r2
mad r2.xyz, -r1, c10.y, r0
cmp r2.xyz, -r3.x, r2, r0
mad r3.z, r4.x, r3, r1.w
mul r0.x, r3.w, c7.w
add r0.y, r2.w, c9.w
cmp r1.w, -r3.y, r3.z, r1
cmp r3.w, -r3.y, r0.x, r3
cmp r2.w, -r3.y, r0.y, r2
endloop
cmp r0.x, r0.w, c6.y, c6
mov_pp r0, -r0.x
texkill r0.xyzw
mov_sat r0.w, r2
mov r0.yz, c6.y
mov r0.x, r1.w
texldl oC0.xyz, r0.xyzz, s1
mul_sat oC0.w, r0, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_ON" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 156 instructions, 9 temp regs, 0 temp arrays:
// ALU 110 float, 4 int, 0 uint
// TEX 0 (11 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 3 dynamic
"ps_4_0
eefiecedegkopobdebokkdkcefbmdoehmcmcfkmmabaaaaaajmbeaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefckmbdaaaaeaaaaaaaolaeaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacajaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajhcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgihcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaapaaaaaadgaaaaaficaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaacaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaaaaaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaabkaabaaa
afaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaaafaaaaaa
dcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaadpdkaabaaa
adaaaaaadcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaa
bkaabaaaafaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaam
dcaabaaaafaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaa
egaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaa
dcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaa
afaaaaaadcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaiado
dkaabaaaadaaaaaadcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaa
aaaaaaebaaaaaaebaaaaaaebaaaaaaaakgakbaaaabaaaaaabkaaaaaficaabaaa
aeaaaaaabkaabaaaafaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaa
dcaaaaamdcaabaaaafaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaeb
aaaaaaaaaaaaaaaaigaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaa
afaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaa
afaaaaaaegaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaibcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaa
afaaaaaadcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaa
bkaabaaaafaaaaaadcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaa
aaaaaadodkaabaaaadaaaaaadcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaa
aceaaaaaaaaaiaebaaaaiaebaaaaiaebaaaaaaaakgakbaaaabaaaaaabkaaaaaf
icaabaaaaeaaaaaabkaabaaaaeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaa
aeaaaaaadcaaaaamdcaabaaaaeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeec
aaaafaebaaaaaaaaaaaaaaaaigaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaa
egaabaaaaeaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaal
pcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaaaaaaaaaibcaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaa
akaabaaaafaaaaaadcaaaaajbcaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaa
aeaaaaaabkaabaaaafaaaaaadcaaaaajicaabaaaadaaaaaaakaabaaaaeaaaaaa
abeaaaaaaaaaiadndkaabaaaadaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaaa
acaaaaaadkaabaiaebaaaaaaadaaaaaadbaaaaahicaabaaaadaaaaaadkaabaaa
acaaaaaaabeaaaaamnmmemdnbpaaaeaddkaabaaaadaaaaaadgaaaaafhcaabaaa
acaaaaaaegacbaaaadaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaapppppppp
acaaaaabbfaaaaabaaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaa
aknhkddmdcaaaaakhcaabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaa
acaaaaaaegacbaaaadaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaabaaaaaadgaaaaaficaabaaaabaaaaaadkaabaaaadaaaaaadgaaaaai
hcaabaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaab
dhaaaaamhcaabaaaacaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaa
aaaamimcaaaamimcaaaamimcaaaaaaaadgaaaaafhcaabaaaadaaaaaaegacbaaa
acaaaaaadgaaaaafbcaabaaaaeaaaaaaabeaaaaaaaaaaaaadgaaaaaigcaabaaa
afaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaadpaaaaaaaadgaaaaaficaabaaa
aaaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaaacaaaaaadkaabaaa
aaaaaaaaabeaaaaaaiaaaaaaadaaaeaddkaabaaaacaaaaaaaaaaaaaihcaabaaa
agaaaaaaegacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaa
acaaaaaaegacbaaaagaaaaaaegacbaaaagaaaaaaelaaaaaficaabaaaacaaaaaa
dkaabaaaacaaaaaaaaaaaaajicaabaaaadaaaaaadkaabaaaacaaaaaabkiacaia
ebaaaaaaaaaaaaaaabaaaaaadiaaaaaihcaabaaaagaaaaaaegacbaaaadaaaaaa
kgikcaaaaaaaaaaaabaaaaaadcaaaaakhcaabaaaahaaaaaaegacbaaaadaaaaaa
kgikcaaaaaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaafecaabaaaaeaaaaaa
bkaabaaaahaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaahaaaaaadcaaaaam
dcaabaaaahaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaaahaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaahaaaaaa
egaabaaaahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaiicaabaaaaeaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaa
dcaaaaajecaabaaaaeaaaaaackaabaaaaeaaaaaadkaabaaaaeaaaaaabkaabaaa
ahaaaaaadcaaaaamhcaabaaaahaaaaaaegacbaaaagaaaaaaaceaaaaaaaaaaaea
aaaaaaeaaaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaa
bkaabaaaahaaaaaaebaaaaaficaabaaaafaaaaaabkaabaaaahaaaaaadcaaaaam
dcaabaaaahaaaaaapgapbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaaahaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaahaaaaaa
egaabaaaahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaiicaabaaaafaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaaahaaaaaa
dcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaadkaabaaaafaaaaaabkaabaaa
ahaaaaaadcaaaaajecaabaaaaeaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaadp
ckaabaaaaeaaaaaadcaaaaamhcaabaaaahaaaaaaegacbaaaagaaaaaaaceaaaaa
aaaaiaeaaaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaa
aeaaaaaabkaabaaaahaaaaaaebaaaaaficaabaaaafaaaaaabkaabaaaahaaaaaa
dcaaaaamdcaabaaaahaaaaaapgapbaaaafaaaaaaaceaaaaaaaaabeecaaaafaeb
aaaaaaaaaaaaaaaaigaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaaegaabaaa
ahaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaa
ahaaaaaaegaabaaaahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaiicaabaaaafaaaaaabkaabaiaebaaaaaaahaaaaaaakaabaaa
ahaaaaaadcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaadkaabaaaafaaaaaa
bkaabaaaahaaaaaadcaaaaajecaabaaaaeaaaaaadkaabaaaaeaaaaaaabeaaaaa
aaaaiadockaabaaaaeaaaaaadcaaaaamhcaabaaaahaaaaaaegacbaaaagaaaaaa
aceaaaaaaaaaaaebaaaaaaebaaaaaaebaaaaaaaakgakbaaaabaaaaaabkaaaaaf
icaabaaaaeaaaaaabkaabaaaahaaaaaaebaaaaaficaabaaaafaaaaaabkaabaaa
ahaaaaaadcaaaaamdcaabaaaahaaaaaapgapbaaaafaaaaaaaceaaaaaaaaabeec
aaaafaebaaaaaaaaaaaaaaaaigaabaaaahaaaaaadiaaaaakdcaabaaaahaaaaaa
egaabaaaahaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaal
pcaabaaaahaaaaaaegaabaaaahaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaaaaaaaaaiicaabaaaafaaaaaabkaabaiaebaaaaaaahaaaaaa
akaabaaaahaaaaaadcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaadkaabaaa
afaaaaaabkaabaaaahaaaaaadcaaaaajecaabaaaaeaaaaaadkaabaaaaeaaaaaa
abeaaaaaaaaaaadockaabaaaaeaaaaaadcaaaaamhcaabaaaagaaaaaaegacbaaa
agaaaaaaaceaaaaaaaaaiaebaaaaiaebaaaaiaebaaaaaaaakgakbaaaabaaaaaa
bkaaaaaficaabaaaaeaaaaaabkaabaaaagaaaaaaebaaaaaficaabaaaafaaaaaa
bkaabaaaagaaaaaadcaaaaamdcaabaaaagaaaaaapgapbaaaafaaaaaaaceaaaaa
aaaabeecaaaafaebaaaaaaaaaaaaaaaaigaabaaaagaaaaaadiaaaaakdcaabaaa
agaaaaaaegaabaaaagaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaa
eiaaaaalpcaabaaaagaaaaaaegaabaaaagaaaaaaeghobaaaaaaaaaaaaagabaaa
abaaaaaaabeaaaaaaaaaaaaaaaaaaaaiicaabaaaafaaaaaabkaabaiaebaaaaaa
agaaaaaaakaabaaaagaaaaaadcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaa
dkaabaaaafaaaaaabkaabaaaagaaaaaadcaaaaajecaabaaaaeaaaaaadkaabaaa
aeaaaaaaabeaaaaaaaaaiadnckaabaaaaeaaaaaaaaaaaaaiicaabaaaadaaaaaa
dkaabaaaadaaaaaackaabaiaebaaaaaaaeaaaaaabnaaaaahicaabaaaadaaaaaa
abeaaaaamnmmemdndkaabaaaadaaaaaaaaaaaaajicaabaaaacaaaaaadkaabaia
ebaaaaaaacaaaaaabkiacaaaaaaaaaaaabaaaaaaaaaaaaahicaabaaaacaaaaaa
dkaabaaaacaaaaaaabeaaaaaaaaacaeadiaaaaahicaabaaaacaaaaaackaabaaa
afaaaaaadkaabaaaacaaaaaadiaaaaaiicaabaaaacaaaaaadkaabaaaacaaaaaa
akiacaaaaaaaaaaaabaaaaaadiaaaaahecaabaaaaeaaaaaadkaabaaaacaaaaaa
dkaabaaaacaaaaaadcaaaaajbcaabaaaagaaaaaadkaabaaaacaaaaaackaabaaa
aeaaaaaaakaabaaaaeaaaaaadiaaaaahecaabaaaagaaaaaackaabaaaafaaaaaa
abeaaaaaaaaaiadoaaaaaaahccaabaaaagaaaaaabkaabaaaafaaaaaaabeaaaaa
jkjjjjdodcaaaaanhcaabaaaahaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaa
jkjjbjdojkjjbjdojkjjbjdoaaaaaaaaegacbaaaadaaaaaadcaaaaanhcaabaaa
aiaaaaaaegacbaiaebaaaaaaaaaaaaaaaceaaaaaghggogdoghggogdoghggogdo
aaaaaaaaegacbaaaadaaaaaadhaaaaajhcaabaaaadaaaaaapgapbaaaadaaaaaa
egacbaaaahaaaaaaegacbaaaaiaaaaaadgaaaaafbcaabaaaafaaaaaaakaabaaa
aeaaaaaadhaaaaajhcaabaaaafaaaaaapgapbaaaadaaaaaaegacbaaaagaaaaaa
egacbaaaafaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaaabeaaaaa
abaaaaaadgaaaaafbcaabaaaaeaaaaaaakaabaaaafaaaaaabgaaaaabdgaaaaaf
ccaabaaaaeaaaaaaabeaaaaaaaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaa
aeaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaaddaaaaah
icaabaaaaaaaaaaabkaabaaaafaaaaaaabeaaaaaaaaaiadpdicaaaaiiccabaaa
aaaaaaaadkaabaaaaaaaaaaaakiacaaaaaaaaaaaacaaaaaaanaaaaaddkaabaaa
abaaaaaadgaaaaafhccabaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_ON" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_ON" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_OFF" }
Vector 0 [_Time]
Float 1 [_Heat]
Float 2 [_Radius]
Float 3 [_Frequency]
Float 4 [_ScrollSpeed]
Float 5 [_Alpha]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_RampTex] 2D
"ps_3_0
; 94 ALU, 13 TEX, 5 FLOW
dcl_2d s0
dcl_2d s1
def c6, 1.00000000, 0.00000000, 2.00000000, 0.01562500
defi i0, 15, 0, 1, 0
def c7, 37.00000000, 13.00000000, 0.50000000, 0.25000000
def c8, 0.12500000, 0.06250000, -0.05000000, 0.02000000
def c9, -100.00000000, 1.50000000, 2.00000000, 3.00000000
dcl_texcoord0 v0.xyz
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dp3 r1.x, v1, v1
rsq r1.x, r1.x
mul r1.xyz, r1.x, v1
mov r2.xyz, v0
mov_pp r1.w, c6.x
loop aL, i0
break_eq r1.w, c6.y
mul r4.xyz, r2, c3.x
mul r5.xyz, r4, c6.z
mov r2.w, c0.z
mad r3.xyw, c4.x, r2.w, r5.xyzz
frc r4.w, r3.y
add r2.w, r3.y, -r4
mad r3.xy, r2.w, c7, r3.xwzw
mov r2.w, c0.y
mad r4.xyz, c4.x, r2.w, r4
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
mad r3.w, r3.x, r4, r3.y
frc r2.w, r4.y
add r3.x, r4.y, -r2.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r6.xy, r3.xyzz, s0
add r5.w, r6.x, -r6.y
mul r4.xyz, r5, c6.z
mov r4.w, c0.z
mad r5.xyz, c4.x, r4.w, r4
frc r4.w, r5.y
add r3.x, r5.y, -r4.w
mad r3.xy, r3.x, c7, r5.xzzw
mov r3.z, c6.y
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
mad r2.w, r5, r2, r6.y
mad r3.z, r3.w, c7, r2.w
add r2.w, r3.x, -r3.y
mul r4.xyz, r4, c6.z
mov r3.x, c0.w
mad r5.xyz, c4.x, r3.x, r4
mad r3.x, r2.w, r4.w, r3.y
mad r3.w, r3.x, c7, r3.z
frc r2.w, r5.y
add r3.x, r5.y, -r2.w
mov r3.z, c6.y
mad r3.xy, r3.x, c7, r5.xzzw
mul r3.xyz, r3, c6.w
texldl r3.xy, r3.xyzz, s0
add r3.x, r3, -r3.y
mad r3.x, r3, r2.w, r3.y
mov r4.w, c0
mul r3.z, c4.x, r4.w
mad r4.xyz, r4, c6.z, r3.z
frc r2.w, r4.y
mad r3.w, r3.x, c8.x, r3
add r3.x, r4.y, -r2.w
mad r3.xy, r3.x, c7, r4.xzzw
mov r3.z, c6.y
mul r4.xyz, r3, c6.w
add r3.xyz, v2, -r2
dp3 r3.x, r3, r3
texldl r4.xy, r4.xyzz, s0
add r3.y, r4.x, -r4
mad r3.y, r3, r2.w, r4
rsq r3.x, r3.x
rcp r2.w, r3.x
mad r3.x, r3.y, c8.y, r3.w
add r2.w, r2, -c2.x
add r2.w, r2, -r3.x
add r4.x, r2.w, c8.w
add r2.w, r2, c8.z
mov r3.xyz, r2
mov r3.w, c6.y
cmp r0, r2.w, r0, r3
mad r3.xyz, -r1, r4.x, r2
cmp_pp r1.w, r2, r1, c6.y
cmp r2.xyz, -r1.w, r2, r3
endloop
cmp r0, -r1.w, r0, c9.x
add r0.xyz, -r0, v2
dp3 r0.x, r0, r0
mov r1.x, c2
add r1.x, c7.z, r1
add r0.y, -r1.x, c2.x
rsq r0.x, r0.x
add r0.y, r0, c9
rcp r0.x, r0.x
add r0.x, r0, -r1
rcp r0.y, r0.y
mul_sat r0.x, r0, r0.y
mul r0.y, r0.x, r0.x
mad r0.x, -r0, c9.z, c9.w
cmp r0.w, r0, c6.y, c6.x
mov_pp r1, -r0.w
rcp r0.z, c1.x
mul r0.x, r0.y, r0
mad r0.x, -r0, r0.z, c6
mov r0.yz, c6.y
texldl oC0.xyz, r0.xyzz, s1
texkill r1.xyzw
mov_sat oC0.w, c5.x
"
}

SubProgram "d3d11 " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_OFF" }
ConstBuffer "$Globals" 48 // 36 used size, 6 vars
Float 16 [_Heat]
Float 20 [_Radius]
Float 24 [_Frequency]
Float 28 [_ScrollSpeed]
Float 32 [_Alpha]
ConstBuffer "UnityPerCamera" 128 // 16 used size, 8 vars
Vector 0 [_Time] 4
BindCB "$Globals" 0
BindCB "UnityPerCamera" 1
SetTexture 0 [_MainTex] 2D 1
SetTexture 1 [_RampTex] 2D 0
// 91 instructions, 6 temp regs, 0 temp arrays:
// ALU 62 float, 2 int, 0 uint
// TEX 0 (6 load, 0 comp, 0 bias, 0 grad)
// FLOW 2 static, 2 dynamic
"ps_4_0
eefiecedaohhckpigpmmbkaljjnjaidhiimdoigfabaaaaaadiamaaaaadaaaaaa
cmaaaaaaleaaaaaaoiaaaaaaejfdeheoiaaaaaaaaeaaaaaaaiaaaaaagiaaaaaa
aaaaaaaaabaaaaaaadaaaaaaaaaaaaaaapaaaaaaheaaaaaaaaaaaaaaaaaaaaaa
adaaaaaaabaaaaaaahahaaaaheaaaaaaabaaaaaaaaaaaaaaadaaaaaaacaaaaaa
ahahaaaaheaaaaaaacaaaaaaaaaaaaaaadaaaaaaadaaaaaaapahaaaafdfgfpfa
epfdejfeejepeoaafeeffiedepepfceeaaklklklepfdeheocmaaaaaaabaaaaaa
aiaaaaaacaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaapaaaaaafdfgfpfe
gbhcghgfheaaklklfdeieefceialaaaaeaaaaaaancacaaaafjaaaaaeegiocaaa
aaaaaaaaadaaaaaafjaaaaaeegiocaaaabaaaaaaabaaaaaafkaaaaadaagabaaa
aaaaaaaafkaaaaadaagabaaaabaaaaaafibiaaaeaahabaaaaaaaaaaaffffaaaa
fibiaaaeaahabaaaabaaaaaaffffaaaagcbaaaadhcbabaaaabaaaaaagcbaaaad
hcbabaaaacaaaaaagcbaaaadhcbabaaaadaaaaaagfaaaaadpccabaaaaaaaaaaa
giaaaaacagaaaaaabaaaaaahbcaabaaaaaaaaaaaegbcbaaaacaaaaaaegbcbaaa
acaaaaaaeeaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaadiaaaaahhcaabaaa
aaaaaaaaagaabaaaaaaaaaaaegbcbaaaacaaaaaadiaaaaajhcaabaaaabaaaaaa
pgipcaaaaaaaaaaaabaaaaaajgihcaaaabaaaaaaaaaaaaaadgaaaaaihcaabaaa
acaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadgaaaaafhcaabaaa
adaaaaaaegbcbaaaabaaaaaadgaaaaaficaabaaaaaaaaaaaabeaaaaaaaaaaaaa
dgaaaaaficaabaaaabaaaaaaabeaaaaaaaaaaaaadaaaaaabcbaaaaahicaabaaa
acaaaaaadkaabaaaaaaaaaaaabeaaaaaapaaaaaadgaaaaaficaabaaaabaaaaaa
abeaaaaaaaaaaaaaadaaaeaddkaabaaaacaaaaaaaaaaaaaihcaabaaaaeaaaaaa
egacbaaaadaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahicaabaaaacaaaaaa
egacbaaaaeaaaaaaegacbaaaaeaaaaaaelaaaaaficaabaaaacaaaaaadkaabaaa
acaaaaaaaaaaaaajicaabaaaacaaaaaadkaabaaaacaaaaaabkiacaiaebaaaaaa
aaaaaaaaabaaaaaadiaaaaaihcaabaaaaeaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaadcaaaaakhcaabaaaafaaaaaaegacbaaaadaaaaaakgikcaaa
aaaaaaaaabaaaaaaagaabaaaabaaaaaabkaaaaaficaabaaaadaaaaaabkaabaaa
afaaaaaaebaaaaaficaabaaaaeaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaapgapbaaaaeaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
icaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaadaaaaaadkaabaaaadaaaaaadkaabaaaaeaaaaaabkaabaaaafaaaaaa
dcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaaaeaaaaaaaea
aaaaaaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaabkaabaaa
afaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaamdcaabaaa
afaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaaaaaaaaaa
igaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaaaceaaaaa
aaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaaegaabaaa
afaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaaaaaaaaai
bcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaadcaaaaaj
icaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaaafaaaaaa
dcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaaadpdkaabaaa
adaaaaaadcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaaaaaaiaea
aaaaiaeaaaaaiaeaaaaaaaaafgafbaaaabaaaaaabkaaaaaficaabaaaaeaaaaaa
bkaabaaaafaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaadcaaaaam
dcaabaaaafaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaebaaaaaaaa
aaaaaaaaigaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaaafaaaaaa
aceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaaafaaaaaa
egaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaaaaaaaaaa
aaaaaaaibcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaaafaaaaaa
dcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaabkaabaaa
afaaaaaadcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaaaaaaiado
dkaabaaaadaaaaaadcaaaaamhcaabaaaafaaaaaaegacbaaaaeaaaaaaaceaaaaa
aaaaaaebaaaaaaebaaaaaaebaaaaaaaakgakbaaaabaaaaaabkaaaaaficaabaaa
aeaaaaaabkaabaaaafaaaaaaebaaaaafccaabaaaafaaaaaabkaabaaaafaaaaaa
dcaaaaamdcaabaaaafaaaaaafgafbaaaafaaaaaaaceaaaaaaaaabeecaaaafaeb
aaaaaaaaaaaaaaaaigaabaaaafaaaaaadiaaaaakdcaabaaaafaaaaaaegaabaaa
afaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaalpcaabaaa
afaaaaaaegaabaaaafaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaaabeaaaaa
aaaaaaaaaaaaaaaibcaabaaaafaaaaaabkaabaiaebaaaaaaafaaaaaaakaabaaa
afaaaaaadcaaaaajicaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaaafaaaaaa
bkaabaaaafaaaaaadcaaaaajicaabaaaadaaaaaadkaabaaaaeaaaaaaabeaaaaa
aaaaaadodkaabaaaadaaaaaadcaaaaamhcaabaaaaeaaaaaaegacbaaaaeaaaaaa
aceaaaaaaaaaiaebaaaaiaebaaaaiaebaaaaaaaakgakbaaaabaaaaaabkaaaaaf
icaabaaaaeaaaaaabkaabaaaaeaaaaaaebaaaaafccaabaaaaeaaaaaabkaabaaa
aeaaaaaadcaaaaamdcaabaaaaeaaaaaafgafbaaaaeaaaaaaaceaaaaaaaaabeec
aaaafaebaaaaaaaaaaaaaaaaigaabaaaaeaaaaaadiaaaaakdcaabaaaaeaaaaaa
egaabaaaaeaaaaaaaceaaaaaaaaaiadmaaaaiadmaaaaaaaaaaaaaaaaeiaaaaal
pcaabaaaafaaaaaaegaabaaaaeaaaaaaeghobaaaaaaaaaaaaagabaaaabaaaaaa
abeaaaaaaaaaaaaaaaaaaaaibcaabaaaaeaaaaaabkaabaiaebaaaaaaafaaaaaa
akaabaaaafaaaaaadcaaaaajbcaabaaaaeaaaaaadkaabaaaaeaaaaaaakaabaaa
aeaaaaaabkaabaaaafaaaaaadcaaaaajicaabaaaadaaaaaaakaabaaaaeaaaaaa
abeaaaaaaaaaiadndkaabaaaadaaaaaaaaaaaaaiicaabaaaacaaaaaadkaabaaa
acaaaaaadkaabaiaebaaaaaaadaaaaaadbaaaaahicaabaaaadaaaaaadkaabaaa
acaaaaaaabeaaaaamnmmemdnbpaaaeaddkaabaaaadaaaaaadgaaaaafhcaabaaa
acaaaaaaegacbaaaadaaaaaadgaaaaaficaabaaaabaaaaaaabeaaaaapppppppp
acaaaaabbfaaaaabaaaaaaahicaabaaaacaaaaaadkaabaaaacaaaaaaabeaaaaa
aknhkddmdcaaaaakhcaabaaaadaaaaaaegacbaiaebaaaaaaaaaaaaaapgapbaaa
acaaaaaaegacbaaaadaaaaaaboaaaaahicaabaaaaaaaaaaadkaabaaaaaaaaaaa
abeaaaaaabaaaaaadgaaaaaficaabaaaabaaaaaadkaabaaaadaaaaaadgaaaaai
hcaabaaaacaaaaaaaceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabgaaaaab
dhaaaaamhcaabaaaaaaaaaaapgapbaaaabaaaaaaegacbaaaacaaaaaaaceaaaaa
aaaamimcaaaamimcaaaamimcaaaaaaaaaaaaaaaiicaabaaaaaaaaaaabkiacaaa
aaaaaaaaabaaaaaaabeaaaaaaaaaaadpaaaaaaaihcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegbcbaiaebaaaaaaadaaaaaabaaaaaahbcaabaaaaaaaaaaaegacbaaa
aaaaaaaaegacbaaaaaaaaaaaelaaaaafbcaabaaaaaaaaaaaakaabaaaaaaaaaaa
aacaaaaibcaabaaaaaaaaaaadkaabaiaebaaaaaaaaaaaaaaakaabaaaaaaaaaaa
dcaaaaajccaabaaaaaaaaaaaakaabaaaaaaaaaaaabeaaaaaaaaaaamaabeaaaaa
aaaaeaeadiaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaaakaabaaaaaaaaaaa
diaaaaahbcaabaaaaaaaaaaaakaabaaaaaaaaaaabkaabaaaaaaaaaaaaoaaaaai
bcaabaaaaaaaaaaaakaabaaaaaaaaaaaakiacaaaaaaaaaaaabaaaaaaaaaaaaai
bcaabaaaaaaaaaaaakaabaiaebaaaaaaaaaaaaaaabeaaaaaaaaaiadpdgaaaaaf
ccaabaaaaaaaaaaaabeaaaaaaaaaaaaaeiaaaaalpcaabaaaaaaaaaaaegaabaaa
aaaaaaaaeghobaaaabaaaaaaaagabaaaaaaaaaaaabeaaaaaaaaaaaaadgcaaaag
iccabaaaaaaaaaaaakiacaaaaaaaaaaaacaaaaaaanaaaaaddkaabaaaabaaaaaa
dgaaaaafhccabaaaaaaaaaaaegacbaaaaaaaaaaadoaaaaab"
}

SubProgram "gles " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "QUALITY_MED" "OCTAVES_5" "SCATTERING_OFF" }
"!!GLES3"
}

}

#LINE 185

		}
	}
	CustomEditor "CJPyroclasticMaterialEditor"
}
